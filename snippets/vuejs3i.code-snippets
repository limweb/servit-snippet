{
    "31-snippet":{
        "prefix": ["3i-snippet","snippet","3snippet"],
        "body":[
            "\"$10\":{",
            "  \"prefix\":[$20],",
            "  \"body\":[$30],",
            "  \"description\":\"$40\"",
            "}",
        ],
        "description": "3i snippet"
    },
    "3i-vue3-setup-fun": {
        "prefix": "3i-vue3-fun",
        "body": [
            "<script lang=\"ts\">",
            "import { type Ref, defineComponent, onMounted, ref } from 'vue'",
            "",
            "export default defineComponent({",
            "  name: '$1',",
            "  setup() {",
            "    const myData: Ref<any[]> = ref([])",
            "",
            "    onMounted(() => {",
            "      myData.value = []",
            "    })",
            "",
            "    const myFunction = (name: string) => { return name }",
            "    return {",
            "      myData,",
            "      myFunction,",
            "    }",
            "  },",
            "})",
            "</script>",
            "",
            "<template>",
            "  <div>",
            "    $1",
            "  </div>",
            "</template>",
            "",
        ],
        "description": "3i vue3 setup function"
    },
    "3I-script-vue-setup": {
        "prefix": "3i-vue3setup",
        "body": [
            "<script setup lang=\"ts\">",
            "       import { type Ref, type PropType, nextTick,watch, onMounted, computed, reactive, ref  } from 'vue'",
            "       import { Dialog, DialogPanel, TransitionChild, TransitionRoot } from '@headlessui/vue'",
            "       import { useRoute, useRouter } from 'vue-router'",
            "       import { useI18n } from 'vue-i18n'",
            "       import { Color, Size, Variant, getIcon } from '@/shared/utils/constants' ",
            "       const router = useRouter()",
            "       const { t } = useI18n()",
            "",
            "</script>",
            "",
            "<template>",
            "   <!-- 3i-alert -->",
            "   <!-- 3i-modal -->",
            "   <Content>",
            "    <template #content>",
            "        <!-- 3i-banner -->",
            "        <div class=\"py-6 px-4\">",
            "            <div class=\"flex flex-col gap-4 md:flex-row md:h-[90px]\">",
            "            </div>",
            "            <div class=\"my-4\">",
            "            </div>",
            "            <div class=\"my-4\">",
            "               <!-- table--area -start -->",
            "              <template v-if=\"showTable\">",
            "                   <!-- 3i-table -->",
            "                   <!-- 3i-table-level -->",
            "              </template>",
            "              <template v-else>",
            "                   <!-- 3i-noSearch -->",
            "              </template>",
            "               <!-- table--area -end -->",
            "            </div>",
            "            <div class=\" mt-8 text-center mb-4\">",
            "                <!-- 3i-button center -->",
            "            </div>",
            "        </div>",
            "    </template>",
            "  </Content>",
            "</template>",
            "",
        ],
        "description": "3i vue3 script setup tag"
    },
    "3i-banner":{
        "prefix": ["3i-banner","3banner","3b"],
        "body":[
            "import Banner from '@/shared/components/banner/Banner.component.vue'",
            "import { Color, Size, Variant, getIcon } from '@/shared/utils/constants' ",
            "        ",
            "<Banner",
            "    :variant=\"Variant.${1|OUTLINED,CONTAINED,CONTAINEDWHITE,LABEL,TEXT,OUTLINEDWHITE|}\"",
            "    :color=\"Color.${5|PRIMARY,GOLDEN,DANGER,INFO,WARNING,BLUE_GREY,GREY,BLACK|}\"",
            "    icon=\"${10|info,IconInfo,primary,warning,danger,IconChange,IconLogout,IconAlert,IconAlertError,IconLogo,IconEditOutline,IconEditTable,IconTrashTable,IconCreditCard,IconEdit,IconPlus,IconPaper,IconQuestion,IconPrint,IconExcel,IconEventReceived,IconEye,IconUpdate,IconProfile,IconSandClock,IconAttention,IconCalculateCheck,IconAddProject,IconAdd,IconArrowUp,IconArrowUpWhite,IconSave,IconCloseCircle,IconWarning,IconWarningCircle,IconDownload,IconImportFile,IconScan,IconClose,IconDocCancel,IconExecutive,IconSystemAccount,IconApprove,IconSwapUser,IconAccept,IconDetail,IconDetailDoc,IconMoneyPlus,IconHelp|}\"",
            ">",
            "    ${20:<span v-html=\"t('msg.warning.warningApproveCommand')\" />}",
            "    <span> ${0}</span>",
            "</Banner>",
        ] ,
        "description": "3i banner"
    },
    "3i-modal-old":{
        "prefix": ["3i-modal","3imodal"],
        "body": [
            "//3i-modal",
            "${0}import Modal from '@/shared/components/modal/Modal.component.vue'",
            "import { ModalType } from '@/shared/interface/components/modal.interface'",
            "",
            "const ${1:modal} = ref<InstanceType<typeof Modal>>()",
            "const openConfirm = () => {",
            "  ${1:modal}.value?.openModal({",
            "    type: ModalType.${10|CONFIRM,SUCCESS,DELETE,FINISH,EMPTY,DEFAULT|},",
            "    ${20:title: \"titleTxt\"}",
            "  \\})",
            "}",
            "const ${3:closeModal} = () => {",
            "  ${1:modal}.value?.closeModal()",
            "}",
            "",
            "const ${2:submit} = (e: boolean) => {",
            "    if (e)",
            "      ${3:closeModal}()",
            "}",
            "",
            "<Modal ref=\"${1:modal}\" @submit=\"${2:submit}\" >",
            "  ${30: <template #body>",
            "       <div class=\"flex flex-col gap-4\">",
            "         <div class=\"flex md:flex-row flex-col gap-4\">",
            "           <div class=\"md:w-1/2 w-full\">",
            "               <!-- 3i-input -->",
            "           </div>",
            "         </div>",
            "       </div>",
            "   </template>}",
            "</Modal>",
        ],
        "description": "3i modal"
    },
    "3i-alert":{
        "prefix": ["3i-alert","3alert"],
        "body": [
            "//3i=alert",
            "import Alert3Component from '@/shared/components/alert/AlertComponent.vue'",
            "const alert = ref<InstanceType<typeof Alert3Component>>()",
            "",
            "interface IAlert {",
            "  type: string",
            "  title?: string",
            "  description?: string",
            "}",
            "const alertObj: IAlert = reactive({",
            "  type: 'primary',",
            "  title: t('txt.success'),",
            "  description: t('msg.success.successfulTransaction'),",
            "})",
            "",
            "const openAlert = (msg?: string, check = true) => {",
            "  if (check) {",
            "    alertObj.type = 'primary'",
            "    alertObj.title = t('txt.success')",
            "    alertObj.description = msg",
            "  }",
            "  else {",
            "    alertObj.type = 'danger'",
            "    alertObj.title = t('txt.unSuccess')",
            "    alertObj.description = msg",
            "  }",
            "  alert.value?.open()",
            "}",
            "",
            "<Alert3Component",
            "    ref=\"alert\" :type=\"alertObj.type\" :title=\"alertObj.title\" :description=\"alertObj.description\"",
            "    dismissible",
            "/>",
        ],
        "description": "3i alert"
    },
    "3i-pdf":{
        "prefix": "3i-pdf",
        "body": [
            "//3i-pdf",
            "import Pdf from '@/shared/components/pdf/Pdf.component.vue'",
            "const pdfSource = ref('https://raw.githubusercontent.com/mozilla/pdf.js/ba2edeae/web/compressed.tracemonkey-pldi-09.pdf')",
            "const exportOptions = reactive({ excel: false, pdf: false })",
            "const onExportPdf = () => {}",
            "const onExportExcel = () => {}",
            "const handleDocumentRender = (pdfRef: Ref<any>) => {}",
            "<Pdf :pdf-source=\"pdfSource\" :show-export=\"true\" :on-export-pdf=\"onExportPdf\" :on-export-excel=\"onExportExcel\" :export-options=\"exportOptions\" />",
        ],
        "description": "pdf components"
    },
    "3i-select-dropdown":{
        "prefix": ["3i-select","3dropdown","3ddl"],
        "body": [
            "${0:const ${10:dropdownList} = ref([",
            "   {",
            "     dropDownCode: 2565,",
            "     dropDownName: 2565,",
            "   \\},",
            " ])",
            "",
            "const ${10}Changed = () => {",
            "    // save to store",
            "    // console.log(state)",
            "    // statementStore.setStatement(state)",
            "\\}",
            "}",
            " <Select",
            " v-model=\"state.${20:xxxxx}\"",
            " name=\"${20}\"",
            " return-object=\"false\"",
            " :label=\"${55:Label}\"",
            " ${60:required}",
            " :validate=\"v\\$.$20.\\$invalid\"",
            " :disabled=\"${70:is_disabled}\"",
            " :is-submit=\"${80:isSubmit}\"",
            " :option=\"${10}\"",
            " show-label-disable "
            " optionLabel=\"dropDownName\"",
            " optionValue=\"dropDownCode\"",
            " @change=\"${10}Changed()\"",
            " />",
        ]
    },
    "3i-validate" :{
        "prefix": ["3i-validate","3validate"],
        "body": [
            "import { helpers, required } from '@vuelidate/validators'",
            "import useVuelidate from '@vuelidate/core'",
            "const isSubmit = ref(false) ",
            "const ${1:rules} = computed(() => ({",
            "    ${5:ruleName}: {",
            "      required: helpers.withMessage( ${10:t('msg.validator.pleaseSelect'}, { msg: ${20:t('txt.budgetYear')} }), required),",
            "    \\},",
            "  }))",
            "const v\\$${50} = useVuelidate(${1}, ${30:state})",
            "// <!-- example -->",
            "// <div-example :is-submit=\"isSubmit\" :validate=\"v\\$.name.\\$invalid\"  />"
        ],
        "description": "vue validate"
    },
    "3i-valid-example" :{
        "prefix": ["3i-validate-example","3validateexample","3validateused"],
        "body": [
            ":is-submit=\"isSubmit\" :validate=\"v\\$.${10:name}.\\$invalid\" "
        ],
        "description": "3i-valid-example"
    },
    "3i-validate-use-example" :{
        "prefix": ["3i-validate","3validate","3validateused"],
        "body": [
            ":is-submit=\"isSubmit\" :validate=\"v\\$.${10:name}.\\$invalid\" "
        ],
        "description": "vue validate"
    },
    "3i-inputs-old": {
        "prefix": ["3i-input"],
        "body": [
            "<div class=\"h-20 my-2\">",
            "  <label for=\"name\" class=\"after:content-['*'] after:text-red-500 after:ml-1\">{{ t('txt.name') }}</label>",
            "  <${10|InputNumber,InputText,Checkbox|} v-model=\"state.name\" :placeholder=\"t('msg.validator.pleaseEnter', { msg:",
            "    t('txt.name') })\" name=\"name\" :class=\"{ 'border-red-400 border' : isSubmit && v\\$.name.\\$invalid }\" />",
            "  <div v-show=\"isSubmit && v\\$.name.\\$invalid\" class=\"text-red-400\">",
            "    <pre v-if=\"v\\$.name.required.\\$invalid\">{{ v\\$.name.required.\\$message }}</pre>",
            "    <pre v-else-if=\"v\\$.name.minLength.\\$invalid\">{{ v\\$.name.minLength.\\$message }}</pre>",
            "    <pre v-else-if=\"v\\$.name.validations.\\$invalid\">{{ v\\$.name.validations.\\$message }}</pre>",
            "  </div>",
            "</div>",
        ]
    },
    "3i-button": {
        "prefix": "3i-button",
        "body": [
            "<Button",
            "${1|icon-left,icon-right|}=\"${5|info,IconInfo,primary,warning,danger,IconChange,IconLogout,IconAlert,IconAlertError,IconLogo,IconEditOutline,IconEditTable,IconTrashTable,IconCreditCard,IconEdit,IconPlus,IconPaper,IconQuestion,IconPrint,IconExcel,IconEventReceived,IconEye,IconUpdate,IconProfile,IconSandClock,IconAttention,IconCalculateCheck,IconAddProject,IconAdd,IconArrowUp,IconArrowUpWhite,IconSave,IconCloseCircle,IconWarning,IconWarningCircle,IconDownload,IconImportFile,IconScan,IconClose,IconDocCancel,IconExecutive,IconSystemAccount,IconApprove,IconSwapUser,IconAccept,IconDetail,IconDetailDoc,IconMoneyPlus,IconHelp|}\"",
            ":label=\"${10:t('btn.ok')}\"",
            ":variant=\"Variant.${60|CONTAINED,CONTAINEDWHITE,LABEL,TEXT,OUTLINED,OUTLINEDWHITE|}\"",
            ":size=\"Size.${70|MEDIUM,SMALL,LARGE|}\"",
            ":color=\"Color.${80|PRIMARY,GOLDEN,DANGER,INFO,WARNING,BLUE_GREY,GREY,BLACK|}\"",
            "@click=\"${90:clickfunction}\"",
            "loading ",
            "/>",
        ],
        "description": "button"
    },
    "3i-summaryAmount-forTable": {
        "prefix": "3i-summaryAmount",
        "body": [
            "import { FormatNumber } from '@/shared/utils/number'",
            "const formatNumber = new FormatNumber()",
            "const getFormatNumber = (data: number | string, decimal = 0) => {",
            "  return formatNumber.Currency(Number(data), decimal)",
            "}",
            "",
            "const summaryAmount = (item: any, field: string) => {",
            "  let summary = 0",
            "",
            "  for (const key in item) {",
            "    if (Array.isArray(item[key])) {",
            "      const list = item[key]",
            "      list.forEach((itm: any) => {",
            "        summary += summaryAmount(itm, field)",
            "      })",
            "    }",
            "    else {",
            "      if (key === field)",
            "        summary += Number.parseInt((item[key] || 0))",
            "    }",
            "  }",
            "",
            "  return summary",
            "}",
        ],
        "description": "summaryAmount for table level"
    },
    "3i-noteSearch":{
        "prefix": "3i-noSearch",
        "body": [
            "<div class=\"flex flex-row items-center justify-center h-96\" :show=\"!showTable\">",
            "  <Button",
            "    disabled :label=\"t('btn.noteSearch')\" :variant=\"Variant.TEXT\" icon-left=\"IconQuestion\"",
            "    :size=\"Size.MEDIUM\"",
            "  />",
            "</div>",            
        ],
        "description": "noteSearch"
    },
    "3i-const":{
        "prefix": ["const-3i","3i-const","3const","3c","const"],
         "body": [
            "const ${10:varName} = ($20) => {$30\\}",
         ],
         "description": " const allow function"
    },
    "3i-hr":{
        "prefix": "3i-hr",
        "body": [
            "<GridColumn grid-type=\"oneColFull\" class=\"order-1\">",
            "<div class=\"m-2 mb-4\">",
            "    <hr />",
            "</div>",
            "</GridColumn>",
        ],
        "description": "3i-hr"
    },
    "3i-table":{
        "prefix": ["3i-table","3table","3tb"],
        "body": [
            "${100}",
            "import type { IColumn, IPaging, ISort \\} from '@/shared/interface/table.interface'",
            "import { initPagable \\} from '@/shared/utils/constants'",
            "import type { IPagingDTO \\} from '@/shared/generate/interface/common-service.interface'",
            "",
            "",
            "const ${10:tableList}: Ref<any[]> = ref([]);",
            "const ${15:columns}: IColumn[] = reactive([",
            "  {",
            "    title: 'ปีงบประมาณ',",
            "    slot: '${20:xxxxx}',",
            "    align: 'center',",
            "    minWidth: '90',",
            "    valign: 'top',",
            "    //type",
            "    //key",
            "    //keys",
            "    //width",
            "    //sort",
            "    //summaryFunc",
            "    //children",
            "  \\},",
            "  {",
            "    title: 'actions',",
            "    slot: 'actions',",
            "    align: 'center',",
            "    minWidth: '80',",
            "  \\},",
            "])",
            "",
            "let paging: IPagingDTO = reactive(initPagable)",
            "const showTable = ref(false);",
            "const tableSelectModel = ref([]);",
            "const hideCondition = (item: any) => {",
            "    return false;",
            "\\}",
            "const ${30:onPageChange} = (_paging: IPaging) => {",
            "    paging = _paging",
            "    //call get tablelist data service",
            "  \\}",
            "",
            "const onSort = (_sort: ISort) => {",
            "    paging.sort = _sort",
            "    //call get tablelist data service",
            "\\}",
            "",
            "const summaryOption = ref({",
            "    startIndex: 2,",
            "    summaryText: 'รวมยอดเงินที่ต้องจ่าย',",
            "    // summaryTextColor: 'red',",
            "  \\})",
            "",
            "<div class=\"flex flex-row items-center justify-center h-96\" :show=\"showTable\">",
            "    <div class=\"flex w-full\">",
            "      <Table",
            "        v-model=\"tableSelectModel\"",
            "        ${0:service-name=\"yourServiceName\"}",
            "        :hide-checkbox=\"hideCondition\"",
            "        :summary-option=\"summaryOption\"",
            "        class=\"w-full\"",
            "        :columns=\"${15}\"",
            "        :data-list=\"${10}\"",
            "        :paging=\"paging\"",
            "        :total-size=\"${10}.length\"",
            "        @on-sort=\"onSort\"",
            "        @on-page-change=\"${30}\"",
            "      >",
            "      ${50:<template #${20}=\"{ row \\}\">",
            "       {{ row.${20} \\}\\}",
            "      </template> }",
            "      ${60:<template #actions=\"{ row \\}\">",
            "        <div class=\"flex gap-4\">",
            "          <Button",
            "            :variant=\"Variant.CONTAINEDWHITE\"",
            "            icon-left=\"IconEye\"",
            "            :size=\"Size.SMALL\"",
            "            :disabled=\"row.statusCode === 'Y'\"",
            "            :label=\"t('txt.detail')\"",
            "            @click=\"openDetails(row)\"",
            "          />",
            "          <Button",
            "            :variant=\"Variant.CONTAINEDWHITE\"",
            "            icon-left=\"IconPrint\"",
            "            :size=\"Size.SMALL\"",
            "            :label=\"t('txt.print')\" @click=\"openPdf(row)\"",
            "          />",
            "          <Button",
            "            v-if=\"row.statusCode === 'N'\"",
            "            :variant=\"Variant.CONTAINEDWHITE\"",
            "            icon-left=\"IconTrashTable\"",
            "            :size=\"Size.SMALL\"",
            "            :color=\"Color.DANGER\"",
            "            :label=\"t('txt.delete')\"",
            "            @click=\"openDeleteConfirm(row)\"",
            "          />",
            "        </div>",
            "      </template>}",
            "      </Table>",
            "    </div>",
            "</div>",
        ],
        "description": "3i-table"
    },
    "3i-table-level":{
        "prefix": ["3i-table-level","3tablelevel","3tbl"],
        "body": [
            "//3i-table-level",
            "import type { IColumn, IPaging, ISort } from '@/shared/interface/table.interface'",
            "import { FormatNumber } from '@/shared/utils/number'",
            "import { initPagable } from '@/shared/utils/constants'",
            "import type { IPagingDTO } from '@/shared/generate/interface/common-service.interface'",            
            "",
            "let paging: IPagingDTO = reactive(initPagable)",            
            "const ${10:showTable} = ref(false);",
            "const ${20:tableSelectModel} = ref();",
            "const ${30:onPageChange} = (_paging: IPaging) => {",
            "    paging = _paging",
            "    //call get tablelist data service",
            "  }",            
            "",
            "const ${40:tableList}: any[] = reactive([",
            "  {",
            "    ${45:xyz}: 'xyzxyzxyz',",
            "    header: [",
            "      {",
            "        ${50:x}: 'xxxxx',",
            "        ${53:y}: 1,",
            "        ${55:z}: 'zzzzz',",
            "      },",
            "      {",
            "        ${50}: 'xxxxx',",
            "        ${53}: 2,",
            "        ${55}: 'zzzzz',",
            "      },",
            "      {",
            "        ${50}: 'xxxxx',",
            "        ${53}: 3,",
            "        ${55}: 'zzzzz',",
            "      },",
            "    ],",
            "  },",
            "  {",
            "    ${45:xyz}: 'xyzxyzxyz',",
            "    header: [",
            "      {",
            "        ${50}: 'xxxxx1',",
            "        ${53}: 1,",
            "        ${55}: 'zzzzz1',",
            "      },",
            "      {",
            "        ${50}: 'xxxxx2',",
            "        ${53}: 2,",
            "        ${55}: 'zzzzz2',",
            "      },",
            "      {",
            "        ${50}: 'xxxxx3',",
            "        ${53}: 3,",
            "        ${55}: 'zzzzz3',",
            "      },",
            "    ],",
            "  },",
            "])",
            "",
            "const ${60:columns}: IColumn[] = reactive([",
            "  {",
            "    title: 'xxxxx',",
            "    slot: '${50}',",
            "    align: 'center',",
            "    minWidth: '90',",
            "    key: '${50}',",
            "    //type",
            "    //keys",
            "    //width",
            "    //sort",
            "    //summaryFuncol-1",
            "    //children",
            "  },",
            "  {",
            "    title: 'yyyyyy',",
            "    slot: '${53}',",
            "    align: 'center',",
            "    minWidth: '90',",
            "    key: '${53}',",
            "    summaryFunc: (item: any, key: string) => getFormatNumber(summaryAmount(item, key), 2),",
            "  },",
            "  {",
            "    title: 'zzzzz',",
            "    slot: '${55}',",
            "    align: 'center',",
            "    minWidth: '90',",
            "    key: '${55}',",
            "  },",
            "])",
            "",
            "const formatNumber = new FormatNumber()",
            "const getFormatNumber = (data: number | string, decimal = 0) => {",
            "  return formatNumber.Currency(Number(data), decimal)",
            "}",
            "const summaryAmount = (item: any, field: string) => {",
            "  let summary = 0",
            "",
            "  for (const key in item) {",
            "    if (Array.isArray(item[key])) {",
            "      const list = item[key]",
            "      list.forEach((itm: any) => {",
            "        summary += summaryAmount(itm, field)",
            "      })",
            "    }",
            "    else {",
            "      if (key === field)",
            "        summary += Number.parseInt((item[key] || 0))",
            "    }",
            "  }",
            "  return summary",
            "}",
            "const onSort = (_sort: ISort) => {",
            "    paging.sort = _sort",
            "    //call get tablelist data service",
            "}",
            
            "",
            "<div class=\"flex flex-row items-center justify-center h-96\" :show=\"showTable\">",
            "    <div class=\"flex w-full\">",
            "      <!-- :child-key=\"{ level_1: 'header', level_2: 'detail', level_3: 'projectDetail', level_4: 'subProjectDetail' }\"  -->",
            "      <!-- :hide-summary=\"['subDetail']\" -->",
            "      <TableLevel",
            "        v-model=\"${20:tableSelectModel}\"",
            "        class=\"w-full\"",
            "        :columns=\"${60:columns}\"",
            "        :data-list=\"${40:tableList}\"",
            "        @on-page-change=\"${30:onPageChange}\"",
            "        @on-sort=\"onSort\"",
            "      >",
            "      <template #header=\"{ row }\">",
            "          <td colspan=\"3\" class=\"divide-x font-semibold divide-primary-50 bg-primary-50 text-left  text-white py-3.5 px-4 top-[244px] \">",
            "          {{ row.${45:xyz} }}",
            "          </td>",
            "      </template>",
            "      <template #${50}=\"{ row }\">",
            "       {{ row.${50} }}",
            "      </template>",
            "      <template #${53}=\"{ row }\">",
            "       {{ row.${53} }}",
            "      </template>",
            "      <template #${55}=\"{ row }\">",
            "       {{ row.${55} }}",
            "      </template>",
            "      </TableLevel>",
            "    </div>",
            "</div>",
        ],
        "description": "3i-table-level"
    },
    "3i-t-language":{
        "prefix": ["3i-t","t(","t3","3t"],
        "body": "t('$1')",
        "description": "3i language"
    },
    "3i-datepicker":{
       "prefix": ["3i-datepicker","3date","3id","date","datepicker","3d"],
        "body": [
            "<div class=\"md:w-1/2 w-full\">",
            "  <DatePicker",
            "    v-model=\"${10:state}.${20:xxxx}\"",
            "    ${0}disabled",
            "    name=\"${20}\"",
            "    :label=\"${30:t('txt.date')}\"",
            "    :validate=\"v$.${20:date}.$invalid\"", 
            "    :is-submit=\"${90:isSubmit}\"",
            "  />",
            "</div>",
        ],
        "description": "3i-datepicker"
    },
    "3i-vue-template1":{
        "prefix": ["3i-vue1","3i-vue-template1"],
        "body": [
            "<script setup lang=\"ts\">",
            "import { type Ref, type PropType, nextTick, watch, onMounted, computed, reactive, ref \\} from 'vue'",
            "import { Dialog, DialogPanel, TransitionChild, TransitionRoot \\} from '@headlessui/vue'",
            "import { useRoute, useRouter \\} from 'vue-router'",
            "import { useI18n \\} from 'vue-i18n'",
            "import { MODAL_MODE, ModalType \\} from '@/shared/interface/components/modal.interface'",
            "import { Color, Size, Variant, getIcon, initPagable, SearchExpansType \\} from '@/shared/utils/constants'",
            "import type { IColumn, IPaging \\} from '@/shared/interface/table.interface'",
            "import Modal from '@/shared/components/modal/Modal.component.vue'",
            "import Alert3Component from '@/shared/components/alert/Alert3Component.vue'",
            "import { helpers, required \\} from '@vuelidate/validators'",
            "import useVuelidate from '@vuelidate/core'",
            "import type { IUpdateReceiveSubtypeSpecialRequest, IAddReceiveSubtypeSpecialRequest, IDeleteReceiveSubtypeSpecialRequest, IDropDownDTO, IDropDownResponse, IInfoReceiveSubtypeSpecialDataDTO, IInfoReceiveSubtypeSpecialResponse, ILastUpdateDTO, ILastUpdateResponse, IPageInfoReceiveSubtypeSpecialDataDTO, IPageInfoReceiveTypeSpecialDataDTO, IPagingDTO, ISearchByPagingRequest, ISpecifyInfoReceiveSubtypeSpecialResponse \\} from '@/shared/generate/interface/budget-service.interface'",
            "import { BudgetDropDownService \\} from '@/shared/generate/service/budget/budget-drop-down.service'",
            "import { BudgetDatabaseBudgetingService \\} from '@/shared/generate/service/budget/budget-database-budgeting.service'",
            "import { DateService \\} from '@/shared/service/common/date/date.service'",
            "",
            "const dateService = new DateService()",
            "const router = useRouter()",
            "const { t \\} = useI18n()",
            "const modalMode = ref('')",
            "const showTable = ref(true)",
            "const isSubmit = ref(false)",
            "const addSubmit = ref(false)",
            "const saveDate: Ref<any> = ref({\\})",
            "let paging: IPagingDTO = reactive(initPagable)",
            "const pageload: Ref<ILastUpdateDTO> = ref({ updatedDate: '' \\})",
            "let addModel: any = reactive({",
            "  field1: '',",
            "  field2: '',",
            "  field3: '',",
            "  field4: '',",
            "  field5: 'A',",
            "\\})",
            "",
            "const newAddModel = () => {",
            "  addModel.field1 = '';",
            "  addModel.field3 = '';",
            "  addModel.field4 = '';",
            "  addModel.field2 = '';",
            "  addModel.field5 = 'A';",
            "\\}",
            "",
            "//3i-select-dropdown",
            "const searchModel = reactive({",
            "  searchfield1: '',",
            "  searchfield2: '',",
            "  pageable: paging,",
            "\\})",
            "",
            "const newSearchModel = ()=>{",
            "  searchModel.searchfield1 = '';",
            "  searchModel.searchfield2 = '';",
            "  searchModel.pageable = paging;",
            "\\}",
            "",
            "const ddList1:Ref<any[]> = ref([])",
            "const ddList2:Ref<any[]> = ref([])",
            "const ddList3:Ref<any[]> = ref([])",
            "const ddList4:Ref<any[]> = ref([])",
            "//------------------------ services ---------------------------start",
            "",
            "// ---- call service หลังจาก เพิ่มข้อมูล ---------- start",
            " //saveDate.value = resp",
            " //openAlert(resp.responseMessage.responseDesc);",
            " //closeModal();",
            " //infoReceiveSubtypeSpecial();",
            " //addSubmit.value = false;",
            "// ---- call service หลังจาก เพิ่มข้อมูล ---------- end",
            "",
            " //--------------- สำหรับ ดึงข้อมูลหลังบ้านมา update--------start",
            " // addModel.field1 = rsEditData.value.field1 || '';",
            " // addModel.field2 = rsEditData.value.field2 || '';",
            " // addModel.field3 = rsEditData.value.field3 || '';",
            " // addModel.field4 = rsEditData.value.field4 || '';",
            " // addModel.field5 = rsEditData.value.field5Code || '';",
            " // call backend service update dropdown ถ้ามี",
            " // addSubmit.value = false;",
            " // openConfirm(t('txt.editRecsubieveEspecial'))",
            " //--------------- สำหรับ ดึงข้อมูลหลังบ้านมา update--------end",
            "",
            "//------------------------ services ---------------------------end.",
            "",
            "//------------------------ alert ------------------------------start",
            "//3i=alert",
            "const alert = ref<InstanceType<typeof Alert3Component>>()",
            "interface IAlert {",
            "  type: string",
            "  title?: string",
            "  description?: string",
            "\\}",
            "const alertObj: IAlert = reactive({",
            "  type: 'primary',",
            "  title: t('txt.success'),",
            "  description: t('msg.success.successfulTransaction'),",
            "\\})",
            "const openAlert = (msg?: string, check = true) => {",
            "  if (check) {",
            "    alertObj.type = 'primary'",
            "    alertObj.title = t('txt.success')",
            "    alertObj.description = msg",
            "  \\}",
            "  else {",
            "    alertObj.type = 'danger'",
            "    alertObj.title = t('txt.unSuccess')",
            "    alertObj.description = msg",
            "  \\}",
            "  alert.value?.open()",
            "\\}",
            "//------------------------ alert ------------------------------end.",
            "",
            "//------- table --------------------------------start",
            "    const tableList: Ref<IPageInfoReceiveTypeSpecialDataDTO | undefined> = ref()",
            "    const hideCondition = (item: any) => {  return false; \\}",
            "    const columns: IColumn[] = reactive([",
            "      {",
            "        // \"receiveCategory\": \"หมวดรายรับ\",",
            "        title: t('txt.receiveCategory'),",
            "        key: 'tablecol1',",
            "        align: 'center',",
            "        minWidth: '90',",
            "      \\},",
            "      {",
            "        //\"receiveType\": \"ประเภทรายรับ\",",
            "        title: t('txt.receiveType'),",
            "        key: 'tablecol2',",
            "        align: 'center',",
            "        minWidth: '90',",
            "      \\},",
            "      {",
            "        // ประเภทย่อย",
            "        title: t('txt.subtype'),",
            "        key: 'tablecol3',",
            "        align: 'center',",
            "        minWidth: '90',",
            "      \\},",
            "      {",
            "        // \"businessType\": \"ประเภทกิจการ\",",
            "        title: t('txt.businessType'),",
            "        key: 'tablecol4',",
            "        align: 'center',",
            "        minWidth: '90',",
            "      \\},",
            "      {",
            "        //สถานะ",
            "        title: t('txt.status'),",
            "        slot: 'tablecol5',",
            "        align: 'center',",
            "        minWidth: '90',",
            "      \\},",
            "      {",
            "        //แก้ไข",
            "        title: t('txt.edit'),",
            "        slot: 'editAction',",
            "        align: 'center',",
            "        width: '90',",
            "        minWidth: '90',",
            "      \\},",
            "    ])",
            "    const selectTableModel = ref([]);",
            "    const onPageChange = (_paging: IPaging) => {",
            "      paging = _paging",
            "      // call backend services เพื่อ update เพื่อดึงข้อมูลใหม่",
            "    \\}",
            "//------- table --------------------------------end.",
            "",
            "//------- modal --------------------------------start",
            "    //3i-modal",
            "    const modal = ref<InstanceType<typeof Modal>>()",
            "    const openConfirm = (title: string) => {",
            "      modal.value?.openModal({",
            "        type: ModalType.DEFAULT,",
            "        title: title",
            "      \\})",
            "    \\}",
            "    const closeModal = () => {",
            "      modal.value?.closeModal()",
            "    \\}",
            "//------- modal --------------------------------end.",
            "",
            "",
            "const submit = (e: boolean) => {",
            "  if (modalMode.value == MODAL_MODE.ADD) {",
            "    addSubmit.value = true;",
            "    if (v\\$addModel.value.\\$invalid) {",
            "        return 0;",
            "    \\} else {",
            "        // call add save service ",
            "    \\}",
            "  \\} else if (modalMode.value == MODAL_MODE.EDIT) {",
            "    addSubmit.value = true;",
            "    let editModel: IUpdateReceiveSubtypeSpecialRequest = reactive({",
            "        receiveSubtypeSpecialId: '',",
            "        editfield1: '',",
            "        editfield2: '',",
            "        editfield3: '',",
            "        editfield4: '',",
            "        editfield5: '',",
            "    \\})",
            "    editModel.receiveSubtypeSpecialId = rsEditData.value.receiveSubtypeSpecialId;",
            "    editModel.editfield1 = addModel.field1;",
            "    editModel.editfield2 = addModel.field2;",
            "    editModel.editfield3 = addModel.field3;",
            "    editModel.editfield4 = addModel.field4;",
            "    editModel.editfield5 = addModel.field5;",
            "    // call update service ส่งไป update save หลังบ้าน",
            "  \\} else if (modalMode.value == MODAL_MODE.DELETE) {",
            "      //call delete services;",
            "  \\} else {",
            "      return 0;",
            "  \\}",
            "  if (e)",
            "    closeModal()",
            "\\}",
            "const btnSearchClick = () => {",
            "  isSubmit.value = true;",
            "",
            "  if (v\\$.value.\\$invalid) {",
            "    return 0;",
            "  \\} else {",
            "    showTable.value = true;",
            "    // call get table data service",
            "  \\}",
            "\\}",
            "const btnDelClick = () => {",
            "  modalMode.value = modalMode.value = MODAL_MODE.DELETE;",
            "  modal.value?.openModal({",
            "    type: ModalType.DELETE,",
            "  \\})",
            "\\}",
            "const btnAddClick = () => {",
            "  newAddModel();",
            "  addSubmit.value = false;",
            "  modalMode.value = MODAL_MODE.ADD;",
            "  openConfirm(t('txt.addubinforespecifi'))",
            "\\}",
            "const btnEditClick = (row: any) => {",
            "  addSubmit.value = false;",
            "  modalMode.value = modalMode.value = MODAL_MODE.EDIT;",
            "  newAddModel();",
            "  // call editlick service to get new data for edit service",
            "\\}",
            "const btnSaveClick = () => {",
            "  submit(false);",
            "\\}",
            "",
            "//------ validate ----------- start",
            "  const rules = computed(() => ({",
            "    searchfield1: {",
            "      required: helpers.withMessage(t('msg.validator.pleaseSelect', { msg: '' \\}), required),",
            "    \\},",
            "    searchfield2: {",
            "      required: helpers.withMessage(t('msg.validator.pleaseSelect', { msg: '' \\}), required),",
            "    \\},",
            "  \\}))",
            "  const v\\$ = useVuelidate(rules, searchModel)",
            "",
            "  const addModelrules = computed(() => ({",
            "    field1: {",
            "      required: helpers.withMessage(t('msg.validator.pleaseSelect', { msg: t('txt.categoryIncome') \\}), required),",
            "    \\},",
            "    field3: {",
            "      required: helpers.withMessage(t('msg.validator.pleaseSelect', { msg: t('txt.incometypespecifi') \\}), required),",
            "    \\},",
            "    // field5: {",
            "    //   required: helpers.withMessage( t('msg.validator.pleaseSelect', { msg: t('txt.status') \\}), required),",
            "    // \\},",
            "    field2: {",
            "      required: helpers.withMessage(t('msg.validator.pleaseSelect', { msg: t('txt.businessType') \\}), required),",
            "    \\},",
            "    field4: {",
            "      required: helpers.withMessage(t('msg.validator.pleaseSelect', { msg: t('txt.businessType') \\}), required),",
            "    \\},",
            "  \\}))",
            "  const v\\$addmodel = useVuelidate(addModelrules, addModel)",
            "",
            "//------ validate ----------- end.",
            "",
            "const ddRecCateListChange = () => {",
            "  // console.log('---ddRecCateListChange---');",
            "  // call service ถ้าจำเป็น",
            "  // addModel.field2 = '';",
            "  // addModel.field3 = '';",
            "\\}",
            "",
            "const ddBztypeListChange = () => {",
            "  // console.log('ddBztypeListChange--->',);",
            "  // call service ถ้าจำเป็น",
            "  // addModel.field3 = '';",
            "\\}",
            "const ddbySelect: Ref<IDropDownDTO> = ref({",
            "  dropDownCode: '',",
            "  dropDownName: t('btn.search'),",
            "\\});",
            "",
            "const ddReceiveCatListChanged = () => {",
            "  // console.log('ddReceiveCatListChanged--->', byDropdownList, searchModel);",
            "  if (byDropdownList.value) {",
            "    ddbySelect.value = byDropdownList.value.find((row: any) => {",
            "      //  console.log(row.dropDownCode, searchModel.searchfield1);",
            "      return row.dropDownCode == searchModel.searchfield1",
            "    \\}) as IDropDownDTO;",
            "  \\}",
            "\\}",
            "",
            "const getDatas = () => {",
            "  //ใส่ backend services call ที่ต้องการ",
            "\\}",
            "",
            "onMounted(() => {",
            "    // getDatas();",
            "\\})",
            "</script>",
            "",
            "<template>",
            "  <!-- 3i-alert -->",
            "  <Alert3Component ref=\"alert\" :type=\"alertObj.type\" :title=\"alertObj.title\" :description=\"alertObj.description\"",
            "    dismissible />",
            "  <!-- 3i-modal -->",
            "  <Modal ref=\"modal\" @submit=\"submit\">",
            "    <template #body>",
            "      <div class=\"flex flex-col gap-4\">",
            "        <div class=\"w-full\">",
            "          <Select v-model=\"addModel.field1\" :is-submit=\"addSubmit\"",
            "            :validate=\"v\\$addmodel.field1.\\$invalid\" name=\"field1\"",
            "            :label=\"t('txt.caterecspecial')\" required :option=\"ddList1\" @change=\"ddRecCateListChange\" />",
            "        </div>",
            "        <div class=\"w-full\">",
            "          <Select v-model=\"addModel.field2\" :is-submit=\"addSubmit\"",
            "            :validate=\"v\\$addmodel.field2.\\$invalid\" name=\"field2\" :label=\"t('txt.businessType')\" required",
            "            :option=\"ddList2\" @change=\"ddBztypeListChange\" />",
            "        </div>",
            "        <div class=\"w-full\">",
            "          <Select v-model=\"addModel.field3\" :is-submit=\"addSubmit\"",
            "            :validate=\"v\\$addmodel.field3.\\$invalid\" name=\"field3\"",
            "            :label=\"t('txt.typeReceiveEspecial')\" required :option=\"ddList3\" />",
            "        </div>",
            "        <div class=\"w-full\">",
            "          <InputText v-model=\"addModel.field4\" :is-submit=\"addSubmit\"",
            "            :validate=\"v\\$addmodel.field4.\\$invalid\" name=\"field4\"",
            "            :label=\"t('txt.subrectype')\" required />",
            "        </div>",
            "        <div class=\"w-full\">",
            "          <div class=\"flex flex-row gap-4 items-center\">",
            "            <label>{{ t(\"txt.status\") \\}\\}</label>",
            "            <div v-for=\"(st, idx) in statusDropdownList\" :key=\"idx\">",
            "              <input type=\"radio\" v-model=\"addModel.field5\" :value=\"st.dropDownCode\" name=\"recstatus\"",
            "                :id=\"'recstatusa' + idx\"",
            "                class=\"border-gray-300 h-4 text-sm text-primary-50 w-4 focus:ring-primary-50 disabled:opacity-75 disabled:text-blue-grey-50\" /><label",
            "                :for=\"'recstatusa' + idx\">{{ st.dropDownName \\}\\}</label>",
            "            </div>",
            "          </div>",
            "        </div>",
            "        <div class=\"text-center w-full\">",
            "          <Button :label=\"t('btn.save')\" :variant=\"Variant.CONTAINED\" :size=\"Size.MEDIUM\" :color=\"Color.PRIMARY\"",
            "            @click=\"btnSaveClick\" />",
            "        </div>",
            "      </div>",
            "    </template>",
            "  </Modal>",
            "  <Content>",
            "    <template #content>",
            "      <!-- 3i-banner -->",
            "      <div class=\"h-screen py-6 px-4\">",
            "        <h6 class=\"text-primary-50\">",
            "          {{ `\\${t('txt.updatedDate')\\} \\${dateService.formatDateFullMonth(pageload.updatedDate)\\}` \\}\\}",
            "        </h6>",
            "        <div class=\"m-2 mb-4\">",
            "          <hr />",
            "        </div>",
            "        <div class=\"flex flex-col gap-4 md:flex-row md:h-[90px]\">",
            "          <div class=\"w-full lg:w-1/3\">",
            "            <Select v-model=\"searchModel.searchfield1\" required :is-submit=\"isSubmit\" :validate=\"v\\$.searchfield1.\\$invalid\"",
            "              name=\"ddList2\" :label=\"t('txt.by')\" :option=\"ddList1\" @change=\"ddReceiveCatListChanged()\" />",
            "          </div>",
            "          <!-- -----------DROPDOWN------------ -->",
            "          <div class=\"w-full lg:w-1/3 \" v-if=\"searchModel.searchfield1 == SearchExpansType.RECEIVE_CATEGORY_SPECIAL\">",
            "            <Select v-model=\"searchModel.searchfield2\" name=\"ddList2\" :label=\"ddbySelect.dropDownName\" required",
            "              :is-submit=\"isSubmit\" :validate=\"v\\$.searchfield2.\\$invalid\" :option=\"ddList2\" />",
            "          </div>",
            "          <div class=\"w-full lg:w-1/3 \" v-if=\"searchModel.searchfield1 == SearchExpansType.STATUS_FLAG\">",
            "            <Select v-model=\"searchModel.searchfield2\" name=\"ddList3\" :label=\"ddbySelect.dropDownName\" required",
            "              :is-submit=\"isSubmit\" :validate=\"v\\$.searchfield2.\\$invalid\" :option=\"ddList3\" />",
            "          </div>",
            "          <div class=\"w-1/3 \"",
            "            v-if=\"searchModel.searchfield1 == SearchExpansType.BUSINESS_TYPE_NAME || searchModel.searchfield1 == SearchExpansType.RECEIVE_TYPE_SPECIAL_NAME || searchModel.searchfield1 == SearchExpansType.RECEIVE_SUBTYPE_SPECIAL_NAME || searchModel.searchfield1 == ''\">",
            "            <InputText v-model=\"searchModel.searchfield2\" :is-submit=\"isSubmit\" :validate=\"v\\$.searchfield2.\\$invalid\"",
            "              name=\"searchfield2\" :label=\"ddbySelect.dropDownName\" :placeholder=\"t('txt.pleaseEnterInfos')\" />",
            "          </div>",
            "          <div class=\"w-full lg:w-1/3\">",
            "            <Button :label=\"t('btn.search')\" :variant=\"Variant.CONTAINED\" :size=\"Size.MEDIUM\" :color=\"Color.PRIMARY\"",
            "              class=\"mt-6\" @click=\"btnSearchClick\" />",
            "          </div>",
            "        </div>",
            "        <div class=\"flex flex-col gap-4 justify-between md:flex-row\">",
            "          <Button icon-left=\"IconTrashTable\" :label=\"t('btn.delete')\" :disabled=\"selectTableModel.length < 1\"",
            "            :variant=\"Variant.CONTAINEDWHITE\" :size=\"Size.MEDIUM\" :color=\"Color.DANGER\" @click=\"btnDelClick\" />",
            "",
            "          <Button icon-left=\"IconPlus\" :label=\"t('txt.addRecsubieveEspecial')\" :variant=\"Variant.CONTAINED\"",
            "            :size=\"Size.MEDIUM\" :color=\"Color.PRIMARY\" @click=\"btnAddClick\" />",
            "        </div>",
            "        <div class=\"my-4\">",
            "          <!-- table--area -start -->",
            "          <template v-if=\"showTable\">",
            "            <!-- 3i-table -->",
            "            <!-- 3i-table-level -->",
            "            <div class=\"flex flex-row h-96 justify-center\" :show=\"showTable\">",
            "              <div class=\"flex w-full\">",
            "                <Table v-model=\"selectTableModel\" class=\"w-full\" :columns=\"columns\"",
            "                  :data-list=\"tableList && tableList?.content\" :paging=\"paging\" :total-size=\"tableList?.totalElements\"",
            "                  @on-page-change=\"onPageChange\" :hide-checkbox=\"hideCondition\">",
            "                  <template #statusFlagName=\"{ row \\}\">",
            "                    <span :class=\"row.statusFlagCode == 'N' ? 'text-danger-50' : ''\">{{ row.statusFlagName \\}\\}</span>",
            "                  </template> -->",
            "                  <template #editaction=\"{ row \\}\">",
            "                    <Button :variant=\"Variant.CONTAINEDWHITE\" icon-left=\"IconEditTable\" :size=\"Size.SMALL\" label=\"\"",
            "                      @click=\"btnEditClick(row)\" />",
            "                  </template>",
            "                </Table>",
            "              </div>",
            "            </div>",
            "          </template>",
            "          <template v-else>",
            "            <!-- 3i-nosearch -->",
            "            <div class=\"flex flex-row h-96 items-center justify-center\" :show=\"!showTable\">",
            "              <Button disabled :label=\"t('btn.noteSearch')\" :variant=\"Variant.TEXT\" icon-left=\"IconQuestion\"",
            "                :size=\"Size.MEDIUM\" />",
            "            </div>",
            "          </template>",
            "          <!-- table--area -end -->",
            "        </div>",
            "        <div class=\"mt-8 text-center mb-4\">",
            "          <!-- 3i-button center -->",
            "        </div>",
            "      </div>",
            "    </template>",
            "  </Content>",
            "</template>",
        ],
        "description": "3i vue template รายรับย่อย"
    },
    "3i-testpre":{
        "prefix": ["3i-testpre","3pre"],
        "body": "<div><pre>${20:{{$10\\}\\}}</pre></div>",
        "description": "3i test pre"
    },
    "3i-indexview":{
        "prefix": ["3i-indexview","3indexview"],
        "body":[
            "<script lang=\"ts\" setup>",
            "import { onBeforeMount, ref } from 'vue'",
            "import { useI18n } from 'vue-i18n'",
            "import { lastValueFrom } from 'rxjs'",
            "",
            "const contentStep = ref()",
            "const { t } = useI18n()",
            "",
            "// -------------------------- services -------------------------------------",
            "// -------------------------- services -------------------------------------",
            "onBeforeMount(() => {",
            "  contentStep.value = [",
            "    {",
            "      title: \"${10}\",",
            "      step: 0,",
            "      componentName: 'UDXXXXXXX.component',",
            "      componentPath: 'common/account/xxxxx',",
            "    },{",
            "      title: \"${40}\",",
            "      step: 1,",
            "      componentName: 'PdfViewer',",
            "      componentPath: 'common/pdf-viewer',",
            "      property: {",
            "        dropdownComponentName: 'PGARR0000.component',",
            "        dropdownComponentPath: 'common/account/pgarr0000',",
            "        // onSearch: async (state: any) => await lastValueFrom(srvName.servicefunction({ ...state, exportType: 'PDF' })),",
            "        // onExportPdf: async (state: any) => await lastValueFrom(srvName.servicefunction({ ...state, exportType: 'PDF' })),",
            "        // onExportExcel: async (state: any) => await lastValueFrom(srvName.servicefunction({ ...state, exportType: 'EXCEL' })),",
            "        stepBack: 0,",
            "        exportOptions: { pdf: true, excel: true },",
            "      },",
            "    },",
            "  ]",
            "})",
            "</script>",
            "<template>",
            "  <ContentStep :contents=\"contentStep\" />",
            "</template>",
        ],
        "description": "3i--indexview"
    },
    "3i-pdfdropdown": {
        "prefix": "3i-pdfdropdown",
        "body": [
            "<script setup lang=\"ts\">",
            "import { onMounted, reactive } from 'vue'",
            "import { appSessionStorage } from '@/shared/stores/storage'",
            "const emit = defineEmits<{",
            "  (e: 'submit', data: Object): void",
            "}>()",
            "",
            "const \\$appSessionStorage = appSessionStorage()",
            "",
            "const state = reactive({",
            "  selectedBudgetYear: \\$appSessionStorage.getContentState?.budgetYear,",
            "  explanationID: \\$appSessionStorage.getContentState?.expenseExplanationId,",
            "  exportType: 'PDF',",
            "})",
            "",
            "onMounted(() => {",
            "  emit('submit', state)",
            "})",
            "</script>",
        ],
        "description": "3i dropdown for  pdfviewer"
    },
    "3i-appstore":{
        "prefix": ["3i-appstore","3store"],
        "body": [
            "   import { appStore } from '@/shared/stores'",
            "   const \\$appStore = appStore()",
            "   \\$appStore.getBudgetYear",
        ],
        "description": "3i app stpre pinia"
    },
    "3i-localstore":{
        "prefix": ["3i-localstore","localstore","3localstore","3i-sessionstore","3isessionstore","sessionstore"],
        "body":[
            "import { appSessionStorage } from '@/shared/stores/storage'",
            "const \\$appSessionStorage = appSessionStorage()",
            "\\$appSessionStorage.getContentState.xxxxx",
            "\\$appSessionStorage.clearContentState()",            
        ]
    },
    "clg":{
        "prefix": ["clg","console","cllg","3clg"],
        "body": "console.log('-ktb-${1}----------->',${2:${1}})",
        "description": "console.log"
    },
    "gmrq":{
        "prefix": ["gmrq","3i-gmrq"],
        "body": "git push  -o merge_request.create  -o merge_request.target=develop  -o merge_request.title=\"${30:}${10}\"  --set-upstream origin  ${20:${10}}"
    },
    "3i-enaconsole":{
        "prefix": ["3i-enaconsole","enaconsole"],
        "body": "<!-- eslint-disable no-console -->"
    },
    "3i-dateservice":{
        "prefix": ["3i-dateservice","dateservice"],
        "body":[
            "import { DateService } from '@/shared/service/common/date/date.service'",
            "const dateService = new DateService()",
            "dateService.formatDateThai2()",
        ]
    },
    "3i-srvmsg":{
        "prefix": ["3i-srvmsg","srvmsg"],
        "body": [
            "    import { useModal } from '@/shared/stores/modal'",
            "    const \\$modal = useModal()",
            "    .subscribe({",
            "      next: (resp) => {",
            "        const { responseType, responseDesc \\} = resp?.responseMessage || {\\}",
            "        if (resp.statusCode === '200' && resp.data) {",
            "          ${0}//",
            "          //",
            "          //\\$modal.openAlert('SUCCESS', responseDesc)",
            "        }",
            "        ${9:if (responseType && responseDesc){",
            "          ${10}// isSubmit.value = false",
            "          ${20}// openAlert('primary', responseDesc)",
            "          ${30}\\$modal.openAlert(responseType, responseDesc)",
            "        \\} else {",
            "          ${40}// openAlert('danger', responseDesc)",
            "          ${50}\\$modal.openAlert(responseType || 'INFO', responseDesc)",
            "        \\}}",
            "      },",
            "      ${59:error: (err) => {",
            "        const { responseType, responseDesc \\} = err.response.responseMessage",
            "        if (responseType && responseDesc) {",
            "          //",
            "          //",
            "          ${60}//\\$modal.openAlert(responseType, responseDesc)",
            "        \\}",
            "      \\}},",
            "    })",
        ],
        "description": "service return message"
    },
    "3i-layoutgrid":{
      "prefix":["3i-layoutgrid","3i-grid","grid","grid-layout","glayout","3gly"],
      "body": [
            "<GridLayout class=\"pb-4\" :gap=\"4\">",
            "  <GridColumn grid-type=\"${10|oneColFull,twoColFull,threeCol,fourColFull,sixColFull,eightFull,twoColBetween1,twoColBetween2,twoColBetween_1,twoColBetween_2,twoColBetweenI,twoColBetweenII,colBanner,twoColBetweenFirst,twoColBetweenSecond,twoColBetweenSecond2,twoColBetweenA,twoColBetweenB,twoColBetweenC,twoColBetweenD,oneColBetween,leftColBetween,centerColBetween,rightColBetween,popupBetween,popupLeftBetween,popupRightBetween,oneCol,leftCol,rightCol,oneColA,oneColRightA,oneColB,oneColRightB,oneColC,oneColSmall,oneColRight|}\" class=\"order-${20:1}\">${0:&nbsp;}",
            "  </GridColumn>",
            "</GridLayout>",
      ],
      "description": "3i Grid layout"
    },
    "3i-gridcolumn":{
      "prefix":["3i-gridcolumn","3i-gc","3i-gcolumn","column","gcolumn","grid-column","3gc"],
      "body": [
            "<GridColumn grid-type=\"${10|oneColFull,twoColFull,threeCol,fourColFull,sixColFull,eightFull,twoColBetween1,twoColBetween2,twoColBetween_1,twoColBetween_2,twoColBetweenI,twoColBetweenII,colBanner,twoColBetweenFirst,twoColBetweenSecond,twoColBetweenSecond2,twoColBetweenA,twoColBetweenB,twoColBetweenC,twoColBetweenD,oneColBetween,leftColBetween,centerColBetween,rightColBetween,popupBetween,popupLeftBetween,popupRightBetween,oneCol,leftCol,rightCol,oneColA,oneColRightA,oneColB,oneColRightB,oneColC,oneColSmall,oneColRight|}\" class=\"order-${20:1}\">${0:&nbsp;}",
            "</GridColumn>",
      ],
      "description": "3i Grid Columns"
    },
    "3i-checkbox":{
        "prefix":["3i-checkbox","3i-chkbox","checkbox","chk","chkbox","3check"],
        "body":[
            "${100:const ${20:chkboxItem${15}} = ref({",
            "    label: \"${50:label}\",",
            "    value: \"${60:value}\",",
            "\\})",
            "}",
            "<CheckBoxList v-model=\"${10:state.${5:xxxxx}}\" :value=\"${20}.value\" :label=\"${20}.label\" />",
        ],
        "description": "Checkbox lsit"
    },
    "3i-checkboxgroup":{
      "prefix":["3i-checkboxgroup","3i-chkboxgroup","checkboxgroup","chkgroup","chkboxgroup","3checkgroup"],
      "body":[
        "${0:const ${5:radioGroupModal} = ref([])",
        "const ${10:radioGroup} = ref([",
        "  {",
        "    label: 'จัดทำ',",
        "    value: 'จัดทำ',",
        "  \\},",
        "  {",
        "    label: 'พิมพ์',",
        "    value: 'พิมพ์',",
        "  \\},",
        "  {",
        "    label: 'อนุมัติ',",
        "    value: 'อนุมัติ',",
        "  \\},",
        "])}",
        "<CheckBoxGroup",
        "    class=\"grid items-start justify-between grid-cols-1 md:grid-cols-2\"",
        "    v-model=\"${5:radioGroupModal}\"",
        "    :list=\"${10:radioGroup}\"",
        "    label=\"chkboxgroupLabel\"",
        "    name=\"${20:listGroupName}\"",
        "/>",
      ],
      "description": "Checkbox lsit"
    },
    "3i-pdfview":{
        "prefix": ["3i=pdfview","pdfview"],
        "body": [
            "//3i-pdfview",
            "import Pdf from '@/shared/components/pdf/Pdf.component.vue'",
            "enum LOADING_STATE {",
            "  NOT_LOADING = 'NOT_LOADING',",
            "  LOADING = 'LOADING',",
            "  LOADED = 'LOADED',",
            "  FAILED = 'FAILED',",
            " ",
            "const loadingState: Ref<string> = ref(LOADING_STATE.NOT_LOADING)",
            "const pdfSource: Ref<string | null> = ref(null)",
            "",
            "\\}",
            "",
            "interface STATE_DATA {",
            "  exportType?: 'PDF' | 'EXCEL' | 'PREVIEW'",
            "  dropDownTitle?: string",
            "\\}",
            "",
            "let currentState: STATE_DATA = reactive({\\})",
            "const loadingProps = reactive({",
            "  msg: t('btn.noteSearch'),",
            "  icon: 'IconQuestion',",
            "\\})",
            "",
            "const onProgress = (e: any) => {",
            "  // if (e?.loaded !== e?.total) {",
            "  //   loadingState.value = LOADING_STATE.LOADING",
            "  //   loadingProps.msg = t('msg.pleaseWait')",
            "  //   return",
            "  // \\}",
            "  loadingState.value = LOADING_STATE.LOADED",
            "\\}",
            "const exportPdf = async () => { ",
            "  //Example PGARR0007.component",
            "\\}",
            "",
            "<template v-if=\"pdfSource && loadingState === LOADING_STATE.LOADED\">",
            "  <div class=\"px-2 py-4\">",
            "    <Pdf",
            "      :pdf-source=\"pdfSource\"",
            "      :on-export-pdf=\"exportPdf\"",
            "      :show-export=\"false\"",
            "      @progress=\"onProgress\"",
            "    />",
            "  </div>",
            "</template>",
            "<!-- <pre>{{ pdfSource \\}\\}</pre> -->",
            "<template v-if=\"pdfSource === '' || loadingState !== LOADING_STATE.LOADED\">",
            "  <div class=\"mx-2\">",
            "    <div class=\"flex flex-row items-center justify-center h-96\">",
            "      <Button",
            "        disabled",
            "        :label=\"loadingProps.msg\"",
            "        :variant=\"Variant.TEXT\"",
            "        :icon-left=\"loadingProps.icon\"",
            "        :size=\"Size.MEDIUM\"",
            "      />",
            "    </div>",
            "  </div>",
            "</template>",            
        ],
        "description": "PDF VIEW"
    },
    "3i-inputtext":{
        "prefix":["3i-inputtext","inputtext","inputnumber","inputs","input","3text","3i-textinput","textinput"],
        "body":[
            "<Input${10|Text,Number|}",
            "  v-model=\"state.${20:xxxx}\"",
            "  name=\"${20}\" ",
            "  class=\"${25|text-left,text-right|}\" ",
            "  required",
            "  :label=\"${30:labelxxxxx}\"",
            "  :placeholder=\"${40|t('txt.pleaseEnterInfos'),0|}\"",
            "  ${0}${90:",
            "  :unit-name=\"t('txt.bath')\"",
            "  decimal=\"2\"",
            "  :min=\"1\"",
            "  :validate=\"v\\$.${20}\"",
            "  :is-submit=\"isModalSubmit\"",
            "  }",
            "/>",            
        ],
        "description": "3i input text and number"
    },
    "3i-rediogroup": {
        "prefix":["3i-radiogroup","radiogroup","radiog","3radio","3radiogroup"],
        "body":[
            "${0:const ${10:radioGroupList} = [",
            "  {",
            "    label: '${50:บุคคลทั่วไป}',",
            "    value: '1',",
            "  \\},",
            "  {",
            "    label: '${60:นิติบุคคล}',",
            "    value: '2',",
            "  \\},",
            "  {",
            "    label: 'ทั้งหมด',",
            "    value: '3',",
            "  \\},",
            "]",
            "}",
            "<RadioGroup",
            "  v-model=\"state.${20:xxxx}\"",
            "  class=\"flex-row items-start\"",
            "  :list=\"${10:radioGroupList}\"",
            "  label=\"${30:radiogroupLabel}\"",
            "  return-object",
            "/>",
        ],
        "description":"3i Radio Group"
    },
    "3i-radio":{
        "prefix":["3i-radio","radio","3radio"],
        "body":[
            "<Radio ",
            "  v-model=\"${10:displayValue}\" ",
            "  :value=\"${20:item}.value\" ",
            "  label=\"${20:item}.label\" ",
            "  />"
        ],
        "description":"3i radio"
    },
    "3i-router":{
      "prefix":["3i-router","userrouter","router","3router"],
      "body":[
        "import { useRoute ,useRouter } from 'vue-router'",
        "const router = useRouter()",
        "const route = useRoute()",
        "router.push('$10')",
        "const routeParam: Ref<string> = ref(route.query.${20:id})",
       ],
      "description":"3i router"
    },
    "3i-sessionstore-searchparam":{
      "prefix":["searchparam","3i-search-sessionstore"],
      "body":[
        "//onMounted",
        "if (Object.keys(\\$appSessionStorage.getContentState).length === 0)",
        "sessionStorage.removeItem('${10:searchparam}')",
        "",
        "//onBeforeMount",
        "sessionStorage.removeItem('${10:searchparam}')",
        "",
        "//onSearch add  ",
        "sessionStorage.setItem('${10:searchparam}', JSON.stringify(param))",
        "",
        "",
        "const searchParam: any = sessionStorage.getItem('${10:searchparam}')",
        "if (searchParam) {",
        "    const searchParamObj = JSON.parse(searchParam)",
        "}",        
      ],
      "description":" sessionstore-searchparam "
    },
    "3i-$modal":{
        "prefix":["3i-$modal","$modal","3$modal"],
        "body":[
            "import { useModal } from '@/shared/stores/modal' ",
            "const ${10}\\$modal = useModal() ",
        ],
        "description":"new $modal "
    },
    "3i-$modalexp-alert" : {
      "prefix":["3i-$modalexp-alert","$modal-example","3model-ex","3$modal-ex","$modal-ex","modal-ex"],
      "body":[
            " ${10:\\$modal.openAlert(responseMessage.responseType, responseMessage?.responseDesc)}",
            " ${20:\\$modal.openAlert(ModalType.CUSTOM, errMessage.value)}",
            "",
      ],
      "description":"3i-$modal-example"
    },
    "3i-$modalexp-success":{
      "prefix":["3i-$modalexp-success","$modal-example","3model-ex","3$modal-ex","$modal-ex","modal-ex"],
      "body":[

            " ${30:\\$modal.success({",
            "     type: ResponseType.S,",
            "     content: 'บันทึกรายการสำเร็จ',",
            "     success: () => { \\},",
            " \\})",
            "}",
            "",
      ],
      "description":"3i-$modal-example"
    },
    "3i-$modalexp-confirm":{
      "prefix":["3i-$modalexp-confirm","$modal-example","3model-ex","3$modal-ex","$modal-ex","modal-ex"],
      "body":[            
            " ${40:\\$modal.confirm({",
            "     action: t('btn.acceptConfirm'),",
            "     icon: '${10|IconConfirm,IconAccept,IconAdd,IconAddProject,IconAlert,IconAlertError,IconApprove,IconArea,IconArrowDown,IconArrowRight,IconArrowUp,IconArrowUpWhite,IconArrowUpperLeft,IconArrowUpperRight,IconAttention,IconCalculateCheck,IconChange,IconCheckboxChecked,IconCheckmark,IconClose,IconCloseCircle,IconCommunity,IconConfig,IconCreateDocument,IconCreateSmartcard,IconCreditCard,IconDetail,IconDetailDoc,IconDisplay,IconDocCancel,IconDoubleArrowLeft,IconDoubleArrowRight,IconDownload,IconDragHandle,IconDragHandleTwoSide,IconDraggable,IconEcosystem,IconEdit,IconEditOutline,IconEditTable,IconEventReceived,IconExcel,IconExecutive,IconExport,IconEye,IconHamberger,IconHelp,IconHome,IconHomeSideBar,IconImportFile,IconInfo,IconKm,IconLocal,IconLogo,IconLogout,IconMoneyPlus,IconPaper,IconPeopleAll,IconPlus,IconPrint,IconProfile,IconProgressUnit,IconQuestion,IconRefresh,IconSandClock,IconSave,IconScan,IconSortAsc,IconSortDesc,IconStar,IconStarFill,IconSupport,IconSwapUser,IconSystemAccount,IconSystemAdmin,IconSystemBudget,IconSystemExpenses,IconSystemIncome,IconSystemManage,IconTooling,IconTrashTable,IconTrue,IconUpdate,IconUserConfig,IconUserCount,IconView,IconWarning,IconWarningCircle,IconWhiteReload,IconWhiteUserConfig|}',",
            "     iconColor: 'fill-blue-grey-40',",
            "     content: '${15:คุณต้องการลบรายการนี้หรือไม่}',",
            "     success: () =>{ ${20:/*yourcode*/}\\},",
            "     cancel: () => { ${30:/*yourcode*/}\\},",
            " \\})",
            "}",
            ""
      ],
      "description":"3i-$modal-example"
    },            
    "3i-$modalexp-custom":{
      "prefix":["3i-$modalexp-custom","$modal-example","3model-ex","3$modal-ex","$modal-ex","modal-ex"],
      "body":[            
            "${50: import PGGLM0046POPUP2 from '@/views/common/account/pgglm0046/PGGLM0046_POPUP2.component'",
            " \\$modal.open(PGGLM0046POPUP2, {",
            " title: 'title',",
            " size: Size.LARGE,",
            " data: { \\},",
            " callback: (data: any) => {",
            "     // isSubmit.value = false",
            "     //your code or call services",
            "     \\$modal.close()",
            " \\},",
            " \\})",
            "}  ",
      ],
      "description":"3i-$modal-example"
    },            
    "3i-$modalexp-info":{
      "prefix":["3i-$modalexp-info","$modal-example","3model-ex","3$modal-ex","$modal-ex","modal-ex"],
      "body":[            
            "",
            "${60:\\$modal.info({",
            "     content: t('txt.pleaseSelectJob'),",
            "     success: () => { \\},",
            
            " \\})",
            "}"
      ],
      "description":"3i-$modal-example"
    },            
    "3i-inputtextbutton":{
      "prefix":["3i-inputtextbutton","inputtextbutton","3ibt"],
      "body":[
            "<InputTextButton",
            "   v-model=\"state.${10:xxxx}\"",
            "   name=\"${10}\"",
            "   :label=\"${20:label}\"",
            "   required",
            "   enable-input",
            "   readonly",
            "   :hide-select-button=\"false\"",
            "   :show-delete-button=\"false\"",
            "   @click-button=\"${90:onClick${10}Btn}\"",
            "   @delete-button=\"${100:onClickDelBtn}\"",
            "/>",        
      ],
      "description":"3i-inputtextbutton"
    },
    "3i-table-template":{
      "prefix":["3i-table-template","3i-tb-template","table-template","tb-template","3tbt"],
      "body":[
        "        <template #${5:requestAmount}=\"{ ${10:row} }\"> ",
        "          $0  ${20: //row index column validate",
        "            getFormatNumber(row.${5})",
        "           }",
        "        </template>",
      ],
      "description":"3i-table-template"
    },
    "3i-textarea":{
      "prefix":["3i-textarea","textarea","txt-area","text-area","3textarea"],
      "body":[
        "<Textarea",
        "  v-model=\"${10:state.}${20:xxxx}\"",
        "  name=\"$20\"",
        "  disabled",
        "  :label=\"${50:label}\"",
        "/>",
      ],
      "description":"3i-textarea"
    },
    "3i-twobutton":{
      "prefix":["3i-twobutton","3i-2button","2button","twobutton","3bt"],
      "body":[
        "    <div class=\"flex justify-center gap-4 pt-6\">",
        "      <Button",
        "        v-validate class=\"h-[40px]\" :label=\"t('btn.save')\" :variant=\"Variant.CONTAINED\" :size=\"Size.MEDIUM\"",
        "        @click=\"saveData\"",
        "      />",
        "      <Button",
        "        v-validate class=\"h-[40px]\" :label=\"t('btn.back')\" :variant=\"Variant.CONTAINEDWHITE\" :size=\"Size.MEDIUM\"",
        "        @click=\"saveData\"",
        "      />",
        "    </div>",
      ],
      "description":"3i-twobutton"
    },
    "3i-template-contentstep":{
      "prefix":["3i-template-contentstep","template-contentstep","contentstep"],
      "body":[
            " <script setup lang=\"ts\">",
            " import type { PropType, Ref } from 'vue'",
            " import { computed, onMounted, reactive, ref } from 'vue'",
            " import { useI18n } from 'vue-i18n'",
            " ",
            " import { Color, Size, Variant, initPagable } from '@/shared/utils/constants'",
            " ",
            " const props = defineProps({",
            "   next: {",
            "     type: Function,",
            "     default: () => { },",
            "   },",
            "   previous: {",
            "     type: Function,",
            "     default: () => { },",
            "   },",
            "   data: {",
            "     type: Object as PropType<any>,",
            "     required: false,",
            "   },",
            " })",
            " ",
            " const emit = defineEmits<{",
            "   (e: 'submit', data: any): any",
            " }>()",
            " ",
            " const { t } = useI18n()",
            " ",
            " const state: Ref<any> = ref({",
            "   input1: '',",
            "   input2: '',",
            "   input3: '',",
            "   input4: '',",
            " })",
            " ",
            " const initData = () => { }",
            " onMounted(() => { initData() })",
            " </script>",
            " ",
            " <template>",
            "   <div class=\"px-4 py-4\">",
            "     <GridLayout class=\"pb-4\" :gap=\"4\">",
            "       &nbsp;xxxx",
            "     </GridLayout>",
            "     <div class=\"flex justify-center gap-4 pt-6\">",
            "       <Button",
            "         v-validate class=\"h-[40px]\" :label=\"t('btn.save')\" :variant=\"Variant.CONTAINED\" :size=\"Size.MEDIUM\"",
            "       />",
            "       <Button",
            "         v-validate class=\"h-[40px]\" :label=\"t('btn.back')\" :variant=\"Variant.CONTAINEDWHITE\" :size=\"Size.MEDIUM\"",
            "       />",
            "     </div>",
            "   </div>",
            " </template>",
            " ",
            " <style scoped></style>",
            " ",        
      ],
      "description":""
    },
    "3i-popup-templae":{
      "prefix":["3i-popup-template","popup","popup-template","template-popup"],
      "body":[
            "<script setup lang=ts>",
            "import useVuelidate from '@vuelidate/core'",
            "import { type Ref, computed, onMounted, reactive, ref } from 'vue'",
            "import { useI18n } from 'vue-i18n'",
            "",
            "import type { IPagingDTO } from '@/shared/generate/interface/common-service.interface'",
            "import type { IColumn, IPaging, ISort } from '@/shared/interface/table.interface'",
            "import { useModal } from '@/shared/stores/modal'",
            "import { Color, ResponseType, Size, TypeDownloadConstant, Variant, initPagable } from '@/shared/utils/constants'",
            "",
            "const props = defineProps({",
            "  next: {",
            "    type: Function,",
            "    default: () => { },",
            "  },",
            "  previous: {",
            "    type: Function,",
            "    default: () => { },",
            "  },",
            "})",
            "",
            "const emit = defineEmits<{",
            "  (e: 'submit', data: Object): void",
            "}>()",
            "",
            "const isSubmit: Ref<Boolean> = ref(false)",
            "const { t } = useI18n()",
            "const state = reactive({",
            "  input1: '',",
            "  input2: '',",
            "  input3: '',",
            "})",
            "",
            "const tableList: any[] = reactive([",
            "  {",
            "    field1: 'field1',",
            "    field2: 'field2',",
            "    field3: 'field3',",
            "  },",
            "])",
            "const columns: IColumn[] = reactive([",
            "  {",
            "    title: 'field1',",
            "    key: 'field1',",
            "    // slot: 'field1',",
            "    align: 'center',",
            "    sort: true,",
            "    minWidth: '90',",
            "  },",
            "  {",
            "    title: 'field2',",
            "    key: 'field2',",
            "    // slot: 'field2',",
            "    align: 'center',",
            "    sort: true,",
            "    minWidth: '90',",
            "  },",
            "  {",
            "    title: 'field3',",
            "    key: 'field3',",
            "    // slot: 'field2',",
            "    align: 'center',",
            "    sort: true,",
            "    minWidth: '90',",
            "  },",
            "])",
            "const dropdownList = ref([",
            "  {",
            "    dropDownCode: 2565,",
            "    dropDownName: 2565,",
            "  },",
            "  {",
            "    dropDownCode: 2566,",
            "    dropDownName: 2566,",
            "  },",
            "])",
            "",
            "let paging: IPagingDTO = reactive(initPagable)",
            "const showTable = ref(false)",
            "const tableSelectModel = ref([])",
            "const hideCondition = (item: any) => {",
            "  return false",
            "}",
            "const onPageChange = (_paging: IPaging) => {",
            "  paging = _paging",
            "  // call get tablelist data service",
            "}",
            "",
            "const onSort = (_sort: ISort) => {",
            "  paging.sort = _sort",
            "  // call get tablelist data service",
            "}",
            "",
            "const onSearchClick = () => {",
            "",
            "}",
            "",
            "const onOkClick = () => {",
            "  emit('submit', {})",
            "}",
            "</script>",
            "",
            "<template>",
            "  <div class=\"px-4 py-2 mt-2\">",
            "    <GridLayout class=\"pb-4\" :gap=\"4\">",
            "      <GridColumn grid-type=\"twoColFull\" class=\"order-1\">",
            "        <Select",
            "          v-model=\"state.input1\"",
            "          name=\"input1\"",
            "          return-object=\"false\"",
            "          :label=\"t('txt.budgetYear')\"",
            "          required",
            "          :option=\"dropdownList\"",
            "          option-label=\"dropDownName\"",
            "          option-value=\"dropDownCode\"",
            "        />",
            "      </GridColumn>",
            "      <GridColumn grid-type=\"twoColFull\" class=\"order-1\" />",
            "      <GridColumn grid-type=\"twoColFull\" class=\"order-1\">",
            "        <Select",
            "          v-model=\"state.input2\"",
            "          name=\"input2\"",
            "          return-object=\"false\"",
            "          :label=\"t('txt.by')\"",
            "          :option=\"dropdownList\"",
            "          option-label=\"dropDownName\"",
            "          option-value=\"dropDownCode\"",
            "        />",
            "      </GridColumn>",
            "      <GridColumn grid-type=\"twoColFull\" class=\"flex flex-row order-1 flex-nowrap\">",
            "        <InputText",
            "          v-model=\"state.input3\"",
            "          name=\"input3\"",
            "          class=\"w-full mr-1\"",
            "          :label=\"t('txt.search')\"",
            "          :placeholder=\"t('txt.pleaseEnterInfos')\"",
            "        />",
            "        <Button",
            "          class=\"h-10 mt-6\"",
            "          :label=\"t('btn.search')\"",
            "          :variant=\"Variant.CONTAINED\"",
            "          :size=\"Size.MEDIUM\"",
            "          :color=\"Color.PRIMARY\"",
            "          loading",
            "          @click=\"onSearchClick\"",
            "        />",
            "      </GridColumn>",
            "      <GridColumn grid-type=\"oneColFull\" class=\"order-1\">",
            "        <div class=\"m-2 mb-4\">",
            "          <hr>",
            "        </div>",
            "      </GridColumn>",
            "      <GridColumn grid-type=\"oneColFull\" class=\"order-1 text-left\">",
            "        <Table",
            "          v-model=\"tableSelectModel\"",
            "          :hide-checkbox=\"hideCondition\"",
            "          class=\"w-full\"",
            "          :columns=\"columns\"",
            "          :data-list=\"tableList\"",
            "          :paging=\"paging\"",
            "          select-type=\"radio\"",
            "          :total-size=\"tableList.length\"",
            "          @on-sort=\"onSort\"",
            "          @on-page-change=\"onPageChange\"",
            "        />",
            "      </GridColumn>",
            "    </GridLayout>",
            "    <div class=\"py-4 mx-4 mb-4\">",
            "      <hr>",
            "    </div>",
            "    <div class=\"text-center\">",
            "      <Button",
            "        :label=\"t('btn.ok')\"",
            "        :variant=\"Variant.CONTAINED\"",
            "        :size=\"Size.MEDIUM\"",
            "        :color=\"Color.PRIMARY\"",
            "        loading",
            "        @click=\"onOkClick\"",
            "      />",
            "    </div>",
            "  </div>",
            "</template>",
      ],
      "description":""
    },
    "3i-goldhr":{
      "prefix":["3i-goldhr","goldhr","hr"],
      "body":[
        "<div class=\"w-full bg-[#9E7A24] text-white px-4 py-1\">",
        "  ${10:แหล่งที่มาของเงิน}",
        "</div>",
      ],
      "description":"3i-goldhr"
    },
    "3i-text-editor":{
      "prefix":["text-editor","editor","3editor"],
      "body":[
        "<TextEditor v-model=\"state.${xxxxx}\" />"
      ],
      "description":""
    },
    "3i-emit":{
      "prefix":["3i-emit","emit"],
      "body":[
        "// define",
        "const emit = defineEmits<{",
        "  (e: '${10:xxxxx}', data: any): any",
        "}>()",
        "",
        "//user",
        "emit('$10', {});",
      ],
      "description":"emit"
    },
    "3i-pdfview":{
      "prefix":["3i-pdfview","pdfview"],
      "body":[
        "    {",
        "      title: 'บันทึกบัญชีขององค์กรปกครองส่วนท้องถิ่น',",
        "      screenName: '',",
        "      step: 0,",
        "      componentName: 'PdfViewer',",
        "      componentPath: 'common/pdf-viewer',",
        "      property: {",
        "        dropdownComponentName: 'UD${10}.component',",
        "        dropdownComponentPath: 'common/account/${20:pgglm0052}',",
        "        // onSearch: async (state: any) => await lastValueFrom(srvAccountAccountJournalPlaceService.cancelJournalPlaceHead({ ...state, exportType: 'PDF' })),",
        "        // onExportPdf: async (state: any) => await lastValueFrom(srvAccountAccountJournalPlaceService.cancelJournalPlaceHead({ ...state, exportType: 'PDF' })),",
        "        // onExportExcel: async (state: any) => await lastValueFrom(srvAccountAccountJournalPlaceService.cancelJournalPlaceHead({ ...state, exportType: 'EXCEL' })),",
        "        // reportTitle: 'REPORT TITLE',",
        "        // exportOptions: { pdf: true, excel: true, printDraft: false },",
        "        // stepBack: 0,",
        "        // stepBack: true,",
        "      },",
        "      footer: {",
        "        //componentName: 'PGAPM0007_footer.component',",
        "        //componentPath: 'common/expense/pgapm0007',",
        "      },",
        "    },",
      ],
      "description":"pdfview in indexview"
    },
    "3i-pdfview-footer":{
      "prefix":["3i-pdfview-footer","pdfview-footer"],
      "body":[
        "<script setup lang=\"ts\">",
        "import { type Ref, computed, onMounted, reactive, ref } from 'vue'",
        "import { useI18n } from 'vue-i18n'",
        "import { useRoute } from 'vue-router'",
        "",
        "import { appSessionStorage } from '@/shared/stores/storage'",
        "import { Size, Variant } from '@/shared/utils/constants'",
        "",
        "const props = defineProps({",
        "  next: {",
        "    type: Function,",
        "    default: () => {",
        "    },",
        "  },",
        "  previous: {",
        "    type: Function,",
        "    default: () => {",
        "    },",
        "  },",
        "})",
        "",
        "const emit = defineEmits<{",
        "  (e: 'submit', data: Object): void",
        "}>()",
        "",
        "const \\$appSessionStorage = appSessionStorage()",
        "const { t } = useI18n()",
        "const route = useRoute()",
        "const canEdit: any = ref(false)",
        "",
        "const onEdit = () => {",
        "  props.next(0, {  })",
        "}",
        "",
        "onMounted(() => {",
        "  canEdit.value = \\$appSessionStorage?.getContentState?.canEdit",
        "})",
        "</script>",
        "",
        "<template>",
        "  <div class=\"m-4 text-center\">",
        "    <Button",
        "      v-show=\"canEdit\"",
        "      :label=\"แก้ไข\" icon-left=\"IconEditTable\" :size=\"Size.SMALL\"",
        "      :variant=\"Variant.CONTAINEDWHITE\"",
        "      @click=\"onEdit\"",
        "    />",
        "  </div>",
        "</template>",
      ],
      "description":"3i-pdfview-footer"
    },
    "3i-pdfview-component":{
      "prefix":["3i-pdfview-component","pdfview-component"],
      "body":[
          "<script setup lang=ts>",
          "import { onMounted, reactive } from 'vue'",
          "",
          "import { appSessionStorage } from '@/shared/stores/storage'",
          "",
          "const props = defineProps({",
          "  next: {",
          "    type: Function,",
          "    default: () => { },",
          "  },",
          "  previous: {",
          "    type: Function,",
          "    default: () => { },",
          "  },",
          "})",
          "const emit = defineEmits<{",
          "  (e: 'submit', data: Object): void",
          "  (e: 'pdfOptionChange', data: Object): void",
          "",
          "}>()",
          "",
          "const \\$appSessionStorage = appSessionStorage()",
          "let state: any = reactive({",
          "",
          "})",
          "",
          "onMounted(() => {",
          "  state = \\$appSessionStorage.getContentState",
          "  emit('submit', { ...state, exportOptions: state.exportOptions?._value })",
          "  emit('pdfOptionChange', state)",
          "})",
          "</script>",
          "",
          "<template>",
          "  <!-- dropdown:pgarm -->",
          "  <div />",
          "  < /template>",
      ],
      "description":"3i-pdfview-component"
    },
    "3i-selectSearch":{
      "prefix":["3i-selectSearch","selectSearch","ssearch"],
      "body":[
        "   ${0: ",
        "    const ${10:dropdownSearchList} = ref([ ",
        "    { ",
        "      dopDownCode: 2565, ",
        "      dropDownName: 2565, ",
        "    \\}, ",
        "    ]) ",
        " ",
        "    const ${50} = () => { ",
        "      // save to store ",
        "      // console.log(state) ",
        "      // statementStore.setStatement(state) ",
        "    \\} ",
        "   } ",
        "    <SelectSearch ",
        "        v-model=\"state.${20:xxxxx}\" ",
        "        name=\"${20}\" ",
        "        :option=\"${10}\" ",
        "        option-value=\"dropDownCode\" ",
        "        option-label=\"dropDownName\" ",
        "        :label=\"${30:label}\" ",
        "        required ",
        "        :is-submit=\"isSubmit\" ",
        "        :validate=\"v\\$.${20}.\\$invalid\" ",
        "        :return-object=\"true\" ",
        "        @change=\"${50:selectSearch${20/(.*)/${1:/capitalize}/}Change}\" ",
        "      /> ",
        "       ",
      ],
      "description":"3i-selectSearch"
    },
    "3i-number-format":{
      "prefix":["3i-number-format","number-format","numformat"],
      "body":[
            " import { FormatNumber } from '@/shared/utils/number'",
            " const formatNumber = new FormatNumber()",
            " ",
            " const getFormatNumber = (data: number | string, digi = 2) => {",
            "   return formatNumber.Currency(Number(data), digi)",
            " }",
      ],
      "description":""
    },
    "3i-note":{
      "prefix":["3i-note","note","jobs"],
      "body":[
        "UDD JIRA",
        "  feature-${50:smm}/mock-UDD-JIRA",
        "  feature-${50:smm}/integate-UDD-JIRA",
        "  name: $0",
        "  link: https://localhost:3000/#/",
        "  jira: ",
        "  figma: ",
        "  space:",
        "  mock:",
        "  integate:",
        "  sa:",
      ],
      "description":""
    },
    "3i-today":{
      "prefix":["today","now"],
      "body":[
        "$CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"
      ],
      "description":"3i-today"
    },
    "3i-text--input-label":{
      "prefix":["3i-text--input-label","3i-textlabel","textlabel","textinputlabel"],
      "body":[
        "<div> ",
        "    <label class=\"mb-1 text-sm font-medium\" for=\"estimateBudgetYear2\">${10:label}</label>",
        "    <div class=\"h-[40px] text-sm px-3 py-2 bg-white border shadow-sm border-slate-300 placeholder-slate-400 disabled:bg-slate-200 disabled:border-slate-200 disabled:text-slate-500 read-only:bg-slate-50 read-only:text-slate-500 read-only:border-slate-200 focus:outline-none focus:border-primary-50 focus:ring-primary-50 focus:ring-opacity-10 block w-full rounded-md sm:text-sm focus:ring-1 disabled:shadow-none read-only:shadow-none\"",
        "        style=\"border: 1px solid rgb(203, 213, 225);background-color: rgb(226 232 240 / var(--tw-bg-opacity));\"",
        "        ${0}>",
        "        {{${50:input}\\}\\}",
        "    </div>",
        "</div>",
      ],
      "description":"3i-text input label"
    }
}

/*
const getServiceReport = (state: any): any => {
  const params: any = {
    budgetYear: currentBudgetYear, budgetMonth: currentMonth.value, month: currentMonth.value, refDocType: 'P', exportType: state.exportType,
  }

  switch (state.type) {
    case 1:
      return expenseReportReportService.getSalaryDoc4Mtx(params)
    case 2:
      return expenseReportReportService.getReportAttach2Det(params)
    default:
      return expenseReportReportService.getReportAttach3Det(params)
  }
}
*/