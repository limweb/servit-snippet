{
	"vadlteboxtemp": {
		"prefix": "vadlteboxtemp",
		"body": "\r\n<h2 class=\"page-header\">${10:pageheader}</h2>\r\n<div class=\"box box-default\">\r\n    <div class=\"box-header with-border\">\r\n        <i class=\"fa fa-warning\"></i>\r\n        <h3 class=\"box-title\">${20:boxtitle}</h3>\r\n    </div>\r\n    <div class=\"box-body\">\r\n    \t${30:boxbody}\r\n    </div>\r\n</div>\r\n${0}\r\n",
		"description": "Vue Admin Lte  Boxtemplate "
	},
	"vadltetemp": {
		"prefix": "vadltetemp",
		"body": "\r\n<template>\r\n<div class=\"content-wrapper\" style=\"min-height: 1036px;\">\r\n    <section class=\"content-header\">\r\n      <h1>\r\n          {{title}}\r\n          <small>{{subtitel}}</small>\r\n      </h1>\r\n      <ol class=\"breadcrumb\">\r\n          <li>\r\n            <router-link to=\"/dashboard\">\r\n              <i class=\"fa fa-dashboard\"></i> <span>Home</span>\r\n            </router-link>\r\n          </li>\r\n          ${5:<li><router-link to=\"/dashboard\">\r\n              <i class=\"fa fa-dashboard\"></i> <span>Home</span>\r\n            </router-link></li>}\r\n          <li class=\"active\">{{title}}</li>\r\n      </ol>\r\n    </section>\r\n    <section class=\"content\">\r\n        <div class=\" box box-default \">\r\n            <div class=\"box-header with-border\">\r\n                <h3 class=\"box-title\"><i class=\"fa fa-tag\"></i> {{BoxTitle}}</h3>\r\n            </div>\r\n            <div class=\"box-body\">\r\n                <div class=\"row\">\r\n                      {{boxbox}}\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <h2 class=\"page-header\">{{PageHeader}}</h2>\r\n        <div class=\"row\">\r\n              {{boxbox}}\r\n        </div>\r\n    </section>\r\n</div>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n\r\n  name: '${10:ComponeneName}',\r\n\r\n  data () {\r\n    return {\r\n        title: \"${20:Title}\",\r\n        subtitel: '${30:Sub title}',\r\n        pageheader: '${40:PageHeader}',\r\n        boxtitle: '${50:Boxtitle}',\r\n        boxbox: '${60:boxbox}',\r\n    };\r\n  }\r\n};\r\n</script>\r\n\r\n<style lang=\"css\" scoped>\r\n${0}\r\n\r\n</style>\r\n\r\n",
		"description": "Vue Template for Admin Lte by Tlen"
	},
	"vc": {
		"prefix": "vc",
		"body": "\r\n\r\nvar vm = new Vue({\r\nmixins:[],\r\ndata:{\r\n\t${0:counter: 1 }\r\n\r\n},\r\nel:'#app',\r\nmethods:{\r\n test(){ console.log('test',this);  },\r\n test1(){ alert('test1'); }\r\n},\r\ncomputed:{ \r\n\taaa:function(){\r\n\t   return this.counter * 2;\r\n\t}\r\n},\r\nwatch: {\r\n    counter: function (val, oldVal) {\r\n      console.log('new: %s, old: %s', val, oldVal)\r\n    },\r\n},\r\ncomponents:{\r\n\t'comp1':{template:'<div>componetn1</div>'},\r\n\t'comp2':{template:'<div>componetn2</div>'},\r\n},\r\n// render : h => h(App),\r\nbeforeCreate  () { /* console.log('beforeCreate'); */ },\r\ncreated       () { /* console.log('created'); */ },\r\nbeforeMount   () { /* console.log('beforeMount'); */ },\r\nmounted       () { /* console.log('mounted'); */\r\n                this.test();\r\n                this.test1();\r\n},\r\nbeforeUpdate  () { /* console.log('beforeUpdate'); */ },\r\nupdated       () { /* console.log('updated'); */ },\r\nbeforeDestroy () { /* console.log('beforeDestroy'); */ },\r\ndestroyed     () { /* console.log('destroyed'); */ },\r\n})\t\r\n\r\n",
		"description": "Vue Component 1"
	},
	"vuex": {
		"prefix": "vuex",
		"body": "\r\nimport Vue from 'vue'\r\nimport Vuex from 'vuex'\r\n\r\nVue.use(Vuex)\r\n\r\n  const state = {\r\n  \t// count: 0\r\n\t${1:var,}\r\n  }\r\n  const mutations ={\r\n  \t\t${3:${4:mutationfuncname} (state, payload ) {  // playload obj or data \r\n    \t\tstate.${5:var} ${6: = payload }\r\n  \t\t\\},}\r\n  }\r\n  const getters = {\r\n  \t\t//getCounter: state => state.count\r\n\t\t${10:${20:gettername}: state => state.${30:var}, }\r\n  }\r\n  const actions = {\r\n \t\t//increment: ({ commit }, amount) => commit('INCREMENT', amount)\r\n \t\t${40:${50:actionname}: ({ commit \\}, ${60:actionvar}) => commit('${70:mutationfunc}', ${60:}), }\r\n  }\r\n\r\nexport default new Vuex.Store({\r\n\tstate,\r\n\tmodules:{\r\n\r\n\t},\r\n\tmutations,\r\n\tgetters,\r\n\tactions,\r\n})\r\n\r\n",
		"description": "vuex start"
	},
	"vxwatch": {
		"prefix": "vxwatch",
		"body": "\r\n// in vuex store file\r\nstore.watch((state) => state.searchString, (oldValue, newValue) => {\r\n    console.log('search string is changing')\r\n    console.log(oldValue)\r\n    console.log(newValue)\r\n})\r\n",
		"description": "vuex watch example"
	},
	"vxaction": {
		"prefix": "vxaction",
		"body": ["/*{",
			"  state,      // same as `store.state`, or local state if in modules",
			"  rootState,  // same as `store.state`, only in modules",
			"  commit,     // same as `store.commit`",
			"  dispatch,   // same as `store.dispatch`",
			"  getters,    // same as `store.getters`, or local getters if in modules",
			"  rootGetters",
			"}*/",
			"${50:actionname}: ({ commit \\}, ${60:actionvar}) => commit('${70:mutationfunc}', ${60:}),\r\n"
		],
		"description": "vuex actions"
	},
	"vxapi": {
		"prefix": "vxapi",
		"body": "\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  getCurrentUser() {\r\n    return axios.get('/user/me');\r\n  },\r\n}\r\n",
		"description": ""
	},
	"vxas": {
		"prefix": "vxas",
		"body": "\r\nasync ${1:actionname}({commit}){\r\n    const ${10:var} = await ${20:api.function();}\r\n\tcommit('${30:mutationfunc}', ${10})\r\n},\r\n",
		"description": "vuex async actions"
	},
	"vxastrycatch": {
		"prefix": "vxastrycatch",
		"body": "\r\nasync ${1:actionfunc}({ ${10:dispatch},${20:commit} ${30:,getters,state,rootGetters,rootState} }, ${40:var} ) {\r\n    try {\r\n        const ${41:rs} = await ${45:Api.function}(${40:var})\r\n        ${50:${51:dispatch/}${52:commit}}('${60:action/mutation}', ${65:para_var1})\r\n    } catch (e) {\r\n        console.log('error', e);\r\n        ${70}\r\n    }\r\n},\r\n\r\n",
		"description": "vuex async await try catch function"
	},
	"vxgetter": {
		"prefix": "vxgetter",
		"body": "\r\n//state getters rootState rootGetters \r\n${20:gettername}: state => state.${30:var},\r\n",
		"description": "vuex getters"
	},
	"vxp": {
		"prefix": "vxp",
		"body": "\r\nimport { ${10:mapState,} ${20:mapGetters,} ${30:mapMutations,} ${40:mapActions}  } from 'vuex'\r\n//...mapState([]),\r\n//...mapGetters([]),\r\n//...mapMutations([]),\r\n//...mapActions([]),\r\n${0}\r\n",
		"description": ""
	},
	"vxmutation": {
		"prefix": "vxmutation",
		"body": "\r\n${4:mutationfuncname} (state, payload ) {  // playload obj or data \r\n\tstate.${5:var} ${6: = payload }\r\n\\},\r\n\r\n",
		"description": "vuex mutation"
	},
	"axiosasync": {
		"prefix": "axiosasync",
		"body": "\r\n\r\nasync ${5:functionname}() => {\r\n  try {\r\n    var ${10:result} = await ${20:promisefunction()};\r\n    console.log(${10});\r\n    ${30}\r\n  } catch (err) {\r\n    console.err(err);\r\n    ${40}\r\n  }\r\n}\r\n\r\n",
		"description": "Axios async await"
	},
	"axiosget": {
		"prefix": "axiosget",
		"body": "\r\n${1|this.$axios,axios|}.get('${2:url}')\r\n  .then((rs) => {\r\n    console.log(rs);\r\n    ${50}\r\n  })\r\n  .catch((err) => {\r\n    console.log(err);\r\n    ${60}\r\n  });\r\n",
		"description": "Axios get ajax function"
	},
	"axiospost": {
		"prefix": "axiospost",
		"body": "\r\n${1|this.$axios,axios|}.post(\"${3:url}\", \r\n{\r\n  ${5:data}\r\n})\r\n.then((rs) => {\r\n\tconsole.log(rs);\r\n\t${20}\r\n})\r\n.catch( (err) => {\r\n\tconsole.log(err);\r\n\t${30}\r\n});\r\n\r\n",
		"description": "Axios Post ajax snippet"
	},
	"vuetrans": {
		"prefix": "vt",
		"body": "{{\\$t('$0')}}",
		"description": "Vue i18n tran"
	},
	"bvuetrans": {
		"prefix": "bvt",
		"body": "\\$t('$0')",
		"description": "Vue i18n tran"
	},
	"create-vuex-setter-mutation": {
		"scope": "javascript",
		"prefix": "vuex-setter-mutation",
		"body": [
			"export function set${1/(.*)/${1:/capitalize}/} (state, ${1}) {",
			"\tstate.${1} = ${1};",
			"}",
		],
		"description": "Create vuex simple setter mutation"
	},
	"create-vuex-action": {
		"scope": "javascript",
		"prefix": "vuex-fetch-action",
		"body": [
			"export async function get${1/(.*)/${1:/capitalize}/} ({ commit }) {",
			"\tconst res = await this.$axios.get('/${1}')",
			"\tcommit('set${1/(.*)/${1:/capitalize}/}', res.data)",
			"}"
		]
	},
	"vc1":{
		"prefix": "vc1",
		"body":[
			" export default {  \r",
			"   template: `<div  \r",
			"   				contenteditable=\"true\"  \r",
			"   				v-once  \r",
			"               	v-html=\"value\"  \r",
			"               	:value=\"value\"  \r",
			"               	@input=\"updateValue\"> \r",
			"             </div>`, \r",
			"     mixins: [],  \r",
			"     props: ['value'], \r",
			"     data() {  \r",
			"       return {  \r",
			"           theme: '${20:AdminLte}',  \r",
			"           name: '${30:Editable}',  \r",
			"       };  \r",
			"     },  \r",
			"     methods: { \r",
			"         updateValue(\\$event) { \r",
			"                 let value = \\$event.target.innerHTML; \r",
			"             //console.log('----input---',\\$event,this.\\$el,document.activeElement); \r",
			"             this.\\$emit('input', value)  \r",
			"         } \r",
			"     },  \r",
			"     watch: { \r",
			"         value: function (newValue) { \r",
			"             if (document.activeElement == this.\\$el) { \r",
			"                 return \r",
			"             } \r",
			"             this.\\$el.innerHTML = newValue; \r",
			"         } \r",
			"     }, \r",
			"     created() {  \r",
			"       console.log( this.name + 'component is created');  \r",
			"     },  \r",
			"     computed: {},  \r",
			"     updated(){}, \r",
			"     mounted(){},  \r",
			"     components:{}  \r",
			" };  \r",			
		],
		"description": "vue custom component template" 
	},
	"vc2":{
	  "prefix": "vc2",
	  "body": [
			" export default { \r",
			"   template: `<div> \r",
			"         <input type=\"number\"  \r",
			"         class=\"form-control\" \r",
			"         :class=\"'w-3/4'\" \r",
			"         :value=\"value\" \r",
			"         :placeholder=\"placeholder\" \r",
			"         :required=\"required\" \r",
			"         @input=\"updateValue(\\$event.target.value)\"  \r",
			"         readonly \r",
			"         /> \r",
			"         </div>`, \r",
			"   mixins: [], \r",
			"   props: { \r",
			"     value: { \r",
			"       type: Number , \r",
			"       default: 0, \r",
			"     }, \r",
			"     placeholder: { \r",
			"       type: String, \r",
			"       default: '', \r",
			"     }, \r",
			"     required: { \r",
			"       type: Boolean, \r",
			"       default: false \r",
			"     } \r",
			"   }, \r",
			"   data() { \r",
			"     return { \r",
			"       theme: '${20:AdminLte}', \r",
			"       name: '${30:Inputnumber}', \r",
			"     }; \r",
			"   }, \r",
			"   methods: { \r",
			"     updateValue(value) { \r",
			"       console.log('----input---'); \r",
			"       this.\\$emit('input', Number(value)) \r",
			"     } \r",
			"   }, \r",
			"   computed: {}, \r",
			"   created() { \r",
			"     console.log(this.name + 'component is created'); \r",
			"   }, \r",
			"   mounted() {}, \r",
			"   components: {} \r",
			" }; \r",		  
	  ],
	  "description": "vue custom component template"
	},
	"consolelog":{
		"prefix": ["clg","console"],
		"body": "console.${1|log,info,error,table|}('${5}--->',${10});",
		"description": "console log"
	},
	"evtpre":{
		"prefix": ["evtp"," evt.prevent"],
		"body": ["${1:evt}.preventDefault();"],
		"description": " evt.preventDefault();"
	},
	"vuenexttick":{
		"prefix": ["nexttick","vuenexttick"],
		"body": [
			"  this.\\$nextTick(()=>{ ",
			"      ${0}",
			"  });"
		],
		"description": "this.$nextTick(callback)"
	},
}