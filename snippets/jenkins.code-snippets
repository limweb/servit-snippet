{
	"ecs build script":{
		"prefix": ["ecs","ecr","aws"],
		"body": [
			"#!/usr/bin/env bash\r",
			"set -e\r",
			"\r",
			"BUILDECS=${1|true,false|}\r",
			"BUILDDOCKER=${2|true,false|}\r",

			"DOCKER_USERNAME=\"eventpasshub\"\r",
			"DOCKER_PASSWORD=\"@eventpass01\"\r",
			"DOCKER_IMGNAME=\"eventpasshub/evp\"\r",
			"${3:#}export HOST=${4|54.179.229.80 #jenkins-server,13.250.110.218 #testbuild-server,13.228.31.86 #new58-server,175.41.161.249 #redis-server,52.220.140.4 #zoom-server,54.251.20.32 #insight-server|}\r",
			"\r",
			"ECS_REGION='${5:ap-southeast-1}'\r",
			"ECS_CLUSTER_NAME='${10|jaymart,eventpass-shop,virtual-uat-cluster,whoamicls,demo,Eventpass-Expo,eventpass-web|}'\r",
			"ECS_SERVICE_NAME='${15:trams-web-srv}'\r",
			"ECS_TASK_DEFINITION_NAME='${20:trams-web}'\r",
			"ECR_NAME='${25:trams-web}'\r",
			"ECR_URI='${30:294422213275.dkr.ecr.ap-southeast-1.amazonaws.com}'\r",
			"VERSION=\\$(date +%s)\r",
			"AWSCLI_VER_TAR=1.11.91\r",
			"ENVIRONMENT='${35:ecs}'\r",
			"\r",
			"docker build --pull -t \"\\${ECR_NAME}:latest\" ${40: -f ./deploy/ecs/Dockerfile} .\r",
			"docker tag \"\\${ECR_NAME}:latest\" \"\\${ECR_URI}/\\${ECR_NAME}:\\${ENVIRONMENT}-\\${VERSION}\"\r",
			"docker tag \"\\${ECR_NAME}:latest\" \"\\${ECR_URI}/\\${ECR_NAME}:latest-\\${ENVIRONMENT}\"\r",
			"docker tag \"\\${ECR_NAME}:latest\" \"\\${DOCKER_IMGNAME}:\\${ECR_NAME}${41:-\\${ENVIRONMENT}}\"\r",
			"\r",
			"if \\$BUILDECS\r",
			"then\r",
			"\\$(aws ecr get-login --region \"\\${ECS_REGION}\" --no-include-email)\r",
			"docker push \"\\${ECR_URI}/\\${ECR_NAME}:\\${ENVIRONMENT}-\\${VERSION}\"\r",
			"docker push \"\\${ECR_URI}/\\${ECR_NAME}:latest-\\${ENVIRONMENT}\"\r",
			"ecs deploy \\$ECS_CLUSTER_NAME \\$ECS_SERVICE_NAME --timeout ${45:600} --ignore-warnings\r",
			"fi \r",
			"\r",
			"if \\$BUILDDOCKER\r",
			"then\r",
			"docker login -u=\"\\$DOCKER_USERNAME\" -p=\"\\$DOCKER_PASSWORD\"\r",
			"docker push  \"\\${DOCKER_IMGNAME}:\\${ECR_NAME}${41:-\\${ENVIRONMENT}}\"\r",
			"export DOCKER_HOST=\\$HOST:${60:2375}\r",
			"docker-compose pull &&  docker-compose up --force-recreate -d\r",
			"docker image prune -f\r",
			"docker-compose ps\r",
			"docker ps\r",
			"fi \r",
			"\r",
			"${0}\r",
		],
		"description": "build ecs script"
	},
	"jenkins for buildscript":{
		"prefix": ["jenkins"],
		"body": [
			"pipeline { \r",
			"  agent any \r",
			"  environment { ",
			"    BOT=\"${10:https://open.larksuite.com/open-apis/bot/v2/hook/b6c1001f-c012-44a7-aba0-a0395aa2763c}\"   ",
			"  } ",
			"  stages { \r",
			"    stage('Install dependencies') { \r",
			"      steps { \r",
			"        echo '----start----' \r",
			"        sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} start: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JENKINS_URL}/job/\\${JOB_NAME}/\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT}\" \r",
			"      } \r",
			"    } \r",
			"    stage ('Deploy') { \r",
			"      steps{ \r",
			"        echo '----Deploy------' \r",
			"        ${0} \r",
			"        sh 'chmod a+x buildecs.sh' \r",
			"        sh './buildecs.sh' \r",
			"      } \r",
			"    } \r",
			"  } \r",
			"  post { \r",
			"        always { \r",
			"           echo 'I will do this no matter what the status is' \r",
			"        } \r",
			"        success { \r",
			"           echo 'OK' \r",
			"           sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} success: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JENKINS_URL}/job/\\${JOB_NAME}/\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT}\" \r",
			"        } \r",
			"        failure { \r",
			"           echo 'FAIL' \r",
			"           sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} fail: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JENKINS_URL}/job/\\${JOB_NAME}/\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT}\" \r",
			"        } \r",
			"         \r",
			"    } \r",
			"} \r",
		],
		"description": "jekins file example"
	},
	"jenkins script":{
		"prefix": ["jenkins"],
		"body": [
			"pipeline {  ",
			"  agent any  ",
			"  environment { ",
			"    BOT=\"https://open.larksuite.com/open-apis/bot/v2/hook/b6c1001f-c012-44a7-aba0-a0395aa2763c\"   ",
			"    ${0}",
			"    BRANCH_MASTER=\"master\" ",
			"    BRANCH_DEV=\"dev\" ",
			"    BRANCH_ECS=\"ecs\" ",
			"    ${10}",
			"    BUILDECS=${15|true,false|} ",
			"    BUILDDOCKER=${20|true,false|} ",
			"     ",
			"    DOCKER_USERNAME=\"eventpasshub\" ",
			"    DOCKER_PASSWORD=\"@eventpass01\" ",
			"    DOCKER_IMGNAME=\"eventpasshub/evp\" ",
			"    HOST='${30|54.179.229.80' //jenkins-server,13.250.110.218' //testbuild-server,13.228.31.86' //new58-server,54.251.197.169' //redis-server,54.251.20.32' //insight-server|} ",
			"    PORT='${35|2375,2376|}' ",
			"     ",
			"    ECS_REGION='ap-southeast-1' ",
			"    ECS_CLUSTER_NAME='${40|jaymart,eventpass-shop,virtual-uat-cluster,whoamicls,demo,Eventpass-Expo,eventpass-web|}'",
			"    ECS_SERVICE_NAME='${50:srv}' ",
			"    ECS_TASK_DEFINITION_NAME='${60:task}' ",
			"    ECR_NAME='${70:ecrname}' ",
			"    ECR_URI='294422213275.dkr.ecr.ap-southeast-1.amazonaws.com' ",
			"    def VERSION=sh(script: \"echo `date +%s`\", returnStdout: true).trim() ",
			"    AWSCLI_VER_TAR='1.11.91' ",
			"    ENVIRONMENT='${80:dev}' ",
			"  } ",
			"  stages {  ",
			"    stage('Start Install') {  ",
			"      steps {  ",
			"        echo '----start----'  ",
			"        sh 'printenv' ",
			"        sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}-->\\${GIT_BRANCH}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} start: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JOB_URL}\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT} \"  ",
			"      }  ",
			"    }  ",
			"    stage(\"Docker Build\"){ ",
			"        steps{ ",
			"             echo \"Work on branch--->\\${GIT_BRANCH}\" ",
			"             echo \"----Build Docker Image-----\" ",
			"             script { ",
			"                if (GIT_BRANCH == 'origin/master') { ",
			"                    echo \"--- Branch script: \\${GIT_BRANCH}----\" ",
			"                    sh \"docker build --pull -t \\\"\\${ECR_NAME}:latest\\\" ${90: -f ./deploy/\\${BRANCH_MASTER\\}/Dockerfile}  . \" ",
			"                } else if (GIT_BRANCH == 'origin/dev') { ",
			"                    echo \"--- Branch script: \\${GIT_BRANCH}-----\" ",
			"                    sh \"docker build --pull -t \\\"\\${ECR_NAME}:latest\\\" ${95: -f ./deploy/\\${BRANCH_DEV\\}/Dockerfile}  . \" ",
			"                } else { ",
			"                    echo '------no branch-------' ",
			"                } ",
			"            } ",
			"        } ",
			"    }  ",
			"    stage ('Docker Tag Images') {  ",
			"      steps {  ",
			"        echo '-------build--docker---image-----'   ",
			"        sh \"docker tag  \\\"\\${ECR_NAME}:latest\\\" \\\"\\${ECR_URI}/\\${ECR_NAME}:\\${ENVIRONMENT}-\\${VERSION}\\\" \" ",
			"        sh \"docker tag  \\\"\\${ECR_NAME}:latest\\\" \\\"\\${ECR_URI}/\\${ECR_NAME}:latest-\\${ENVIRONMENT}\\\" \" ",
			"        sh \"docker tag  \\\"\\${ECR_NAME}:latest\\\" \\\"\\${DOCKER_IMGNAME}:\\${ECR_NAME}-\\${ENVIRONMENT}\\\" \" ",
			"      }  ",
			"    } ",
			"    stage(\"Docker Deploy\") { ",
			"      parallel { ",
			"          stage(\"AWS\") { ",
			"              when { expression { BUILDECS } } ",
			"              steps { ",
			"                    echo '-------deploy----ecs----for---aws-----' ",
			"                    sh ''' \\$(aws ecr get-login --region \\\"\\${ECS_REGION}\\\" --no-include-email) ''' ",
			"                    sh \"docker push \\\"\\${ECR_URI}/\\${ECR_NAME}:\\${ENVIRONMENT}-\\${VERSION}\\\"\" ",
			"                    sh \"docker push \\\"\\${ECR_URI}/\\${ECR_NAME}:latest-\\${ENVIRONMENT}\\\"\" ",
			"                    sh \"ecs deploy \\${ECS_CLUSTER_NAME} \\${ECS_SERVICE_NAME} --timeout 600 --ignore-warnings\"                 ",
			"              } ",
			"          } ",
			"          stage('DOCKDER') { ",
			"              when { expression { BUILDDOCKER } } ",
			"              steps { ",
			"                    echo '-------deploy--docker---for--custom--docker-host--' ",
			"                    sh \"docker login -u=\\\"\\$DOCKER_USERNAME\\\" -p=\\\"\\$DOCKER_PASSWORD\\\" \" ",
			"                    sh \"docker push  \\\"\\${DOCKER_IMGNAME}:\\${ECR_NAME}-\\${ENVIRONMENT}\\\" \" ",
			"                    sh \"export DOCKER_HOST=\\$HOST:2375 \" ",
			"                    script { ",
			"                      if (GIT_BRANCH == 'origin/master') { ",
			"                          echo \"--- Branch script: \\${GIT_BRANCH}----\" ",
			"                          sh \"docker-compose -f ./deploy/\\${BRANCH_MASTER}/docker-compose.yml -H \\${HOST}:\\${PORT}  pull \" ",
			"                          sh \"docker-compose -f ./deploy/\\${BRANCH_MASTER}/docker-compose.yml -H \\${HOST}:\\${PORT} up --force-recreate -d  \" ",
			"                          sh \"docker-compose -f ./deploy/\\${BRANCH_MASTER}/docker-compose.yml -H \\${HOST}:\\${PORT} ps \" ",
			"                      } else if (GIT_BRANCH == 'origin/dev') { ",
			"                          echo \"--- Branch script: \\${GIT_BRANCH}-----\" ",
			"                          sh \"docker-compose -f ./deploy/\\${BRANCH_dev}/docker-compose.yml -H \\${HOST}:\\${PORT}  pull \" ",
			"                          sh \"docker-compose -f ./deploy/\\${BRANCH_dev}/docker-compose.yml -H \\${HOST}:\\${PORT} up --force-recreate -d \" ",
			"                          sh \"docker-compose -f ./deploy/\\${BRANCH_dev}/docker-compose.yml -H \\${HOST}:\\${PORT} ps \" ",
			"                      } else { ",
			"                          echo '------no branch-------' ",
			"                      } ",
			"                    } ",
			"                    sh \"docker -H \\${HOST}:\\${PORT} image prune -f \" ",
			"                    sh \"docker -H \\${HOST}:\\${PORT} ps \" ",
			"              } ",
			"          } ",
			"      } ",
			"    } ",
			"  }  ",
			"  post {  ",
			"        always {  ",
			"           echo 'I will do this no matter what the status is'  ",
			"        }  ",
			"        success {  ",
			"           echo 'OK'  ",
			"           sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}-->\\${GIT_BRANCH}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} SUCCESS: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JOB_URL}\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT} \"  ",
			"        }  ",
			"        failure {  ",
			"           echo 'FAIL'  ",
			"           sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}-->\\${GIT_BRANCH}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} FAILURE: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JOB_URL}\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT}\"  ",
			"        }  ",
			"          ",
			"    }  ",
			"}  ",
			" ",
		],
		"description": "Jenkins File for deploy ecs and docker remote api"
	},
    "jenkins multi branch" :{
        "prefix": ["jenkins"],
        "description": "Jenkins file for multi branch",
        "body": [
                "            ",
                "pipeline {  ",
                "  agent any  ",
				"  environment { ",
				"    BOT=\"https://open.larksuite.com/open-apis/bot/v2/hook/b6c1001f-c012-44a7-aba0-a0395aa2763c\"   ",
				"     ${10}",
				"     ",
				"    DOCKER_USERNAME=\"eventpasshub\" ",
				"    DOCKER_PASSWORD=\"@eventpass01\" ",
				"    DOCKER_IMGNAME=\"eventpasshub/evp\" ",
				"    HOST='${30|54.179.229.80' //jenkins-server,13.250.110.218' //testbuild-server,13.228.31.86' //new58-server,175.41.161.249' //redis-server,52.220.140.4' //zoom-server,54.251.20.32' //insight-server|} ",
				"    PORT='${35|2375,2376|}' ",
				"     ",
				"    ECS_REGION='ap-southeast-1' ",
				"    ECS_CLUSTER_NAME='${36|jaymart,eventpass-shop,virtual-uat-cluster,whoamicls,demo,Eventpass-Expo,eventpass-web|}'",
				"    ECS_SERVICE_NAME='${37:myprojsrv}' ",
				"    ECS_TASK_DEFINITION_NAME='${38:myproj}' ",
				"    ECR_NAME='${40:myproject}' ",
				"    ECR_URI='294422213275.dkr.ecr.ap-southeast-1.amazonaws.com' ",
				"    def VERSION=sh(script: \"echo `date +%s`\", returnStdout: true).trim() ",
				"    AWSCLI_VER_TAR='1.11.91' ",
				"  } ",				
                "  stages {  ",
                "    stage('Start Install') {  ",
                "      steps {  ",
                "        echo '----start----'  ",
                "        echo \"Branch---->\\${GIT_BRANCH}\"",
                "        sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}-->\\${GIT_BRANCH}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} start: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JOB_URL}\\${BUILD_ID}/consoleText\\\" } ] ] } } } } ' \\${BOT} \"  ",
                "      }  ",
                "    }  ",
                "    stage(\"Docker Build\"){ ",
                "        steps{ ",
                "             script { ",
                "                if ( GIT_BRANCH == 'origin/${50:master}') { ",
                "                    sh ''' \\$(aws ecr get-login --region \"\\${ECS_REGION}\" --no-include-email) ''' ",
                "                    sh ''' docker build --pull -t \"\\${ECR_NAME}:latest-${55:${50:master}}\"  ${65: -f ./deploy/${60:${50:master}}/Dockerfile}  . ''' ",
                "                    sh ''' docker tag  \"\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" \"\\${ECR_URI}/\\${ECR_NAME}:${72:${55:${50:master}}}-\\${VERSION}\" ''' ",
                "                    sh ''' docker tag  \"\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" \"\\${ECR_URI}/\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" ''' ",
                "                    sh ''' docker push \"\\${ECR_URI}/\\${ECR_NAME}:${55:${50:master}}-\\${VERSION}\"''' ",
                "                    sh ''' docker push \"\\${ECR_URI}/\\${ECR_NAME}:latest${71:-${55:${50:master}}}\"''' ",
                "                    sh ''' ecs deploy \\${ECS_CLUSTER_NAME} \\${ECS_SERVICE_NAME} --timeout 600 --ignore-warnings''' ",
                " ",
                "                    sh ''' docker tag  \"\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" \"\\${DOCKER_IMGNAME}:\\${ECR_NAME}${71:-${55:${50:master}}}\" ''' ",
                "                    sh ''' docker login -u=\"\\$DOCKER_USERNAME\" -p=\"\\$DOCKER_PASSWORD\" ''' ",
                "                    sh ''' docker push  \"\\${DOCKER_IMGNAME}:\\${ECR_NAME}${71:-${55:${50:master}}}\" ''' ",
                "                    sh ''' export DOCKER_HOST=\\$HOST:2375 ''' ",
                "                    sh ''' docker-compose -f ./deploy/${60:${50:master}}/docker-compose.yml -H \\${HOST}:\\${PORT} pull ''' ",
                "                    sh ''' docker-compose -f ./deploy/${60:${50:master}}/docker-compose.yml -H \\${HOST}:\\${PORT} up --force-recreate -d  ''' ",
                "                    sh ''' docker-compose -f ./deploy/${60:${50:master}}/docker-compose.yml -H \\${HOST}:\\${PORT} ps ''' ",
                "                    sh ''' docker -H \\${HOST}:\\${PORT} image prune -f ''' ",
                "                    sh ''' docker -H \\${HOST}:\\${PORT} ps ''' ",
                "${0}",
                "                } else { ",
                "                    echo '------no branch-------' ",
                "                } ",
                "            } ",
                "        } ",
                "    }  ",
                "  }  ",
                "  post {  ",
                "        always {  ",
                "           echo 'I will do this no matter what the status is'  ",
                "        }  ",
                "        success {  ",
                "           echo 'OK'  ",
                "           sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}-->\\${GIT_BRANCH}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} SUCCESS: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JOB_URL}\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT} \"  ",
                "        }  ",
                "        failure {  ",
                "           echo 'FAIL'  ",
                "           sh \"curl -X POST -H 'Content-Type: application/json' -d '{  \\\"msg_type\\\": \\\"post\\\", \\\"content\\\": { \\\"post\\\": { \\\"zh_cn\\\": { \\\"title\\\": \\\"\\${JOB_NAME}-->\\${GIT_BRANCH}\\\", \\\"content\\\": [ [ { \\\"tag\\\": \\\"text\\\", \\\"text\\\": \\\"build - #\\${env.BUILD_NUMBER} FAILURE: \\\" }, { \\\"tag\\\": \\\"a\\\", \\\"text\\\": \\\"View\\\", \\\"href\\\": \\\"\\${JOB_URL}\\${BUILD_ID}/consoleText\\\" } ] ] } } } } \\' \\${BOT}\"  ",
                "        }  ",
                "          ",
                "    }  ",
                "}  ",
        ]
    },
    "add branch":{
        "prefix": ["add branch","jenkins add branch"],
        "description": "jenkins add branch",
        "body": [

                "               } else if ( GIT_BRANCH == 'origin/${50:master}') { ",
                "                    sh ''' \\$(aws ecr get-login --region \"\\${ECS_REGION}\" --no-include-email) ''' ",
                "                    sh ''' docker build --pull -t \"\\${ECR_NAME}:latest-${55:${50:master}}\"  ${65: -f ./deploy/${60:${50:master}}/Dockerfile}  . ''' ",
                "                    sh ''' docker tag  \"\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" \"\\${ECR_URI}/\\${ECR_NAME}:${72:${55:${50:master}}}-\\${VERSION}\" ''' ",
                "                    sh ''' docker tag  \"\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" \"\\${ECR_URI}/\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" ''' ",
                "                    sh ''' docker push \"\\${ECR_URI}/\\${ECR_NAME}:${55:${50:master}}-\\${VERSION}\"''' ",
                "                    sh ''' docker push \"\\${ECR_URI}/\\${ECR_NAME}:latest${71:-${55:${50:master}}}\"''' ",
                "                    sh ''' ecs deploy ${80:\\${ECS_CLUSTER_NAME\\}} ${85:\\${ECS_SERVICE_NAME\\}} --timeout 600 --ignore-warnings''' ",
                " ",
                "                    sh ''' docker tag  \"\\${ECR_NAME}:latest${71:-${55:${50:master}}}\" \"\\${DOCKER_IMGNAME}:\\${ECR_NAME}${71:-${55:${50:master}}}\" ''' ",
                "                    sh ''' docker login -u=\"\\$DOCKER_USERNAME\" -p=\"\\$DOCKER_PASSWORD\" ''' ",
                "                    sh ''' docker push  \"\\${DOCKER_IMGNAME}:\\${ECR_NAME}${71:-${55:${50:master}}}\" ''' ",
                "                    sh ''' export DOCKER_HOST=\\$HOST:2375 ''' ",
                "                    sh ''' docker-compose -f ./deploy/${60:${50:master}}/docker-compose.yml -H \\${HOST}:\\${PORT} pull ''' ",
                "                    sh ''' docker-compose -f ./deploy/${60:${50:master}}/docker-compose.yml -H \\${HOST}:\\${PORT} up --force-recreate -d  ''' ",
                "                    sh ''' docker-compose -f ./deploy/${60:${50:master}}/docker-compose.yml -H \\${HOST}:\\${PORT} ps ''' ",
                "                    sh ''' docker -H \\${HOST}:\\${PORT} image prune -f ''' ",
                "                    sh ''' docker -H \\${HOST}:\\${PORT} ps ''' ",
                "$0"
        ]
    }
}