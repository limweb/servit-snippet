{
    // ${1/([A-Z]*)(?:_)(?:([A-Z])([A-Z]+))*/${1:/downcase}${2:/capitalize}${3:/downcase}/g}
    // pascalcase 
    // upcase
    "model":{
        "prefix": ["gomodel","gmodel"],
        "body": [
            "package models ",
            " ",
			" //database.AutoMigrate(&models.${TM_FILENAME_BASE}{\\}) //add to Db.go",
            "type ${TM_FILENAME_BASE}s struct { ",
            "    ${TM_FILENAME_BASE}s []${TM_FILENAME_BASE}s `json:\"${TM_FILENAME_BASE/(.*)/${1:/downcase}/}s\"` ",
            "} ",
            " ",
            "type ${TM_FILENAME_BASE} struct { ",
            "    ModelDefault ",
            "    ${TM_FILENAME_BASE}ForCreate ",
			"    ${0}ID uint `json:\"id\" gorm:\"primary_key\" example:\"1\" ` // ${TM_FILENAME_BASE} id ",
            "} ",
            " ",
            "type ${TM_FILENAME_BASE}ForCreate struct { ",
            "    ${TM_FILENAME_BASE}ForUpdate ",
            "} ",
            " ",
            "type ${TM_FILENAME_BASE}ForUpdate struct { ",
            "    gofield${20} ",
            "} ",
            " ",
            "func (m *${TM_FILENAME_BASE}) TableName() string { ",
            "    return \"${10:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}s}\" ",
            "} ",
        ],
        "description": [
            "go models:",
            " package models ",
            "  ",
            " type Book struct { ",
            "     ModelDefault ",
            " } ",
            "  ",
            " func (b *Book) TableName() string { ",
            "     return \"books\" ",
            " } ",
        ]    
    },
    "modelfield":{
        "prefix": ["gfield","gofield","go field"],
        "body": "$1 ${2|string,int,uint,uint8,int64,float64,bool,[]byte,string,[]string,[]interface{},*string,time.Time,*time.Time,sql.NullString,sql.NullTime,nil|} `${40:json:\"${1/(.*)/${1:/downcase}/}\"} ${50:gorm:\"${20|index,primary_key,unique,autoCreateTime,autoUpdateTime,not null|}\"} ${60:example:\"$30\"} ` // ${TM_FILENAME_BASE} ${1/(.*)/${1:/downcase}/} $0 ",
        "description": [
            "add file for model",
            "Amount float64 `json:\"amount\" gorm:\"index\" example:\"500.00\" ` // Order amount  "
        ]
    },
    "service":{
        // ${TM_FILENAME/([A-Z].*)([A-Z].*)/${1}/}
        // ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}
        "prefix": ["goserv","goservice","gosrv","gsrv"],
        "description": "golang Service Generate",
        "body": [
            "package services ",
            " ",
            "import ( ",
            "    \"${10:apitest}/db\" ",
            "    \"${10}/models\" ",
            "    \"fmt\" ",
            ") ",
            " ",
            "func GetAll${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *[]models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) (err error) { ",
            "    if err = db.GetDB().Find(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func GetAllIdDesc${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *[]models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) (err error) { ",
            "    if err = db.GetDB().Order(\"id desc\").Find(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func AddNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) (err error) { ",
            "    if err = db.GetDB().Create(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func GetOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}, id string) (err error) { ",
            "    if err := db.GetDB().Where(\"id = ?\", id).First(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func PutOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}, id string) (err error) { ",
            "    fmt.Println(b) ",
            "    db.GetDB().Save(b) ",
            "    return nil ",
            "} ",
            " ",
            "func Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}, id string) (err error) { ",
            "    db.GetDB().Where(\"id = ?\", id).Delete(b) ",
            "    return nil ",
            "} ",
            " ",
        ]
    },
	"controller": {
		"prefix": ["gctrl","goctrl","go controller"],
		"body": [
			"package controllers ",
			" ",
			"import ( ",
			"	\"apitest/db\" ",
			"	\"apitest/models\" ",
			"	\"apitest/services\" ",
			"	\"apitest/utils\" ",
			"	\"log\" ",
			"	\"math\" ",
			"	\"net/http\" ",
			" ",
			"	\"github.com/gin-gonic/gin\" ",
			") ",
			" ",
			"//*** เพื่อให้ routes ต่อไปนี้ทำงานต้องนำ บันทึก routes ไปเพิ่มใน server.go ",
			"$10// controllers.Setup${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}Routes(v1) $0",
			"func Setup${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}Routes(rg *gin.RouterGroup) { ",
			"	router := rg.Group(\"/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s\") ",
			"	$20// router.Use(utils.JwtVerify) // jwt verify with secret key ถ้าต้องการให้ auth ด้วย jwt ",
			"	router.GET(\"/all\", list${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
			"	router.GET(\"/last\", listlast${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
			"	router.GET(\"/vuetable\", vuetable${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
			"	router.GET(\"/by/:id\", getOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
			"	router.GET(\"/del/:id\", delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
			"	router.POST(\"/new\", addNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
			"	router.POST(\"/edit/:id\", putOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
			"} ",
			" ",
			"// List${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s godoc ",
			"// @summary List ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
			"// @description List all ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @security ApiKeyAuth ",
			"// @id List${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
			"// @accept json ",
			"// @produce json ",
			"// @response 200 {array} []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} \"OK\" ",
			"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
			"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
			"// @response 409 {object} utils.ResponseData \"Conflict\" ",
			"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
			"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/all [get] ",
			"func list${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
			"	var rs []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"	payload := utils.GetResponse() ",
			"	err := services.GetAll${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs) ",
			"	if err != nil { ",
			"		alert := utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
			"		payload.Meta = http.StatusText(404) ",
			"		payload.Alert = alert ",
			"		utils.RespondJSON(c, 404, payload) ",
			"	} else { ",
			"		payload.Data = rs ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} ",
			"} ",
			" ",
			"// List${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s godoc ",
			"// @summary List ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
			"// @description List all ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @security ApiKeyAuth ",
			"// @id Listlast${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
			"// @accept json ",
			"// @produce json ",
			"// @response 200 {array} []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} \"OK\" ",
			"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
			"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
			"// @response 409 {object} utils.ResponseData \"Conflict\" ",
			"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
			"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/last [get] ",
			"func listlast${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
			"	var rs []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"	payload := utils.GetResponse() ",
			"	err := services.GetAllIdDesc${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs) ",
			"	if err != nil { ",
			"		alert := utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
			"		payload.Meta = http.StatusText(404) ",
			"		payload.Alert = alert ",
			"		utils.RespondJSON(c, 404, payload) ",
			"	} else { ",
			"		payload.Data = rs ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} ",
			"} ",
			" ",
			"// Create${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
			"// @summary Create ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @description Create new ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} ",
			"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @security ApiKeyAuth ",
			"// @id Create${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @accept json ",
			"// @produce json ",
			"// @param ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} body models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}ForCreate true \"${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} data to be created\" ",
			"// @response 200 {object} utils.ResponseData \"OK\" ",
			"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
			"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
			"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
			"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/new [post] ",
			"func addNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
			"	var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"	payload := utils.GetResponse() ",
			"	c.BindJSON(&rs) ",
			"	err := services.AddNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs) ",
			"	if err != nil { ",
			"		alert := utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
			"		payload.Meta = http.StatusText(404) ",
			"		payload.Alert = alert ",
			"		utils.RespondJSON(c, 404, payload) ",
			"	} else { ",
			"		payload.Data = rs ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} ",
			"} ",
			" ",
			"// Get${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
			"// @summary Get ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @description  Get ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} by id ",
			"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @security Basic auth ",
			"// @id Get${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @accept json ",
			"// @produce json ",
			"// @param id path int true \"id of ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} to be gotten\" ",
			"// @response 200 {object} utils.ResponseData \"OK\" ",
			"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
			"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
			"// @response 409 {object} utils.ResponseData \"Conflict\" ",
			"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
			"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/by/{id} [get] ",
			"func getOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
			"	id := c.Params.ByName(\"id\") ",
			"	payload := utils.GetResponse() ",
			"	var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"	err := services.GetOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
			"	if err != nil { ",
			"		alert := utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
			"		payload.Meta = http.StatusText(404) ",
			"		payload.Alert = alert ",
			"		utils.RespondJSON(c, 404, payload) ",
			"	} else { ",
			"		payload.Data = rs ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} ",
			"} ",
			" ",
			"// Update${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
			"// @summary Update ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @description Update ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} by id ",
			"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @security ApiKeyAuth ",
			"// @id Update${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @accept json ",
			"// @produce json ",
			"// @param id path int true \"id of ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} to be updated\" ",
			"// @param ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} body models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}ForUpdate true \"${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} data to be updated\" ",
			"// @response 200 {object} utils.ResponseData \"OK\" ",
			"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
			"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
			"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
			"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/edit/{id} [post] ",
			"func putOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
			"	var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"	payload := utils.GetResponse() ",
			"	id := c.Params.ByName(\"id\") ",
			"	err := services.GetOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
			"	if err != nil { ",
			"		alert := utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
			"		payload.Meta = http.StatusText(404) ",
			"		payload.Alert = alert ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} ",
			"	c.BindJSON(&rs) ",
			"	err = services.PutOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
			"	if err != nil { ",
			"		alert := utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
			"		payload.Meta = http.StatusText(404) ",
			"		payload.Alert = alert ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} else { ",
			"		payload.Data = rs ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} ",
			"} ",
			" ",
			"// Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
			"// @summary Delete ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @description Delete ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} by id ",
			"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @security ApiKeyAuth ",
			"// @id Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @accept json ",
			"// @produce json ",
			"// @param id path int true \"id of ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} to be deleted\" ",
			"// @response 200 {object} utils.ResponseData \"OK\" ",
			"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
			"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
			"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
			"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/del/{id} [get] ",
			"func delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
			"	var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"	payload := utils.GetResponse() ",
			"	id := c.Params.ByName(\"id\") ",
			"	err := services.Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
			"	if err != nil { ",
			"		alert := utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
			"		payload.Meta = http.StatusText(404) ",
			"		payload.Alert = alert ",
			"		utils.RespondJSON(c, 404, payload) ",
			"	} else { ",
			"		payload.Data = rs ",
			"		utils.RespondJSON(c, 200, payload) ",
			"	} ",
			"} ",
			" ",
			"// Vuetable${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
			"// @summary List ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s use VueTable ",
			"// @description List all ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s with pagination keyword filter by column Sort columns ",
			"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
			"// @security ApiKeyAuth ",
			"// @id vuetable${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"// @accept json ",
			"// @produce json ",
			"// @Param page query string false \"number of page\" ",
			"// @Param per_page query string false \"get number of per_page\" ",
			"// @Param sort query string false \"soft by cols exm: col1|asc,col2|desc\" ",
			"// @Param filter query string false \"search with column exm: col1|aaa,col2|bbb  by filter\" ",
			"// @Param kw query string false \"search by kw exm: aaa bbb ccc \" ",
			"// @response 200 {object} []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} \"OK\" ",
			"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
			"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
			"// @response 409 {object} utils.ResponseData \"Conflict\" ",
			"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
			"// example /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/vuetable?page=2&per_page=2&sort=created_at|ASC,uid|DESC&kw=xxx&filter=name|aaa,author|bbb ",
			"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/vuetable [get] ",
			"func vuetable${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
			"	var rs []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
			"	query := c.Request.URL.Query() ",
			"	table := \"${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s\" ",
			"	paging := utils.GenPagination(query, table) ",
			"	dbqry := db.GetDB().Limit(paging.Limit).Offset(paging.Offset).Order(paging.Sort) ",
			" ",
			"	qryfilter := utils.Filter(paging.Filter) ",
			"	for k, v := range qryfilter { ",
			"		log.Println(\"K->\", k, \"V->\", v) ",
			"		dbqry = dbqry.Where(k+\" like ? \", \"%\"+v+\"%\") ",
			"	} ",
			" ",
			"	// ############################################################ start ",
			"	// columns ที่ต้องการให้ค้นหาด้วย keyword รวม ",
			"	// cols := []string{\"name\", \"author\", \"category\"} //ต้องกำหนดเอง example ",
			"	cols := []string{$30} //ต้องกำหนดเอง ",
			"	// keywork single search #1 ",
			"	if paging.Kw != \"\" { ",
			"		for _, col := range cols { ",
			"			dbqry = dbqry.Or(col+\" like ? \", \"%\"+paging.Kw+\"%\") ",
			"		} ",
			"	} ",
			"	// keywork multiple search #2 ",
			"	// var kw = \"aaa bbb cccc\" ",
			"	rskws := utils.Searchkw(paging.Kw) ",
			"	log.Println(\"test kws-->\", rskws) ",
			"	for _, kw := range rskws { ",
			"		for _, col := range cols { ",
			"			dbqry = dbqry.Or(col+\" like ? \", \"%\"+kw+\"%\") ",
			"		} ",
			"	} ",
			"	// ############################################################ end ",
			" ",
			"	dbqry.Find(&rs) ",
			"	if dbqry.Error != nil { ",
			"		log.Fatal(dbqry.Error) ",
			"	} ",
			"	var totalRows int ",
			"	errCount := db.GetDB().Model(&rs).Count(&totalRows).Error ",
			"	if errCount != nil { ",
			"		log.Fatal(errCount.Error) ",
			"	} ",
			" ",
			"	payload := utils.GetResponse() ",
			"	var vtb utils.VueTableResponse ",
			"	vtb.Total = totalRows ",
			"	vtb.PerPage = paging.PerPage ",
			"	vtb.Datas = rs ",
			"	vtb.Form = paging.Offset + 1 ",
			"	vtb.To = paging.Page * paging.Limit ",
			"	vtb.CurrentPage = paging.Page ",
			"	vtb.LastPage = int(math.Ceil(float64(totalRows) / float64(paging.PerPage))) ",
			"	// vtb.NextPageURL = \"?page=3&per_page=2&sort=created_at|ASC,uid|DESC&kw=xxx&filter=field|aaaa,field2|bbbbbb\" ",
			"	// vtb.PrevPageURL = \"?page=1&per_page=2&sort=created_at|ASC,uid|DESC&kw=xxx&filter=field|aaaa,field2|bbbbbb\" ",
			"	// vtb := utils.VueTableResponse{Datas: rs, Total: 2000, PerPage: 20, Form: 200, To: 300, CurrentPage: 1, LastPage: 200, NextPageURL: \"\", PrevPageURL: \"\"} ",
			"	alert := utils.Alert{Msg: \"Vue Table สำเร็จ\", Title: \"Success\", Type: \"success\"} ",
			"	payload.Alert = alert ",
			"	payload.Data = vtb ",
			"	payload.Pagination = paging ",
			"	payload.Meta = http.StatusText(200) ",
			"	utils.RespondJSON(c, 200, payload) ",
			"} ",
			" ",
			
		],
		"description": "Golang Controller gennerator"
	}
}
