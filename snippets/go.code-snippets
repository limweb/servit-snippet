{
    // ${1/([A-Z]*)(?:_)(?:([A-Z])([A-Z]+))*/${1:/downcase}${2:/capitalize}${3:/downcase}/g}
    // pascalcase 
    // upcase
    "model":{
        "prefix": ["gomodel","gmodel"],
        "body": [
            "package models ",
            " ",
			" //database.AutoMigrate(&models.${TM_FILENAME_BASE}{\\}) //add to Db.go",
            "type ${TM_FILENAME_BASE}s struct { ",
            "    ${TM_FILENAME_BASE}s []${TM_FILENAME_BASE}s `json:\"${TM_FILENAME_BASE/(.*)/${1:/downcase}/}s\"` ",
            "} ",
            " ",
            "type ${TM_FILENAME_BASE} struct { ",
            "    ModelDefault ",
            "    ${TM_FILENAME_BASE}ForCreate ",
			"    ${0}ID uint `json:\"id\" gorm:\"primary_key\" example:\"1\" ` // ${TM_FILENAME_BASE} id ",
            "} ",
            " ",
            "type ${TM_FILENAME_BASE}ForCreate struct { ",
            "    ${TM_FILENAME_BASE}ForUpdate ",
            "} ",
            " ",
            "type ${TM_FILENAME_BASE}ForUpdate struct { ",
            "    gofield${20} ",
            "} ",
            " ",
            "func (m *${TM_FILENAME_BASE}) TableName() string { ",
            "    return \"${10:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}s}\" ",
            "} ",
        ],
        "description": [
            "go models:",
            " package models ",
            "  ",
            " type Book struct { ",
            "     ModelDefault ",
            " } ",
            "  ",
            " func (b *Book) TableName() string { ",
            "     return \"books\" ",
            " } ",
        ]    
    },
    "modelfield":{
        "prefix": ["gofield","gfield"],
        "body": "$1 ${2|string,int,uint,float64,bool|} `${40:json:\"${1/(.*)/${1:/downcase}/}\"} ${50:gorm:\"${20|index,primary_key,unique,autoCreateTime,autoUpdateTime,not null|}\"} example:\"$30\" ` // ${TM_FILENAME_BASE} ${1/(.*)/${1:/downcase}/} $0 ",
        "description": [
            "add file for model",
            "Amount float64 `json:\"amount\" gorm:\"index\" example:\"500.00\" ` // Order amount  "
        ]
    },
    "service":{
        // ${TM_FILENAME/([A-Z].*)([A-Z].*)/${1}/}
        // ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}
        "prefix": ["goserv","goservice","gosrv","gsrv"],
        "description": "golang Service Generate",
        "body": [
            "package services ",
            " ",
            "import ( ",
            "    \"${10:apitest}/db\" ",
            "    \"${10}/models\" ",
            "    \"fmt\" ",
            ") ",
            " ",
            "func GetAll${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *[]models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) (err error) { ",
            "    if err = db.GetDB().Find(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func GetAllIdDesc${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *[]models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) (err error) { ",
            "    if err = db.GetDB().Order(\"id desc\").Find(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func AddNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) (err error) { ",
            "    if err = db.GetDB().Create(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func GetOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}, id string) (err error) { ",
            "    if err := db.GetDB().Where(\"id = ?\", id).First(b).Error; err != nil { ",
            "        return err ",
            "    } ",
            "    return nil ",
            "} ",
            " ",
            "func PutOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}, id string) (err error) { ",
            "    fmt.Println(b) ",
            "    db.GetDB().Save(b) ",
            "    return nil ",
            "} ",
            " ",
            "func Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(b *models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}, id string) (err error) { ",
            "    db.GetDB().Where(\"id = ?\", id).Delete(b) ",
            "    return nil ",
            "} ",
            " ",
        ]
    },
    "controller":{
        "prefix": ["goctrl","gctrl","go controller"],
        "description": "golang generate Controller",
        "body":[
					"package controllers ",
					" ",
					"// controllers.Setup${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}Routes(v1) ",
					"import ( ",
					"    \"apitest/models\" ",
					"    \"apitest/services\" ",
					"    \"apitest/utils\" ",
					" ",
					"    \"github.com/gin-gonic/gin\" ",
					") ",
					" ",
					"func Setup${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}Routes(rg *gin.RouterGroup) { ",
					"    router := rg.Group(\"/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s\") ",
					"    router.GET(\"\", list${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
					"    router.GET(\"/last/iddesc\", listlast${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
					"    router.POST(\"\", addNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
					"    router.GET(\"/by/:id\", getOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
					"    router.PUT(\"\", putOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
					"    router.DELETE(\"/:id\", delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}) ",
					"} ",
					" ",
					"// List${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s godoc ",
					"// @summary List ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
					"// @description List all ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @security ApiKeyAuth ",
					"// @id List${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
					"// @accept json ",
					"// @produce json ",
					"// @response 200 {array} []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} \"OK\" ",
					"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
					"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
					"// @response 409 {object} utils.ResponseData \"Conflict\" ",
					"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
					"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s [get] ",
					"func list${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
					"    var rs []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"    err := services.GetAll${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs) ",
					"    alert := utils.Alert{Msg: \"สำเร็จ\", Title: \"Success\", Type: \"success\"} ",
					"    if err != nil { ",
					"        alert = utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
					"        utils.RespondJSON(c, 404, []string{}, alert) ",
					"    } else { ",
					"        utils.RespondJSON(c, 200, rs, alert) ",
					"    } ",
					"} ",
					" ",
					"// List${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s godoc ",
					"// @summary List ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
					"// @description List all ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @security ApiKeyAuth ",
					"// @id Listlast${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}s ",
					"// @accept json ",
					"// @produce json ",
					"// @response 200 {array} []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} \"OK\" ",
					"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
					"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
					"// @response 409 {object} utils.ResponseData \"Conflict\" ",
					"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
					"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s [get] ",
					"func listlast${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
					"    var rs []models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"    err := services.GetAllIdDesc${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs) ",
					"    alert := utils.Alert{Msg: \"สำเร็จ\", Title: \"Success\", Type: \"success\"} ",
					"    if err != nil { ",
					"        alert = utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
					"        utils.RespondJSON(c, 404, []string{}, alert) ",
					"    } else { ",
					"        utils.RespondJSON(c, 200, rs, alert) ",
					"    } ",
					"} ",
					" ",
					"// Create${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
					"// @summary Create ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @description Create new ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} ",
					"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @security ApiKeyAuth ",
					"// @id Create${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @accept json ",
					"// @produce json ",
					"// @param ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} body models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}ForCreate true \"${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} data to be created\" ",
					"// @response 200 {object} utils.ResponseData \"OK\" ",
					"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
					"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
					"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
					"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s [post] ",
					"func addNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
					"    var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"    c.BindJSON(&rs) ",
					"    err := services.AddNew${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs) ",
					"    alert := utils.Alert{Msg: \"สำเร็จ\", Title: \"Success\", Type: \"success\"} ",
					"    if err != nil { ",
					"        alert = utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
					"        utils.RespondJSON(c, 404, []string{}, alert) ",
					"    } else { ",
					"        utils.RespondJSON(c, 200, rs, alert) ",
					"    } ",
					"} ",
					" ",
					"// Get${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
					"// @summary Get ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @description  Get ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} by id ",
					"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @security Basic auth ",
					"// @id Get${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @accept json ",
					"// @produce json ",
					"// @param id path int true \"id of ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} to be gotten\" ",
					"// @response 200 {object} utils.ResponseData \"OK\"",
					"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
					"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
					"// @response 409 {object} utils.ResponseData \"Conflict\" ",
					"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
					"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/by/:id [get] ",
					"func getOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
					"    id := c.Params.ByName(\"id\") ",
					"    var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"    err := services.GetOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
					"    alert := utils.Alert{Msg: \"สำเร็จ\", Title: \"Success\", Type: \"success\"} ",
					"    if err != nil { ",
					"        alert = utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
					"        utils.RespondJSON(c, 404, []string{}, alert) ",
					"    } else { ",
					"        utils.RespondJSON(c, 200, rs, alert) ",
					"    } ",
					"} ",
					" ",
					"// Update${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
					"// @summary Update ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @description Update ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} by id ",
					"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @security ApiKeyAuth ",
					"// @id Update${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @accept json ",
					"// @produce json ",
					"// @param id path int true \"id of ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} to be updated\" ",
					"// @param ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} body models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}ForUpdate true \"${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} data to be updated\" ",
					"// @response 200 {object} utils.ResponseData \"OK\" ",
					"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
					"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
					"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
					"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/:id [patch] ",
					"func putOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
					"    var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"    id := c.Params.ByName(\"id\") ",
					"    err := services.GetOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
					"    alert := utils.Alert{Msg: \"สำเร็จ\", Title: \"Success\", Type: \"success\"} ",
					"    if err != nil { ",
					"        alert = utils.Alert{Msg: err.Error(), Title: \"Success\", Type: \"success\"} ",
					"        utils.RespondJSON(c, 404, []string{}, alert) ",
					"    } ",
					"    c.BindJSON(&rs) ",
					"    err = services.PutOne${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
					"    if err != nil { ",
					"        alert = utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
					"        utils.RespondJSON(c, 404, []string{}, alert) ",
					"    } else { ",
					"        utils.RespondJSON(c, 200, rs, alert) ",
					"    } ",
					"} ",
					" ",
					"// Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} godoc ",
					"// @summary Delete ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @description Delete ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} by id ",
					"// @tags ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s ",
					"// @security ApiKeyAuth ",
					"// @id Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"// @accept json ",
					"// @produce json ",
					"// @param id path int true \"id of ${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/} to be deleted\" ",
					"// @response 200 {object} utils.ResponseData \"OK\" ",
					"// @response 400 {object} utils.ResponseData \"Bad Request\" ",
					"// @response 401 {object} utils.ResponseData \"Unauthorized\" ",
					"// @response 500 {object} utils.ResponseData \"Internal Server Error\" ",
					"// @Router /api/v1/${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1:/downcase}/}s/:id [delete] ",
					"func delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(c *gin.Context) { ",
					"    var rs models.${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/} ",
					"    id := c.Params.ByName(\"id\") ",
					"    err := services.Delete${TM_FILENAME/([A-Z][a-z0-9]*)(.*)/${1}/}(&rs, id) ",
					"    alert := utils.Alert{Msg: \"สำเร็จ\", Title: \"Success\", Type: \"success\"} ",
					"    if err != nil { ",
					"        alert = utils.Alert{Msg: err.Error(), Title: \"Error\", Type: \"error\"} ",
					"        utils.RespondJSON(c, 404, []string{}, alert) ",
					"    } else { ",
					"        utils.RespondJSON(c, 200, rs, alert) ",
					"    } ",
					"} ",
					" ",
        ]
    }
}
