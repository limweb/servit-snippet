{
    "namesp":{ 
	   "prefix": "namesp",
	   "body": "namespace ${TM_DIRECTORY/.*(services|controllers|models)\\\\(.*)/$2/};",
	   "description": "name space for  services controllers models"
    },
    "namesp1":{
        "prefix":[ "namesp1","namespace"],
        "body":[
             "namespace ${TM_DIRECTORY/([^\\\\]*\\\\){1}(.*)/$2/};",
        ],
        "description": "php namespcce"
    },
    "namesp2":{
        "prefix":[ "namesp2","namespace"],
        "body":[
             "namespace ${TM_DIRECTORY/([^\\\\]*\\\\){2}(.*)/$2/};",
        ],
        "description": "php namespcce"
    },
    "namesp3":{
        "prefix":[ "namesp3","namespace"],
        "body":[
             "namespace ${TM_DIRECTORY/([^\\\\]*\\\\){3}(.*)/$2/};",
        ],
        "description": "php namespcce"
    },
    "namesp4":{
        "prefix":[ "namesp4","namespace"],
        "body":[
             "namespace ${TM_DIRECTORY/([^\\\\]*\\\\){4}(.*)/$2/};",
        ],
        "description": "php namespcce"
    },
    "namesp5":{
        "prefix":[ "namesp5","namespace"],
        "body":[
             "namespace ${TM_DIRECTORY/([^\\\\]*\\\\){5}(.*)/$2/};",
        ],
        "description": "php namespcce"
    },
    "delfunc": {
        "prefix": "delfunc",
        "body": "// ${1} ${6}\r\npublic function delete${1/(.*)/\\u$1/}(${2}) {\r\n    //$this->request\r\n    //$this->input\r\n    try {\r\n\t\t${3}\r\n\t\t$o = new stdClass();\r\n        # code...\r\n\t\t${4}\r\n\r\n       $this->response($o,'json'); \r\n    } catch (Exception $e) {\r\n    \t${5}\r\n       $this->rest_error(-1,$e->getMessage(),'json'); \r\n    }\r\n}\r\n\r\n",
        "description": "php RestfulServer.php help function get put post delete",

    },
    "testapi": {
        "prefix": "testapi",
        "body": "\r\n\r\nrequire_once __DIR__.'/../libs/RestfulServer.php';\r\nuse Illuminate\\Database\\Capsule\\Manager as Capsule;\r\nuse Carbon\\Carbon;\r\nuse \\Curl\\Curl;\r\nCapsule::enableQuerylog();\r\necho 'start';\r\n\r\n$curl = new Curl();\r\n$post = [\r\n    'api_key' => '${1:aaaaa}',\r\n    'api_secret' => '${10:bbbbb}',\r\n];\r\n  \r\ndump($post);    \r\n$curl->post('http://192.168.1.104/api/${20:ketshop}/v1/${30:changedomain}/',$post);\r\ndump($curl->response);\r\n\r\n",
        "description": "gen test apiserver",

    },
    "getfunc": {
        "prefix": "getfunc",
        "body": "// ${1} ${6}\r\npublic function get${1/(.*)/\\u$1/}(${2}) {\r\n    //$this->request\r\n    //$this->input\r\n    try {\r\n\t\t${3}\r\n\t\t$o = new stdClass();\r\n        # code...\r\n\t\t${4}\r\n\r\n       $this->response($o,'json'); \r\n    } catch (Exception $e) {\r\n    \t${5}\r\n       $this->rest_error(-1,$e->getMessage(),'json'); \r\n    }\r\n}\r\n\r\n",
        "description": "php RestfulServer.php help function get put post delete",

    },
    "heredoc": {
        "prefix": "heredoc",
        "body": "\r\n$${10:html} = <<<${20:HTML}\r\n\t ${0}\r\n${25}${20};\r\n",
        "description": "Here Doc",

    },
    "phpcase": {
        "prefix": "phpcase",
        "body": "\r\n$sql = '${1}';\r\n$hs = (object) Capsule::select($sql);\r\n$rs->item = count((array) $hs );\r\n\tforeach ($hs as &$h) {\r\n  \t  $h = (object) $h;\r\n  \t  $h->child = [];\r\n  \t  $h->lenght  = 6;\r\n  \t  if($h->nprice2 > 0){\r\n\t  \t  $a = new stdClass();\r\n\t  \t  $a->lenght = 9;\r\n\t  \t  $a->price = $h->nprice2;\r\n\t  \t  $a->weight = $h->weight3;\r\n\t  \t  $a->unitprice = $a->price * $a->weight;\r\n\t  \t  $a->${10:l}_bid = $h->${10:l}_bid;\r\n\t\t  $a->${10:l}_aid = $h->${10:l}_aid;\r\n\t  \t  $h->child[] = $a;\r\n  \t  \t  $rs->item++;\r\n  \t  }\r\n  \t  if($h->nprice3 > 0 ){\r\n\t  \t  $b = new stdClass();\r\n\t  \t  $b->lenght = 12;\r\n\t  \t  $b->price =$h->nprice3;\r\n\t  \t  $b->weight = $h->weight4;\r\n\t  \t  $b->unitprice = $b->price * $b->weight;\r\n\t  \t  $b->${10:l}_bid = $h->${10:l}_bid;\r\n\t\t  $b->${10:l}_aid = $h->${10:l}_aid;\r\n\t  \t  $h->child[] = $b;\r\n  \t  \t  $rs->item++;\r\n  \t  }\r\n  }\r\n$rs->size = Capsule::table('u_section_a')->count();\r\n$rs->data = $hs;\r\n\r\n",
        "description": "",

    },
    "php_cookies": {
        "prefix": ["$","cookie"],
        "body": "\r\n\t\t\\$_COOKIE['${1:variable}']\r\n",
        "description": "$_COOKIE",
    },
    "php_env": {
        "prefix": ["$","ENV"],
        "body": "\r\n\t\t\\$_ENV['${1:variable}']\r\n",
        "description": "$_ENV",

    },
    "php_file": {
        "prefix": ["$","FILE"],
        "body": "\r\n\t\t\\$_FILES['${1:variable}']\r\n",
        "description": "$_FILES",

    },
    "func": {
        "prefix": "func",
        "body": "\r\n\r\n\t//-- ${50}\r\n \tpublic function  ${1:get|put|post|delete}${2}(${3:$${4:varible}}) {\r\n\t    //$this->input\r\n\t\ttry {\r\n\t\t\t//Capsule::enableQuerylog();\r\n\t\t\t//Capsule::beginTransaction();\r\n\r\n\t\t\t${5}\r\n\t\t\t$o = new stdClass();\r\n\t\t\t// $o->data = $rs;\r\n\t\t\t// $o->input = $this->input;\r\n\t\t\t// $o->sql = Capsule::getQueryLog();\r\n\t\t\t// Capsule::commit();\r\n\t\t\t$this->response($o,'json');\r\n\t\t} catch (Exception $e) {\r\n\t\t\t// Capsule::rollback();\r\n\t\t\t${20}// $this->rest_error(-1,$e,'json',$e->getCode());                   \r\n\t\t\t${30}$this->rest_error(-1,$e->getMessage(),'json',0); //or\r\n\t\t}\r\n \t}\r\n\r\n",
        "description": "function for RestfulServer",

    },
    "php_get": {
        "prefix": ["$","GET"],
        "body": "\r\n\t\t\\$_GET['${1:variable}']\r\n",
        "description": "$_GET",

    },
    "php_post": {
        "prefix": ["$","POST"],
        "body": "\r\n\t\t\\$_POST['${1:variable}']\r\n",
        "description": "$_POST",

    },
    "php_request": {
        "prefix": ["$","REQUEST"],
        "body": "\r\n\t\t\\$_REQUEST['${1:variable}']\r\n",
        "description": "$_REQUEST",

    },
    "php_server": {
        "prefix": ["$","SERVER"],
        "body": "\r\n\t\t\\$_SERVER['${1:variable}']\r\n",
        "description": "$_SERVER",

    },
    "php_session": {
        "prefix": ["$","SESSION"],
        "body": "\r\n\t\t\\$_SESSION['${1:variable}']\r\n",
        "description": "$_SESSION",

    },
    "postfunc": {
        "prefix": "postfunc",
        "body": "// ${1} ${6}\r\npublic function post${1/(.*)/\\u$1/}(${2}) {\r\n    //$this->input\r\n    try {\r\n\t\t${3}\r\n\t\t$o = new stdClass();\r\n        # code...\r\n\t\t${4}\r\n\r\n       $this->response($o,'json'); \r\n    } catch (Exception $e) {\r\n    \t${5}\r\n       $this->rest_error(-1,$e->getMessage(),'json'); \r\n    }\r\n}\r\n\r\n",
        "description": "php RestfulServer.php help function get put post delete",
    },
    "putfunc": {
        "prefix": "putfunc",
        "body": "// ${1} ${6}\r\npublic function put${1/(.*)/\\u$1/}(${2}) {\r\n    //$this->request\r\n    //$this->input\r\n    try {\r\n\t\t${3}\r\n\t\t$o = new stdClass();\r\n        # code...\r\n\t\t${4}\r\n\r\n       $this->response($o,'json'); \r\n    } catch (Exception $e) {\r\n    \t${5}\r\n       $this->rest_error(-1,$e->getMessage(),'json'); \r\n    }\r\n}\r\n\r\n",
        "description": "php RestfulServer.php help function get put post delete",
    },
    "rftry": {
        "prefix": "rftry",
        "body": "\r\ntry {\r\n\t// Capsule::enableQuerylog();\r\n\t${90://use Illuminate\\Database\\Capsule\\Manager as Capsule; }\r\n\t${0}\r\n \t//Capsule::beginTransaction();\r\n\t\\$o = new stdClass();\r\n\t// \\$o->data = \\$rs;\r\n\t// \\$o->input = \\$this->input;\r\n\t// \\$o->sql = Capsule::getQueryLog();\r\n \t//Capsule::commit();\r\n\t\\$this->response(\\$o,'json');\r\n} catch (Exception \\$e) {\r\n \t//Capsule::rollback();\r\n\t${2}// \\$this->rest_error(-1,\\$e,'json',\\$e->getCode());                   \r\n\t${3}// \\$this->rest_error(-1,\\$e->getMessage(),'json',0); //or\r\n\t${80}\\$this->rest_error(-1,\\$e,'json',0,__FILE__); //or\r\n}\r\n\r\n",
        "description": "php restful function try",
    },
    "try": {
        "prefix": "try",
        "body": "\r\ntry {\r\n\t${0}\r\n} catch (Exception \\$e) {\r\n\t${1}\r\n}",
        "description": "  try { } catch (Exception $e) {} ",
    },
    "rfperpage": {
        "prefix": "rfperpage",
        "body": "\r\n\t\t\t$o = new stdClass();\r\n\t\t\t$page = 0;  $perpage = 10;\r\n\t\t\tif(isset($this->input->page)){\r\n\t\t\t\t$page = $this->input->page;\r\n\t\t\t}\r\n\t\t\tif(isset($this->input->perpage)) {\r\n\t\t\t\t$perpage = $this->input->perpage;\r\n\t\t\t}\r\n\r\n\t\t\t$${10} = $this->input->${10};\r\n\t\t\t$${20} = $this->input->${20};\r\n\t\t\t$${30} = $this->input->${30};\r\n\t\t\t$ = $this->input->;\r\n\r\n\t\t\t$qry= ${50}::query();\r\n\t\t\tif($${10} != ${51}) $qry->where('${60}',$${10});\r\n\t\t\tif($${20} != ${61}) $qry->where('${70}',$${20});\r\n\t\t\tif($${30} != ${71}) $qry->where('${80}',$${30});\r\n\t\t\tif($ != ${81}) $qry->where('${90}',$);\r\n\t\t\t${0}\r\n\t\t\t$collection = $qry->get();\r\n\t\t\t$o->count = $collection->count();\r\n\t\t\t$rs = $collection->splice($page*$perpage, $perpage);\r\n\t\t\t$o->data = $rs;\r\n\t\t\t$o->input = $this->input;\r\n",
        "description": "",
    },
    "rfisset": {
        "prefix": "rfisset",
        "body": "\r\nif(isset($this->input->${1}) ${5:&& $this->input->${1} != ${3:-1} } ){\r\n\t${7} = $this->input->${1};\r\n}\r\n${9}\r\n",
        "description": "reful isset ",

    },
    "tmodel": {
        "prefix": "tmodel",
        "body": "${1:namespace App; \r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n${21:${22://}use DB; }\r\n}\r\nclass ${2}  extends  ${3:Model}  { \r\n\r\n        protected  $table='${12}';\r\n        protected  $primaryKey='${13:id}';\r\n        public $timestamps = ${14:true};\r\n        ${15:${16:${23://const CREATED_AT = '${24:create_date}';}\r\n        ${25://const UPDATED_AT = '${26:update_date}';}}\r\n        ${17:${40://}protected $guarded = array('id');\r\n        ${50://}protected $fillable = [];\r\n        ${60://}protected $hidden = [];}\r\n        ${18:${70://}protected $connection = '';\r\n        ${80://}use SoftDeletingTrait;\r\n        ${90://}protected $dates = ['deleted_at'];\r\n        }${19://integer, real, float, double, string, boolean, object, array, collection, date and datetime.\r\n        ${100://}protected $casts = [\r\n        ${100://}     // field => integer\r\n        ${100://}     ''       => '',\r\n        ${100://}];}${20:\r\n        ${110://}public static function boot()     {\r\n        ${110://}    parent::boot();\r\n        ${110://} \\}}}\r\n        \r\n}",
        "description": "",

    },
    "controlrepo": {
        "prefix": "controlrepo",
        "body": " namespace App\\Http\\Controllers;\r\n\r\nuse App\\Http\\Requests;\r\nuse App\\Http\\Controllers\\Controller;\r\nuse App\\Repositories\\${1}Repository as Repo;\r\nuse Illuminate\\Http\\Request;\r\n\r\nclass ${1}Controller extends Controller {\r\n\r\n/****************** \r\n$this->model->all($columns = array('*'));\r\n$this->model->lists($value, $key = null);\r\n$this->model->paginate($perPage = 1, $columns = array('*'));;\r\n$this->model->create(array $data);\r\n$this->model->update(array $data, $id);\r\n$this->model->delete($id);\r\n$this->model->find($id, $columns = array('*'));\r\n$this->model->findBy($field, $value, $columns = array('*'));\r\n$this->model->findAllBy($field, $value, $columns = array('*'));\r\n$this->model->findWhere($where, $columns = array('*'));\r\n\r\n\r\n ******************/\r\n\r\n\r\n    private $model;\r\n\r\n        public function __construct(Repo $repo) {\r\n                $this->model = $repo;\r\n    }\r\n\r\n    /**\r\n     * Display a listing of the resource.\r\n     *\r\n     * @return Response\r\n     */\r\n    public function index()\r\n    {\r\n        return $this->model->paginate($perPage = 10, $columns = array('*'));\r\n    }\r\n\r\n    /**\r\n     * Show the form for creating a new resource.\r\n     *\r\n     * @return Response\r\n     */\r\n    public function create()\r\n    {\r\n        return '<div>please use view create</div>';\r\n    }\r\n\r\n    /**\r\n     * Store a newly created resource in storage.\r\n     *\r\n     * @return Response\r\n     */\r\n    public function store()\r\n    {\r\n        return $this->model->create(\\Input::all());\r\n    }\r\n\r\n    /**\r\n     * Display the specified resource.\r\n     *\r\n     * @param  int  $id\r\n     * @return Response\r\n     */\r\n    public function show($id)\r\n    {\r\n        return $this->model->find($id);\r\n    }\r\n\r\n    /**\r\n     * Show the form for editing the specified resource.\r\n     *\r\n     * @param  int  $id\r\n     * @return Response\r\n     */\r\n    public function edit($id)\r\n    {\r\n        return '<div>please use view edit</div>';\r\n    }\r\n\r\n    /**\r\n     * Update the specified resource in storage.\r\n     *\r\n     * @param  int  $id\r\n     * @return Response\r\n     */\r\n    public function update($id)\r\n    {\r\n        return $this->model->update(\\Input::all(), $id);\r\n    }\r\n\r\n    /**\r\n     * Remove the specified resource from storage.\r\n     *\r\n     * @param  int  $id\r\n     * @return Response\r\n     */\r\n    public function destroy($id)\r\n    {\r\n        return $this->model->delete($id);\r\n    }\r\n\r\n}\r\n",
        "description": "",

    },
    "crudservice": {
        "prefix": "crudservice",
        "body": "\r\n/*====================================\r\nUSER NAME:          $TM_FULLNAME\r\nFILE NAME:          $TM_FILENAME\r\n TAB SIZE:          $TM_TAB_SIZE\r\nSOFT TABS:          $TM_SOFT_TABS\r\n\r\n====================================*/\r\n\r\nrequire_once __DIR__.'/../database.php';\r\nuse Illuminate\\Database\\Capsule\\Manager as Capsule;\r\n// use Illuminate\\Database\\Eloquent\\Model as Model;\r\n\r\n// class ${1} extends Model {\r\n//    protected $connection = '${3:l5acl}';\r\n//    protected $table = '${1}';\r\n//  }\r\n\r\n//$sv = new ${2}Service();\r\n// $rs = $sv->test();\r\n//$rs = $sv->getAll${1}();\r\n//$rs = $sv->get${1}ByID($id);\r\n//$rs = $sv->count();\r\n//$rs = $sv->get${1}_paged($startIndex, $numItems);\r\n//dump($rs);\r\n//exit();\r\n\r\nclass ${2}Service {\r\n\r\n  public function __construct() {\r\n        Capsule::enableQueryLog();\r\n  }\r\n\r\n  public function getAll${1}() {\r\n      $rs = ${1}::get()->toArray();\r\n      if($rs){\r\n          return $rs;\r\n      } else {\r\n         return [];\r\n      }\r\n  }\r\n\r\n  public function get${1}ByID($id) {\r\n     $rs =    ${1}::find($id)->toArray();\r\n     if($rs){\r\n        return $rs;\r\n     } else {\r\n        return -1;\r\n     }\r\n  }\r\n\r\n  public function create${1}($item) {\r\n      $rs = ${1}::create($item);\r\n      if($rs) {\r\n            return $rs;\r\n      } else {\r\n            return -1;\r\n      }\r\n  }\r\n\r\n  public function update${1}($item) {\r\n      $rs = ${1}::find($item->id);\r\n      if($rs) {\r\n              $result = $rs->update($item);\r\n              return $result;\r\n      } else{\r\n              return -1;\r\n      }\r\n  }\r\n\r\n  public function delete${1}($id) {\r\n        $rs = ${1}::find($id);\r\n        if($rs){\r\n              $result = $rs->destroy();\r\n              return $result;\r\n        } else {\r\n            return -1;\r\n        }\r\n  }\r\n\r\n  public function count() {\r\n          $rs = ${1}::count();\r\n          return $rs;\r\n  }\r\n\r\n  public function get${1}_paged($startIndex, $numItems) {\r\n          $rs = ${1}::take($numItems)->skip($startIndex)->get()->toArray();\r\n          return  $rs;\r\n  }\r\n\r\n  public function __destruct() {\r\n          consolelog(Capsule::getQueryLog());\r\n  }\r\n\r\n\r\n\r\n\r\n  public  function searchs($search) {\r\n\r\n    $search = (object)  $search;\r\n    // {        \"type\":0,\r\n    //          \"paramars\":{\"product_code\":\"1\",\"barcode\":\"34660\" },\r\n    //          \"params\":[\"11\",\"22\"],\r\n    //          \"params\":\"11\",\r\n    //          \"cols\":[\"product_code\",\"barcode\",\"name\",\"category\",\"typegroup\"],\r\n    //           \"opr\":\"and\",\r\n    //          \"order\":\"asc\",\r\n    //          \"result_lenght\":\"10\",\r\n    //          \"pageNo\":\"1\" \r\n    // }\r\n    if( $search == NULL )  return  '-1';\r\n\r\n    if($search->result_lenght < 0 || $search->pageNo <= 0 ) return '-2';\r\n     $skip = ( $search->pageNo -1 )  *  $search->result_lenght; \r\n\r\n\r\n      $rs =  ${1}::whereRaw('1= ?',[1]);\r\n\r\n\r\n        //type == 1\r\n        if($search->type == 1 ) {\r\n        $rs->where( function($query) use ($search)  {\r\n             foreach ( $search['paramars'] as $key => $value) {\r\n                ($search->opr == 'or')  ? $query->orWhere($key,'like','%'.$value.'%') :  $query->where($key,'like','%'.$value.'%') ;\r\n             }\r\n        });\r\n\r\n        // type == 0\r\n         }else {\r\n         if( $search->cols == NULL ) return '-3';\r\n         // if(trim($search->params) == NULL ) return '-4';\r\n         $s = 'CONCAT_WS(\"\",`'.implode(\"`,`\",$search->cols).'`)';\r\n     // Parametor \r\n         if(!is_array($search->params)) {\r\n            $params = $search->params;\r\n            $character_mask = \" \t\\n\\r\\0\\x0B\";\r\n            $params = trim($params, $character_mask);\r\n            $params = \\preg_replace('/\\s+/', ' ', $params);\r\n            $arparms = \\explode(' ', $params);\r\n          } else {\r\n            $arparms  = $search->params;\r\n         }\r\n\r\n         $rs->where(function($query) use ($search,$s,$arparms) {\r\n         \r\n         foreach ($arparms as $key => $value) {\r\n                  ($search->opr == 'or')  ? $query->whereRaw($s.' like ?',['%'.$value.'%'],'or') :  $query->whereRaw($s.' like ?',['%'.$value.'%'],'and') ;\r\n            }\r\n         });\r\n\r\n        foreach ($arparms as $key => $value) {\r\n            $rs->orderByRaw('locate(?,?) ASC',[$value,$s]); \r\n        }\r\n        $rs->orderByRaw( '? ASC',[$s]);\r\n\r\n         } // end if\r\n\r\n    $result = new \\stdClass();\r\n    $result->count = $rs->count();\r\n    if($search->result_lenght >0 ) $rs->take($search->result_lenght)->skip($skip);\r\n         $result->pageNo = $search['pageNo'];\r\n         ($search->result_lenght > 0 ) ?  $result->result_lenght = $search->result_lenght :$result->result_lenght = count($rs);\r\n     $result->items = $rs->get();\r\n         // $queries = Capsule::getQueryLog();\r\n         // dd($queries);\r\n     $result->querys = $queries = Capsule::getQueryLog();\r\n         return json_encode($result);\r\n\r\n\r\n  }\r\n public function test() {\r\n        echo \"\\n=================== Start Test ==========================\\n\";\r\n        echo \"\\n\";\r\n        var_dump($this->getAll${1}());\r\n        echo \"\\n\";\r\n        echo \"\\n\";\r\n        echo \"\\n\";\r\n        echo \"\\n\";\r\n        echo \"\\n\";\r\n        echo \"\\n\";\r\n        echo \"\\n\";\r\n        echo \"\\n\";\r\n        echo \"\\n=================== End Test ==========================\\n\";\r\n }\r\n\r\n\r\n\r\n}\r\n\r\n?>",
        "description": "",

    },
    "model": {
        "prefix": "model",
        "body": "${1:namespace App; \r\nuse Illuminate\\Database\\Eloquent\\Model;\r\n${900:${910://}use DB; }\r\n}\r\nclass ${2}  extends  ${3:Model}  { \r\n\t\t${0}\r\n        protected  \\$table='${12}';\r\n        protected  \\$primaryKey='${13:id}';\r\n        public \\$timestamps = ${14:true};\r\n\r\n        public function __construct(array $attributes = []) {\r\n\t\t    //$this->setRawAttributes(['expire_date' => Carbon::now()->addDays(7)],true);\r\n\t\t    parent::__construct($attributes);\r\n\t\t}\r\n\r\n        ${15:${16:${23://const CREATED_AT = '${24:create_date}';}\r\n        ${25://const UPDATED_AT = '${26:update_date}';}}\r\n        ${17:${40://}protected $guarded = array('id');\r\n        ${50://}protected $fillable = [];\r\n        ${60://}protected $hidden = [];}\r\n        ${18:${70://}protected $connection = '';\r\n        ${80://}use SoftDeletingTrait;\r\n        ${90://}protected $dates = ['deleted_at'];\r\n        }${19://integer, real, float, double, string, boolean, object, array, collection, date and datetime.\r\n        ${100://}protected $casts = [\r\n        ${100://}     // field => integer\r\n        ${100://}     ''       => '',\r\n        ${100://}];}${20:\r\n        ${110://}public static function boot()     {\r\n        ${110://}    parent::boot();\r\n\t\t${110://}${120:    static::creating(function($model){\r\n\t\t${110://}        //dump('creating');\r\n\t\t${110://}    \\}); }\r\n\t\t${110://}${130:    static::created(function($model){\r\n\t\t${110://}        //dump('created');\r\n\t\t${110://}    \\}); }\r\n\t\t${110://}${140:    static::updating(function($model){\r\n\t\t${110://}        //dump('updating');\r\n\t\t${110://}    \\}); }\r\n\t\t${110://}${150:    static::updated(function($model){\r\n\t\t${110://}        //dump('updated');\r\n\t\t${110://}    \\});}\r\n\t\t${110://}${160:    static::saving(function($model){\r\n\t\t${110://}        //dump('saving');\r\n\t\t${110://}    \\}); }\r\n\t\t${110://}${170:    static::saved(function($model){\r\n\t\t${110://}        //dump('saved');\r\n\t\t${110://}    \\}); }\r\n\t\t${110://}${181://}${180:    static::load(function($model){\r\n\t\t${110://}${181://}        //dump('load');\r\n\t\t${110://}${181://}    \\}); }\r\n        ${110://} \\}\r\n\t\t${110://}${181://}public function newFromBuilder($attributes = array(),$connection = null) {\r\n\t\t${110://}${181://}\t$instance = parent::newFromBuilder($attributes);\r\n\t\t${110://}${181://}\t$instance->fireModelEvent('loaded');\r\n\t\t${110://}${181://}\treturn $instance;\r\n\t\t${110://}${181://}\\}\r\n\t\t${110://}${181://}public static function loaded($callback, $priority = 0)\t{\r\n\t\t${110://}${181://}\tstatic::registerModelEvent('loaded', $callback, $priority);\r\n\t\t${110://}${181://}\\}}}\r\n        \r\n}",
        "description": "",

    },
    "nmpdf": {
        "prefix": "nmpdf",
        "body": "\r\n $mpdf = new mPDF('${1}',    // mode - default ''\r\n '${2:A4}',    // format - A4, for example, default ''\r\n ${3:15},     // font size - default 0\r\n '${4:Arial}',    // default font family\r\n ${5:15},    // margin_left\r\n ${6:15},    // margin right\r\n ${7:16},     // margin top\r\n ${8:16},    // margin bottom\r\n ${9:9},     // margin header\r\n ${10:9},     // margin footer\r\n '${11:P}');  // L - landscape, P - portrait\r\n",
        "description": "",

    },
    "perm": {
        "prefix": "perm",
        "body": "\r\n$${1:} = \\App\\Permission::create([\r\n            'name'        => 'master.${1:}',\r\n            'slug'        => [ // an array of permissions only for student\r\n                        ${2}\"create\"          => false,\r\n                        \"view\"            => false,  \r\n                        \"update\"        => false,  \r\n                        \"delete\"          => false, \r\n                        \"export\"         => false, \r\n                        \"print\"           => false,\r\n                        \"auth\"           => false,\r\n                        \"conform\"      => false, \r\n            ],\r\n            // we use permission inheriting.\r\n            'inherit_id' => $master->getKey(),\r\n            'description' => 'master.${1}[${18:}]'\r\n]);\r\n",
        "description": "",

    },
    "repository": {
        "prefix": "repository",
        "body": "namespace App\\Repositories;\r\n\r\nuse Bosnadev\\Repositories\\Contracts\\RepositoryInterface;\r\nuse Bosnadev\\Repositories\\Eloquent\\Repository;\r\n\r\nclass ${1}${2:s}Repository extends Repository {\r\n\r\n    public function model() {\r\n        return 'App\\${1}';\r\n    }\r\n}",
        "description": "",

    },
    "routeconres": {
        "prefix": "routeconres",
        "body": "\r\n Route::resource('${1}','${2}Controller');\r\n Route::controller('${1}','${2}Controller');\r\n \r\n",
        "description": "",

    },
    "eloqserv": {
        "prefix": "eloqserv",
        "body": "\r\n\r\nrequire_once 'Pdoconfig.php';\r\n${3://}require_once '${1:tbname}.php';\r\n\r\n/**\r\n * @author Thongchai Lim  *  林生海\r\n *  Tel:0816477729  0866018771\r\n *  Email/MSN:limweb@hotmail.com,thongchai@servit.co.th\r\n *  GoogleTalk:lim.thongchai@gmail.com\r\n *  Social Network Name: “limweb” Skype/HI5/Twitter/Facebook\r\n *  @copyright 2013 TH/BKK\r\n **/\r\n \r\n // if no  BaseModel please use pconfig to gen Pdoconfig.php  it have BaseModel\r\n  class Model_${1/^([a-z])/\\U$1\\E/} extends BaseModel {\r\n        public function open() {\r\n        \r\n        }\r\n        public function dispense() {\r\n\r\n        }\r\n        public function update() {\r\n\r\n        }\r\n        public function after_update() {\r\n\r\n        }\r\n        public function delete() {\r\n\r\n        }\r\n        public function after_delete() {\r\n\r\n        }\r\n\r\n }\r\n\r\nif(isset($_SERVER['REQUEST_METHOD'])){\r\n  \r\n      $method = $_SERVER['REQUEST_METHOD'];\r\n      $request = explode(\"/\", substr(@$_SERVER['PATH_INFO'], 1));\r\n\r\n      if($method == 'GET' && $request[0]=='test') {\r\n          $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n          $sv->test('json');\r\n      } else if($method =='GET' && $request[0] == 'search'  ) {\r\n            echo 'mofidy search function ';\r\n      } else if($method =='POST' && $request[0] == 'test'  ) {\r\n          echo 'post';\r\n          if(isset($request[1]) && $request[1] == 'add' ) {\r\n              //add  json object { \"a\":\"aa\",\"b\":\"bb\", user\":{\"userid\":\"aaaa\"}}\r\n               echo 'add';\r\n              $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n              $input = json_decode(file_get_contents(\"php://input\"));\r\n              // var_dump($input);\r\n              $rs =  $sv->create${1}($input, getuserid($input));\r\n              // var_dump($rs);\r\n              return $rs;\r\n              exit();\r\n            }  \r\n      } else if( $method =='PUT'  && $request[0] == 'test'  ) {\r\n          if(isset($request[1]) && is_numeric($request[1]) ){\r\n            $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n            $input = json_decode(file_get_contents(\"php://input\"));\r\n            // var_dump($input);\r\n            $rs = $sv->update${1}($input,getuserid($input));\r\n            // var_dump($rs);\r\n            return $rs;\r\n          exit();\r\n          }\r\n      } else if( $method =='DELETE'  && $request[0] == 'test' ) {\r\n          if(isset($request[1])  && is_numeric($request[1]) ){\r\n              $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n              $input = json_decode(file_get_contents(\"php://input\"));\r\n              // var_dump($input);\r\n              $rs = $sv->delete${1}($request[1],getuserid($input));\r\n              // var_dump($rs);\r\n              return $rs;\r\n              exit();\r\n            } \r\n      } else {\r\n\r\n      }\r\n} else  {\r\n  \r\n}\r\nfunction getuserid($input){\r\n  // var_dump($input->user->userid);\r\n    if (isset( $input->user->userid ) ){\r\n         return $input->user->userid;\r\n    } else {\r\n       return 'system';\r\n    }\r\n}\r\n\r\nclass ${1/^([a-z])/\\U$1\\E/}Service {\r\n\r\n  private $queryLogger = null;\r\n  private $connection = null;\r\n  var $tbname = \"${1:tbname}\";\r\n\r\n  public function __construct()\r\n  {\r\n    global $option;\r\n    Pdoconfig::setup();\r\n    $this->connection = Pdoconfig::$dbh;\r\n    $this->queryLogger = Pdoconfig::$queryLogger;\r\n  }\r\n\r\n\r\n  /**\r\n   * @return array\r\n   */\r\n  public function getAll${1:tbname}($userid=NULL) {\r\n    try {\r\n      $rows = R::find($this->tbname);\r\n      $rows = R::prepareForAMF(R::convertBeanToArray($rows), array(0 =>ucfirst($this->tbname)));\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'get all ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'SEARCH';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n      return $rows;\r\n\r\n//      $rows = Pdoconfig::getAll($this->tbname,null,null,'${1:tbname}');\r\n//      return $rows;\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param int $itemID\r\n   * @return object\r\n   */\r\n  public function get${1}ByID($itemID,$userid=NULL) {\r\n    try {\r\n      $row = R::load($this->tbname, $itemID);\r\n      $row = R::prepareForAMF($row->export(), array(0 => ucfirst($this->tbname)));\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'get ${1:tbname} by id'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'SEARCH';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n      return $row;\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param int $itemID\r\n   * @return int\r\n   */\r\n  public function delete${1}($itemID,$userid=NULL) {\r\n    try {\r\n      $rs = R::load($this->tbname, $itemID);\r\n      if($rs->id){\r\n        $row = R::trash($rs);\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'deletel ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'DEL';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n        \r\n        return $itemID;\r\n      } else {\r\n        throw new Exception('No Data for Delete');\r\n      }\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param object $item ${1:tbname}\r\n   * @return int\r\n   */\r\n  public function create${1:tbname}($item,$userid = NULL) {\r\n    try {\r\n      $arrCol =R::getColumnFromTable($this->tbname);\r\n      $item = R::assignItem2Column($arrCol,$item);\r\n      //$item = json_decode (json_encode ($item), FALSE);\r\n      $item = (object) $item;\r\n      $item->id = 0;\r\n      $item->create_by = $userid;\r\n      $item->modify_by = $userid;\r\n      $item->create_date = date('Y-m-d H:i:s');\r\n      $item->modify_date = date('Y-m-d H:i:s');\r\n      $bean = R::dispense($this->tbname);\r\n      $bean->import($item);\r\n      $id = R::store($bean);\r\n      if($id){\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'insert ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'NEW';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n      \r\n        return $id;\r\n      } else {\r\n        throw new Exception(\"Can't Insert Item\");\r\n      }\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param object $item ${1:tbname}\r\n   * @return int\r\n   */\r\n  public function update${1:tbname}($item,$userid=NULL) {\r\n    try {\r\n      $arrCol =R::getColumnFromTable($this->tbname);\r\n      $item = R::assignItem2Column($arrCol,$item);\r\n      //$item = json_decode (json_encode ($item), FALSE);\r\n      $item = (object) $item;\r\n      $item->modify_date = date('Y-m-d H:i:s');\r\n      $item->modify_by = $userid;\r\n      $bean = R::load($this->tbname,$item->id);\r\n      if($bean->id){\r\n        $bean->import($item);\r\n        $id = R::store($bean);\r\n        if($id){\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'update ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'UPDATE';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n        \r\n          return $id;\r\n        } else {\r\n          throw new Exception(\"Can't Update Item\");\r\n        }\r\n      } else {\r\n        throw new Exception('No record for Update');\r\n      }\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return int\r\n   */\r\n  public function count($userid=NULL) {\r\n    $count = R::count($this->tbname);\r\n    return $count;\r\n  }\r\n\r\n  /**\r\n   * @param int $startIndex\r\n   * @param int $numItems\r\n   * @return array\r\n   */\r\n  public function get${1:tbname}_paged($startIndex, $numItems,$userid=NULL) {\r\n    try {\r\n      $rows = R::getAll('select * from '.$this->tbname.' limit '.$startIndex.','.$numItems.';');\r\n      $rows = R::prepareForAMF($rows,array(0 => ucfirst ($this->tbname)));\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'get  ${1:tbname} by page'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'SEARCH';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n      \r\n      return $rows;\r\n    } catch (Exception $e) {\r\n      throw new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n\r\n  private function echoError($errorInfo) {\r\n    throw new Exception('MySQL Error ' . $errorInfo[2], $errorInfo[1]);\r\n  }\r\n\r\n  public function  __destruct(){\r\n    $this->connection = null;\r\n    R::close();\r\n  }\r\n  \r\n  public function test($format=null) {\r\n    global $request;\r\n    if(isset($request[1])){\r\n          switch ( $request[1] ) {\r\n             case 'all':\r\n                  $rs = $this->getAll${1}();\r\n                   break;\r\n             case 'count':\r\n                   $rs = $this->count();\r\n                   break;\r\n             case 'page':\r\n                    if(isset($request[2]) && isset($request[3]) && is_numeric($request[2]) && is_numeric($request[3]) ) {\r\n                          $rs = $this->getUsers_paged($request[2],$request[3]);\r\n                    } else {\r\n                          $rs = $this->getUsers_paged(0,20);\r\n                    }\r\n                   break;\r\n             case $request[1]:\r\n                    $rs = $this ->get${1}ByID($request[1]);\r\n                     break;\r\n              default:\r\n                  //    $rs = $this->get${1}_paged(0,5);\r\n                  //    $rs = $this->delete${1}(1);\r\n               break;\r\n           } \r\n    }else {\r\n         $rs = $this->getAll${1}();\r\n    } \r\n  if($format){\r\n      if($format == 'json'){\r\n        header(\"Content-type: text/json; charset=utf-8\");\r\n            echo json_encode($rs);\r\n      } else if($format == 'xml'){\r\n        header(\"Content-type: text/xml; charset=utf-8\");\r\n        $js = json_encode($rs);\r\n        $arjs = json_decode($js,true);\r\n        echo Pdoconfig::arrayToXml($arjs,'<XML></XML>');\r\n      }\r\n    } else {\r\n      var_dump($rs);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n",
        "description": "Eloquent Services php sample Class",

    },
    "genvo": {
        "prefix": "genvo",
        "body": "\r\n\r\nrequire_once 'rb.phar';\r\n\r\n$path =  __DIR__;\r\n$phpfile = '';\r\n$asfile  = '';\r\n\r\nR::setup('mysql:host=localhost;port=3306;dbname=${1:dbname}','root','');\r\n$table = '${2:table}';\r\n$cols = R::inspect($table);\r\n\r\n$phpfilename = $path . '/${2}.php';\r\n\r\necho '<?php ',\"\\r\\n\\r\\n\";\r\n$phpfile .= '<?php '.\"\\r\\n\\r\\n\";\r\n\r\necho 'class  ${2/^([a-z])/\\U$1\\E/}   {',\"\\r\\n\";\r\n$phpfile .= 'class  ${2/^([a-z])/\\U$1\\E/}   {'.\"\\r\\n\";\r\n\r\nforeach ($cols as $key => $value) {\r\n  echo \"\t\t\t\t\",'public $'.$key,\";\\r\\n\";\r\n  $phpfile .= \"\t\".'public $'.$key.\";\\r\\n\";\r\n}\r\n\r\n echo \"   } \\r\\n\\r\\n ?>\\r\\n\\r\\n\";\r\n $phpfile .= \"   } \\r\\n\\r\\n ?>\\r\\n\\r\\n\";\r\n \r\nfile_put_contents($phpfilename, $phpfile);\r\n$asfilename = $path . '/${2/^([a-z])/\\U$1\\E/}.as'; \r\n\r\n echo \"package ${3:vo}\\r\\n\";\r\n $asfile .=  \"package ${3:vo}\\r\\n\";\r\n echo \"{\\r\\n\";\r\n $asfile .=   \"{\\r\\n\";\r\n echo  '  [RemoteClass(alias=\"${2/^([a-z])/\\U$1\\E/}\")]',\"\\r\\n\";\r\n $asfile .=    '  [RemoteClass(alias=\"${2/^([a-z])/\\U$1\\E/}\")]'.\"\\r\\n\";\r\n echo \"  [Bindable]\\r\\n\";\r\n $asfile .=   \"  [Bindable]\\r\\n\";\r\n echo \"  public class ${4}${2/^([a-z])/\\U$1\\E/}${5}\\r\\n\";\r\n $asfile .=   \"  public class ${4}${2/^([a-z])/\\U$1\\E/}${5}\\r\\n\";\r\n echo \"  {\\r\\n\";\r\n $asfile .=   \"  {\\r\\n\";\r\n foreach ($cols as $key => $value) {\r\n  if (stripos($value, \"int\") !== false) {\r\n      echo \"\t\t\t\t\",'public var '.$key.':int',\";\\r\\n\";\r\n      $asfile .=   \"\t\".'public var '.$key.':int'.\";\\r\\n\";\r\n  } else {\r\n      echo \"\t\t\t\t\",'public var '.$key.':String',\";\\r\\n\";\r\n      $asfile .=   \"\t\".'public var '.$key.':String'.\";\\r\\n\";\r\n  } \r\n }\r\n echo \"     }\\r\\n\";\r\n $asfile .=   \"     }\\r\\n\";\r\n echo \"}\\r\\n\";\r\n $asfile .=   \"}\\r\\n\";\r\n echo \"\\r\\n\";\r\n $asfile .=   \"\\r\\n\";\r\n\r\n file_put_contents($asfilename, $asfile);\r\n\r\n${6}\r\n\r\n",
        "description": "Gen Vo Calss for Php and FLex",

    },
    "pconfig": {
        "prefix": "pconfig",
        "body": "\r\n\r\nrequire_once 'rb.phar';\r\n${2://} require_once 'SystemlogsService.php';\r\nclass Pdoconfig\r\n{\r\n    public static $dbh = null;\r\n    public static $username = 'root';\r\n    public static $password = '';\r\n    public static $logsrv = '';\r\n    public static $server = \"localhost\";\r\n    public static $port = \"3306\";\r\n    public static $databasename = '${1:dbname}'; \r\n    public static $queryLogger = null;\r\n    private static $scopeSelectVar = null;\r\n    private static $stmt = null;\r\n    \r\n    public static function setup()\r\n    {\r\n\r\n      self::init();\r\n      self::$dbh = new PDO('mysql:host=' . self::$server . ';dbname=' . self::$databasename .';', self::$username, self::$password);\r\n      self::$dbh->query('SET NAMES utf8');\r\n      R::setup(self::$dbh);\r\n      R::debug(true,1);\r\n      R::freeze(true);\r\n     ${2://} self::$logsrv = new SystemlogsService();\r\n      self::$queryLogger = R::getDatabaseAdapter()->getDatabase()->getLogger();\r\n    }\r\n    \r\n    \r\n    public function __construct()\r\n    {\r\n    date_default_timezone_set('Asia/Bangkok');\r\n    // set_time_limit(0);\r\n      set_time_limit(500);\r\n      ignore_user_abort(1);\r\n      ini_set('upload_max_filesize', '10M');\r\n      ini_set('post_max_size', '10M');\r\n      ini_set('max_input_time', 500);\r\n      ini_set('max_execution_time', 500);\r\n      ini_set(\"display_errors\", 1);\r\n    }\r\n\r\n    public static function init()\r\n    {\r\n      //      set_time_limit(0);\r\n      set_time_limit(500);\r\n      ignore_user_abort(1);\r\n      ini_set('upload_max_filesize', '10M');\r\n      ini_set('post_max_size', '10M');\r\n      ini_set('max_input_time', 500);\r\n      ini_set('max_execution_time', 500);\r\n      ini_set(\"display_errors\", 1);\r\n    }\r\n    \r\n    \r\n    public function __destruct() {\r\n      self::$dbh = null;\r\n      R::close();\r\n    }\r\n    \r\n  }\r\n\r\nclass returnfunction\r\n{\r\n    public $method;\r\n    public $classname;\r\n    public $comments;\r\n    public $params = array();\r\n    public $returns;\r\n    public $option = array();\r\n}\r\n\r\nclass params\r\n{\r\n    public $name;\r\n    public $paratype;\r\n    public $option;\r\n    public $detailtype;\r\n}\r\n\r\n\r\nclass stdC\r\n{\r\n\r\n    const PK = 'id';\r\n\r\n    public function getId()\r\n    {\r\n        return $this->{static::PK};\r\n    }\r\n    public function getKey()\r\n    {\r\n        return static::PK;\r\n    }\r\n}\r\n\r\n\r\n\r\n class BaseModel extends RedBean_SimpleModel {\r\n\r\n\r\n }\r\n\r\n\r\n\r\n",
        "description": "Pdoconfig.php is Default Config file",

    },
    "servs": {
        "prefix": "servs",
        "body": "\r\n\r\nrequire_once 'Pdoconfig.php';\r\n${3://}require_once '${1:tbname}.php';\r\n\r\n/**\r\n * @author Thongchai Lim  *  林生海\r\n *  Tel:0816477729  0866018771\r\n *  Email/MSN:limweb@hotmail.com,thongchai@servit.co.th\r\n *  GoogleTalk:lim.thongchai@gmail.com\r\n *  Social Network Name: “limweb” Skype/HI5/Twitter/Facebook\r\n *  @copyright 2013 TH/BKK\r\n **/\r\n \r\n // if no  BaseModel please use pconfig to gen Pdoconfig.php  it have BaseModel\r\n  class Model_${1/^([a-z])/\\U$1\\E/} extends BaseModel {\r\n        public function open() {\r\n        \r\n        }\r\n        public function dispense() {\r\n\r\n        }\r\n        public function update() {\r\n\r\n        }\r\n        public function after_update() {\r\n\r\n        }\r\n        public function delete() {\r\n\r\n        }\r\n        public function after_delete() {\r\n\r\n        }\r\n\r\n }\r\n\r\nif(isset($_SERVER['REQUEST_METHOD'])){\r\n  \r\n      $method = $_SERVER['REQUEST_METHOD'];\r\n      $request = explode(\"/\", substr(@$_SERVER['PATH_INFO'], 1));\r\n\r\n      if($method == 'GET' && $request[0]=='test') {\r\n          $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n          $sv->test('json');\r\n      } else if($method =='GET' && $request[0] == 'search'  ) {\r\n            echo 'mofidy search function ';\r\n      } else if($method =='POST' && $request[0] == 'test'  ) {\r\n          echo 'post';\r\n          if(isset($request[1]) && $request[1] == 'add' ) {\r\n              //add  json object { \"a\":\"aa\",\"b\":\"bb\", user\":{\"userid\":\"aaaa\"}}\r\n               echo 'add';\r\n              $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n              $input = json_decode(file_get_contents(\"php://input\"));\r\n              // var_dump($input);\r\n              $rs =  $sv->create${1}($input, getuserid($input));\r\n              // var_dump($rs);\r\n              return $rs;\r\n              exit();\r\n            }  \r\n      } else if( $method =='PUT'  && $request[0] == 'test'  ) {\r\n          if(isset($request[1]) && is_numeric($request[1]) ){\r\n            $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n            $input = json_decode(file_get_contents(\"php://input\"));\r\n            // var_dump($input);\r\n            $rs = $sv->update${1}($input,getuserid($input));\r\n            // var_dump($rs);\r\n            return $rs;\r\n          exit();\r\n          }\r\n      } else if( $method =='DELETE'  && $request[0] == 'test' ) {\r\n          if(isset($request[1])  && is_numeric($request[1]) ){\r\n              $sv = new ${1/^([a-z])/\\U$1\\E/}Service();\r\n              $input = json_decode(file_get_contents(\"php://input\"));\r\n              // var_dump($input);\r\n              $rs = $sv->delete${1}($request[1],getuserid($input));\r\n              // var_dump($rs);\r\n              return $rs;\r\n              exit();\r\n            } \r\n      } else {\r\n\r\n      }\r\n} else  {\r\n  \r\n}\r\nfunction getuserid($input){\r\n  // var_dump($input->user->userid);\r\n    if (isset( $input->user->userid ) ){\r\n         return $input->user->userid;\r\n    } else {\r\n       return 'system';\r\n    }\r\n}\r\n\r\nclass ${1/^([a-z])/\\U$1\\E/}Service {\r\n\r\n  private $queryLogger = null;\r\n  private $connection = null;\r\n  var $tbname = \"${1:tbname}\";\r\n\r\n  public function __construct()\r\n  {\r\n    global $option;\r\n    Pdoconfig::setup();\r\n    $this->connection = Pdoconfig::$dbh;\r\n    $this->queryLogger = Pdoconfig::$queryLogger;\r\n  }\r\n\r\n\r\n  /**\r\n   * @return array\r\n   */\r\n  public function getAll${1:tbname}($userid=NULL) {\r\n    try {\r\n      $rows = R::find($this->tbname);\r\n      $rows = R::prepareForAMF(R::convertBeanToArray($rows), array(0 =>ucfirst($this->tbname)));\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'get all ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'SEARCH';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n      return $rows;\r\n\r\n//      $rows = Pdoconfig::getAll($this->tbname,null,null,'${1:tbname}');\r\n//      return $rows;\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   *\r\n   * @param int $itemID\r\n   * @return object\r\n   */\r\n  public function get${1}ByID($itemID,$userid=NULL) {\r\n    try {\r\n      $row = R::load($this->tbname, $itemID);\r\n      $row = R::prepareForAMF($row->export(), array(0 => ucfirst($this->tbname)));\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'get ${1:tbname} by id'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'SEARCH';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n      return $row;\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param int $itemID\r\n   * @return int\r\n   */\r\n  public function delete${1}($itemID,$userid=NULL) {\r\n    try {\r\n      $rs = R::load($this->tbname, $itemID);\r\n      if($rs->id){\r\n        $row = R::trash($rs);\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'deletel ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'DEL';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n        \r\n        return $itemID;\r\n      } else {\r\n        throw new Exception('No Data for Delete');\r\n      }\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param object $item ${1:tbname}\r\n   * @return int\r\n   */\r\n  public function create${1:tbname}($item,$userid = NULL) {\r\n    try {\r\n      $arrCol =R::getColumnFromTable($this->tbname);\r\n      $item = R::assignItem2Column($arrCol,$item);\r\n      //$item = json_decode (json_encode ($item), FALSE);\r\n      $item = (object) $item;\r\n      $item->id = 0;\r\n      $item->create_by = $userid;\r\n      $item->modify_by = $userid;\r\n      $item->create_date = date('Y-m-d H:i:s');\r\n      $item->modify_date = date('Y-m-d H:i:s');\r\n      $bean = R::dispense($this->tbname);\r\n      $bean->import($item);\r\n      $id = R::store($bean);\r\n      if($id){\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'insert ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'NEW';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n      \r\n        return $id;\r\n      } else {\r\n        throw new Exception(\"Can't Insert Item\");\r\n      }\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param object $item ${1:tbname}\r\n   * @return int\r\n   */\r\n  public function update${1:tbname}($item,$userid=NULL) {\r\n    try {\r\n      $arrCol =R::getColumnFromTable($this->tbname);\r\n      $item = R::assignItem2Column($arrCol,$item);\r\n      //$item = json_decode (json_encode ($item), FALSE);\r\n      $item = (object) $item;\r\n      $item->modify_date = date('Y-m-d H:i:s');\r\n      $item->modify_by = $userid;\r\n      $bean = R::load($this->tbname,$item->id);\r\n      if($bean->id){\r\n        $bean->import($item);\r\n        $id = R::store($bean);\r\n        if($id){\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'update ${1:tbname}'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'UPDATE';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n        \r\n          return $id;\r\n        } else {\r\n          throw new Exception(\"Can't Update Item\");\r\n        }\r\n      } else {\r\n        throw new Exception('No record for Update');\r\n      }\r\n    } catch (Exception $e) {\r\n      throw  new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return int\r\n   */\r\n  public function count($userid=NULL) {\r\n    $count = R::count($this->tbname);\r\n    return $count;\r\n  }\r\n\r\n  /**\r\n   * @param int $startIndex\r\n   * @param int $numItems\r\n   * @return array\r\n   */\r\n  public function get${1:tbname}_paged($startIndex, $numItems,$userid=NULL) {\r\n    try {\r\n      $rows = R::getAll('select * from '.$this->tbname.' limit '.$startIndex.','.$numItems.';');\r\n      $rows = R::prepareForAMF($rows,array(0 => ucfirst ($this->tbname)));\r\n              ${2://} $log = new Systemlog();\r\n              ${2://} $log->logs = 'get  ${1:tbname} by page'; \r\n              ${2://} $log->query = json_encode( R::getLog()); \r\n              //${2://} $log->query = $stmt->queryString;\r\n              ${2://} $log->types = 'SEARCH';\r\n              ${2://} $log->userid =  $userid;\r\n              ${2://} $log->tbname = $this->tbname;\r\n              ${2://} $log->module =  __METHOD__;\r\n              ${2://} $log->parametor = json_encode(func_get_args());\r\n              ${2://}  Pdoconfig::$logsrv->insertlog($log,$userid);\r\n\r\n      \r\n      return $rows;\r\n    } catch (Exception $e) {\r\n      throw new Exception($e->getMessage());\r\n    }\r\n  }\r\n\r\n\r\n  private function echoError($errorInfo) {\r\n    throw new Exception('MySQL Error ' . $errorInfo[2], $errorInfo[1]);\r\n  }\r\n\r\n  public function  __destruct(){\r\n    $this->connection = null;\r\n    R::close();\r\n  }\r\n  \r\n  public function test($format=null) {\r\n    global $request;\r\n    if(isset($request[1])){\r\n          switch ( $request[1] ) {\r\n             case 'all':\r\n                  $rs = $this->getAll${1}();\r\n                   break;\r\n             case 'count':\r\n                   $rs = $this->count();\r\n                   break;\r\n             case 'page':\r\n                    if(isset($request[2]) && isset($request[3]) && is_numeric($request[2]) && is_numeric($request[3]) ) {\r\n                          $rs = $this->getUsers_paged($request[2],$request[3]);\r\n                    } else {\r\n                          $rs = $this->getUsers_paged(0,20);\r\n                    }\r\n                   break;\r\n             case $request[1]:\r\n                    $rs = $this ->get${1}ByID($request[1]);\r\n                     break;\r\n              default:\r\n                  //    $rs = $this->get${1}_paged(0,5);\r\n                  //    $rs = $this->delete${1}(1);\r\n               break;\r\n           } \r\n    }else {\r\n         $rs = $this->getAll${1}();\r\n    } \r\n  if($format){\r\n      if($format == 'json'){\r\n        header(\"Content-type: text/json; charset=utf-8\");\r\n            echo json_encode($rs);\r\n      } else if($format == 'xml'){\r\n        header(\"Content-type: text/xml; charset=utf-8\");\r\n        $js = json_encode($rs);\r\n        $arjs = json_decode($js,true);\r\n        echo Pdoconfig::arrayToXml($arjs,'<XML></XML>');\r\n      }\r\n    } else {\r\n      var_dump($rs);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n",
        "description": "Services php sample Class",

    },
    "rsetupsqlite": {
        "prefix": "rsetupsqlite",
        "body": "\r\n         R::setup('sqlite:${1:/tmp/dbfile.db}');\r\n",
        "description": "Redbean PHP setup connect SQLITE",

    },
    "rsetupmysql": {
        "prefix": "rsetupmysql",
        "body": "\r\n    R::setup('mysql:host=${1:localhost};dbname=${2:mydatabase}','${3:user}','${4:password}');\r\n\r\n",
        "description": "Redbeanp PHP Setup Connect Mysql",

    },
    "rsetuppgsql": {
        "prefix": "rsetuppgsql",
        "body": "\r\n      R::setup('pgsql:host=${1:localhost};dbname=${2:mydatabase}','${3:user}','${4:password}');\r\n",
        "description": "Redbean PHP setup connect POSTGRESQL",

    },
    "issetdefault": {
        "prefix": "issetdefault",
        "body": "\r\n${1} = (isset(${10}) ${11: && ${10}} ? ${10} : ${20:null});\r\n",
        "description": "issetdefault",

    },
    "lmsg": {
        "prefix": "lmsg",
        "body": "\r\n$this->langmsg('${1:message}',__FILE__${5:,${10:$data}${15:[]},${20:0},${30:1}})${0}\r\n",
        "description": " <?=$this->langmsg(' ",

    },
    "issphp": {
        "prefix": "issphp",
        "body": "\r\n(isset(${10}) ${11: && ${10}} ? ${12:$var} = ${10} : null);\r\n",
        "description": "php isset helpper",
    },
    "rfcrudsrv": {
        "prefix": "rfcrudsrv",
        "body": "require_once __DIR__.'/../database.php';\r\nrequire_once __DIR__.'/RestfulServer.php';\r\n\r\nclass  ${1}Service extends RestfulServer {\r\n    public function __construct() {\r\n      parent::__construct();\r\n    }\r\n\r\n    public function index(){\r\n      echo '${1}Service';\r\n    }\r\n}\r\n\r\n$${1/(.+)/\\L\\1/g}service = new ${1}Service();\r\n$${1/(.+)/\\L\\1/g}service->run();\r\n\r\n",
        "description": "Restful Service Gen Crud Service",

    },
    "throwlang": {
        "prefix": "throwlang",
        "body": "\r\nthrow new Langexception($this->langmsg('${10:message}',__FILE__,${20:$data}${21:[]},${30:0},2),${30});\r\n${0}\r\n",
        "description": " throw new Langexception($this->langmsg('message',$module=__FILE__,$data[],$code=0,$type=2),0); ",

    },
    "mpdfpb": {
        "prefix": "mpdfpb",
        "body": "\r\n        ${1:<pagebreak />}\r\n",
        "description": "",

    },
    "rfsrv": {
        "prefix": "rfsrv",
        "body": "require_once __DIR__.'/../database.php';\r\nrequire_once __DIR__.'/RestfulServer.php';\r\n\r\nclass  ${1}Service extends RestfulServer {\r\n\t\t${6}//protected $usedb = true;\r\n\t\tpublic function __construct() {\r\n\t\t\tparent::__construct();\r\n\t\t}\r\n\r\n\t\tpublic function index(){\r\n\t\t\techo '${1}Service';\r\n\t\t}\r\n\r\n\t\tpublic function model(){\r\n\t\t\treturn new ${5:Model}();\r\n\t\t}\r\n}\r\n\r\n$${1/(.+)/\\L\\1/g}service = new ${1}Service();\r\n$${1/(.+)/\\L\\1/g}service->run();\r\n\r\n",
        "description": "",
    },
    "construct": {
        "prefix": ["con","construct"],
        "body": "__construct(){\r\n\t$1\r\n}",
        "description": "__construct()"
    },
    "func_construct": {
        "prefix": ["con","func_construct"],
        "body": "public function __construct(){\r\n\t$1\r\n}",
        "description": "__construct()"
    },
    "ven": {
        "prefix": "ven",
        "body": "require_once __DIR__.'${1}/vendor/autoload.php';\n\r",
        "description": "requrie vendor autoload"
    }
}