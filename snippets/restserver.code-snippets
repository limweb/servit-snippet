{
    "restmodel": {
        "prefix": "restmodel",
        "body": [
            "<?php",
            "",
            "namespace  ${1}$0 ${TM_DIRECTORY/.*(services|controllers|models)\\\\?(.*)/$2/};",
            "",
            "//----------------------------------------------",
            "//FILE NAME:  ${TM_FILENAME} gen for Servit Framework Model ",
            "//Created by: ${2:Tlen<limweb@hotmail.com>} ",
            "//DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}  \n",
            "//----------------------------------------------",
            "",
            "",
            "use Illuminate\\Database\\Eloquent\\Model; ",
            "use Illuminate\\Database\\Eloquent\\SoftDeletes; ",
            "//use DB; ",
            " ",
            "class ${10:${TM_FILENAME_BASE}} extends ${15|Model|} ",
            "{ ",
            "        protected    \\$table='${20:tablename}'; ",
            "        protected    \\$primaryKey='${30:id}'; ",
            "        protected    \\$keyType = 'string'; ",
            "        public       \\$timestamps = ${40|false,true|}; ",
            "        protected    \\$dateFormat = 'U';",
            "        ${50}protected    \\$guarded = array('id'); ",
            "        ${50}protected    \\$fillable = []; ",
            "        ${50}protected    \\$hidden = []; //สำหรับใส่ mutations ",
            "        ${50}protected    \\$appends = []; ",
            "        ${50}protected    \\$with = []; ",
            "        ${50}protected    \\$connection = ''; ",
            "${16:",
            "        ${55}//set default value for attributes at new Model()",
            "        ${55}protected    \\$attributes = [//'delayed' => false,",
            "        ${55}                             ];",
            "        ${55}//Touching Parent Timestamps ",
            "        ${55}protected    \\$touches = [",
            "        ${55} //'post'  // post is relation function",
            "        ${55}];",
            "        ${60}const CREATED_AT = 'create_date'; ",
            "        ${60}const UPDATED_AT = 'update_date'; ",
            " ",
            "        ${80}use SoftDeletes; ",
            "        ${80}protected    \\$dates = [${81:'created_at',}${82:'updated_at',}${83:'deleted_at'}]; ",
            "        ${90}//integer, real, float, double, string, boolean, object, array, collection, date and datetime. ",
            "        ${90}protected \\$casts = [ ",
            "        ${90}    //    restcast snippet ",
            "        ${90}    //    'created_at' => 'datetime:Y-m-d',",
            "        ${90}]; ",
            "        ${93}public function __construct(array \\$attributes = []) { ",
            "        ${93}    //\\$this->setRawAttributes(['expire_date' => Carbon::now()->addDays(7)],true); ",
            "        ${93}    parent::__construct(\\$attributes); ",
            "        ${93}\\} ",
            "${102: ",
            "    /*",
            "        public static function boot(){ ",
            "            parent::boot(); ",
            "            static::creating(function(\\$model){ ",
            "                //dump('creating'); ",
            "            \\}); ",
            "            static::created(function(\\$model){ ",
            "                //dump('created'); ",
            "            \\}); ",
            "            static::updating(function(\\$model){ ",
            "                //dump('updating'); ",
            "            \\});  ",
            "            static::updated(function(\\$model){ ",
            "                //dump('updated'); ",
            "            \\}); ",
            "            static::saving(function(\\$model){ ",
            "                //dump('saving'); ",
            "            \\});     ",
            "            static::saved(function(\\$model){ ",
            "                //dump('saved'); ",
            "            \\});     ",
            "            static::loaded(function(\\$model){ ",
            "                // dump('loaded'); ",
            "            \\}); ",
            "            static::addGlobalScope('closed', function (Builder \\$builder) { ",
            "                \\$builder->where('is_closed', '=', false); ",
            "                //::withoutGlobalScope('closed') ",
            "            \\}); ",
            "}",
            "${103:",
            "        public function newFromBuilder(\\$attributes = array(),\\$connection = null) { ",
            "            \\$instance = parent::newFromBuilder(\\$attributes); ",
            "            \\$instance->fireModelEvent('loaded'); ",
            "            return    \\$instance; ",
            "        \\}; ",
            "        public static function loaded(\\$callback, \\$priority = 0)   { ",
            "            static::registerModelEvent('loaded', \\$callback, \\$priority); ",
            "        \\} ",
            "        public function scopeIsClosed(\\$query, \\$state) { ",
            "            return \\$query->where('is_closed', \\$state); ",
            "            //วิธีใช้   \\$model->isClose(false)-> ",
            "        \\} ",
            "        //Defining An Accessor ",
            "        public function getFirstNameAttribute(\\$value){ ",
            "            return ucfirst(\\$value); ",
            "            //วิธีใช้ \\$firstName = \\$user->first_name; ",
            "        \\} ",
            "        //Defining A Mutator ",
            "        public function setFirstNameAttribute(\\$value){    ",
            "            \\$this->attributes['first_name'] = strtolower(\\$value);    ",
            "            //วิธีใช้ \\$user->first_name = 'Sally';    ",
            "        \\}    ",
            "    */ ",
            "    //Laravel - Eloquent “Has”, “With”, “WhereHas” - What do they mean? ",
            "     /*",
            "        public function parent()",
            "        {",
            "            return \\$this->hasOne('Item', 'id', 'parent_id');",
            "        \\}",
            "        public function children()",
            "        {",
            "            return \\$this->hasMany('Item', 'parent_id', 'id');",
            "        \\}",
            "        public function tree()",
            "        {",
            "            return static::with(implode('.', array_fill(0,10, 'children')))->where('parent_id', '=', '0')->get();",
            "        \\}",
            "     */",
            "}",
            "}",
            "}"
        ],
        "description": "Servit rest model snippet"
    },
    "restfunc": {
        "prefix": ["restfunc","restfuncctrl"],
        "body": [
            "",
            "/**",
            "*@${1}noAuth",
            "*@url ${10|GET,POST,PUT,DELETE|} /${20:index}${30:}",
            "*----------------------------------------------",
            "*FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "*Created by: Tlen<limweb@hotmail.com>",
            "*DATE:  ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} \n",
            "*----------------------------------------------",
            "*/",
            "public function ${20}(${30}){",
            "    try {",
            "            \\$req = new \\Request(); ",
            "            \\$arrdata = \\$req->${51|input,inputget,inputpost,inputfiles,cookies,sessions,servers,header,verify|}->${52|toArray,toJsonObject,toObject|}(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "        ",
            "        return [",
            "            //'ajax' => \\$ajax,",
            "            //'page' => \\$page,",
            "            //'perpage' => \\$perpage,",
            "            //'skip' => \\$skip,",
            "            //'total' => \\$total,",
            "            //'count' => count(\\$datas),",
            "            //'datas' => \\$datas,",
            "            //'columns' => \\$columns,",
            "            //'info' => \\$info,",
            "            //'infos' => \\$info,",
            "            //'domains' => \\$domains,",
            "            //'method' => \\$method,",
            "            'status' => '1',",
            "            'success' => \\$success,",
            "            'msg' => \\$msg,",
            "            'type' => \\$type,",
            "            'title' => \\$title,",
            "            'jwtuser' => \\$jwtuser,",
            "            //'sql' => Capsule::getQueryLog(),",
            "            'func'=> __CLASS__.'/'.__FUNCTION__",
            "        ];",
            "    } catch (\\Exception \\$e) {",
            "        ${100://throw new \\Jacwright\\RestServer\\RestException(\\$e->getCode(),\\$e->getMessage());}",
            "        return[",
            "            'status' => '0',",
            "            'success'=> false,",
            "            'msg'=> \\$e->getMessage(),",
            "            'func'=> __CLASS__.'/'.__FUNCTION__,",
            "        ]; ",
            "    }",
            "}",
            "",
            ""
        ],
        "description": "Serv Rest ful function Generator"
    },
    "restfunc2": {
        "prefix": ["restfunc2","restfuncctrl2"],
        "body": [
            "",
            "/**",
            "*@${1}noAuth",
            "*@url ${10|GET,POST,PUT,DELETE|} /${20:index}${30:}",
            "*----------------------------------------------",
            "*FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "*Created by: Tlen<limweb@hotmail.com>",
            "*DATE:  ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} \n",
            "*----------------------------------------------",
            "*/",
            "public function ${20}(${30}){",
            "    try {",
            "        return ${0}",
            "    } catch (\\Exception \\$e) {",
            "        ${100://throw new \\Jacwright\\RestServer\\RestException(\\$e->getCode(),\\$e->getMessage());}",
            "        return[",
            "            'status' => '0',",
            "            'success'=> false,",
            "            'msg'=> \\$e->getMessage(),",
            "        ]; ",
            "    }",
            "}",
            ""
        ],
        "description": "Serv Rest ful function Generator"
    },
    "restfuncsrv": {
        "prefix": ["restfuncsrv","restfuncsrv"],
        "body": [
            "",
            "/**",
            "*----------------------------------------------",
            "*FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "*Created by: Tlen<limweb@hotmail.com>",
            "*DATE:  ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} \n",
            "*----------------------------------------------",
            "*/",
            "public static function ${20}(${30}){",
            " ",
            "        try {  ",
            "            // Capsule::enableQueryLog();  ",
            "            // Capsule::beginTransaction();    ",
            "            \\$req = new \\Request(); ",
            "            \\$arrdata = \\$req->${51|input,inputget,inputpost,inputfiles,cookies,sessions,servers,header,verify|}->${52|toArray,toJsonObject,toObject|}(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $101 ",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "            \\$datas = ${0}[]; ",
            "            // Capsule::commit();  ",
            "            return [   ",
            "                //'ajax' => \\$ajax,   ",
            "                //'page' => \\$page,   ",
            "                //'perpage' => \\$perpage, ",
            "                //'skip' => \\$skip,   ",
            "                //'total' => \\$total, ",
            "                //'count' => count(\\$datas),  ",
            "                'datas' => \\$datas,   ",
            "                //'columns' => \\$columns, ",
            "                //'info' => \\$info,   ",
            "                //'infos' => \\$info,  ",
            "                //'domains' => \\$domains, ",
            "                //'method' => \\$method,   ",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(), ",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__  ",
            "            ]; ",
            "        } catch (\\Exception \\$e) {   ",
            "            // Capsule::rollback();    ",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[    ",
            "                'status' => '0',   ",
            "                'success'=> false, ",
            "                'msg'=> \\$e->getMessage(),    ",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__, ",
            "            ];     ",
            "        }  ",
            "           ",
            "}",
            ""
        ],
        "description": "Serv Rest ful function Generator"
    },
    "restsrv": {
        "prefix": ["restsrv"],
        "body": [
            "<?php",
            "",
            "namespace  ${1} ${TM_DIRECTORY/.*(services|controllers|models)\\\\?(.*)/$2/};",
            "",
            "//----------------------------------------------",
            "//FILE NAME:  ${TM_FILENAME} gen for Servit Framework Service",
            "//Created by: Tlen<limweb@hotmail.com>",
            "//DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} ",
            "//----------------------------------------------",
            "use Illuminate\\Database\\Capsule\\Manager as Capsule;",
            "$0",
            "",
            "class ${10:${TM_FILENAME_BASE}${15:Service}}",
            "{",
            "${20:",
            "    public static function all()",
            "    {",
            "        try {",
            "            // Capsule::enableQueryLog();",
            "            // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$jwtuser = \\$req->user; ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $101 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "            \\$datas = ${30:Model}::get();",
            "            // Capsule::commit();",
            "            return [",
            "                //'ajax' => \\$ajax,",
            "                //'page' => \\$page,",
            "                //'perpage' => \\$perpage,",
            "                //'skip' => \\$skip,",
            "                //'total' => \\$total,",
            "                //'count' => count(\\$datas),",
            "                'datas' => \\$datas,",
            "                //'columns' => \\$columns,",
            "                //'info' => \\$info,",
            "                //'infos' => \\$info,",
            "                //'domains' => \\$domains,",
            "                //'method' => \\$method,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",
            "    public static function alliddesc()",
            "    {",
            "        try {",
            "            // Capsule::enableQueryLog();",
            "            // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "        ",
            "           \\$pkey = (new ${30})->getKeyName(); ",
            "            //\\$datas = ${30}::orderBy(\\$pkey, 'desc')->get();",
            "            \\$datas = self::getalliddesc();",
            "            // Capsule::commit();",
            "            return [",
            "                //'ajax' => \\$ajax,",
            "                //'page' => \\$page,",
            "                //'perpage' => \\$perpage,",
            "                //'skip' => \\$skip,",
            "                //'total' => \\$total,",
            "                //'count' => count(\\$datas),",
            "                'datas' => \\$datas,",
            "                //'columns' => \\$columns,",
            "                //'info' => \\$info,",
            "                //'infos' => \\$info,",
            "                //'domains' => \\$domains,",
            "                //'method' => \\$method,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",
            "",
            "    public static function byId(\\$id)",
            "    {",
            "        try {",
            "            // Capsule::enableQueryLog();",
            "            // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "        ",
            "            \\$data = ${30}::find(\\$id);",
            "            // Capsule::commit();",
            "            return [",
            "                //'ajax' => \\$ajax,",
            "                //'page' => \\$page,",
            "                //'perpage' => \\$perpage,",
            "                //'skip' => \\$skip,",
            "                //'total' => \\$total,",
            "                //'count' => count(\\$datas),",
            "                'data' => \\$data,",
            "                //'datas' => \\$datas,",
            "                //'columns' => \\$columns,",
            "                //'info' => \\$info,",
            "                //'infos' => \\$info,",
            "                //'domains' => \\$domains,",
            "                //'method' => \\$method,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",
            "",
            "    public static function byuuId(\\$uuid)",
            "    {",
            "        try {",
            "            // Capsule::enableQueryLog();",
            "            // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "        ",
            "            \\$data = ${30}::where('uuid',\\$uuid)->first();",
            "            // Capsule::commit();",
            "            return [",
            "                //'ajax' => \\$ajax,",
            "                //'page' => \\$page,",
            "                //'perpage' => \\$perpage,",
            "                //'skip' => \\$skip,",
            "                //'total' => \\$total,",
            "                //'count' => count(\\$datas),",
            "                'data' => \\$data,",
            "                //'datas' => \\$datas,",
            "                //'columns' => \\$columns,",
            "                //'info' => \\$info,",
            "                //'infos' => \\$info,",
            "                //'domains' => \\$domains,",
            "                //'method' => \\$method,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",
            "    public static function insert()",
            "    {",
            "        try {",
            "             // Capsule::enableQueryLog();",
            "             // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$arrdata = \\$req->${51|input,inputget,inputpost,inputfiles,cookies,sessions,servers,header,verify|}->${52|toArray,toJsonObject,toObject|}(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "        ",
            "             ${35:\\$r} = new ${30}();",
            "             \\$fills = ${35}->getFillable();",
            "             foreach (\\$fills as \\$key) {",
            "                 if (isset(\\$arrdata[\\$key])) {",
            "                     ${35}->{\\$key\\} = \\$arrdata[\\$key];",
            "                 \\}",
            "             \\}",
            "${36:",
            "            if(\\$jwtuser) { ",
            "                \\$userid = \\$jwtuser->getKey();",
            "                ${35}->created_by = \\$userid;",
            "                ${35}->updated_by = \\$userid;",
            "            \\}",
            "}",
            "            ${35}->save();",
            "            \\$datas = self::getalliddesc();",
            "            // Capsule::commit();",
            "            return [",
            "                //'ajax' => \\$ajax,",
            "                //'page' => \\$page,",
            "                //'perpage' => \\$perpage,",
            "                //'skip' => \\$skip,",
            "                //'total' => \\$total,",
            "                //'count' => count(\\$datas),",
            "                'data' => ${35},",
            "                'datas' => \\$datas,",
            "                //'columns' => \\$columns,",
            "                //'info' => \\$info,",
            "                //'infos' => \\$info,",
            "                //'domains' => \\$domains,",
            "                //'method' => \\$method,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",
            "    public static function insertOrupdate()",
            "    {",
            "        try {",
            "           // Capsule::enableQueryLog();",
            "           // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$arrdata = \\$req->${51|input,inputget,inputpost,inputfiles,cookies,sessions,servers,header,verify|}->${52|toArray,toJsonObject,toObject|}(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "        ",
            "           ${35:\\$r} = null;",
            "           \\$newdata = false; ",
            "           \\$pkey = (new ${30})->getKeyName(); ",
            "           if (isset(\\$arrdata[\\$pkey])) {",
            "               ${35} = ${30}::find(\\$arrdata[\\$pkey]);",
            "           \\}",
            "           if (!${35}) {",
            "               ${35} = new ${30}();",
            "                \\$newdata = true; ",
            "           \\}",
            "",
            "           \\$fills = ${35}->getFillable();",
            "           foreach (\\$fills as \\$key) {",
            "               if (isset(\\$arrdata[\\$key])) {",
            "                   ${35}->{\\$key\\} = \\$arrdata[\\$key];",
            "               \\}",
            "           \\}",
            "${37:",
            "           if(\\$jwtuser) { ",
            "               \\$userid = \\$jwtuser->getKey();",
            "               if(\\$newdata) { ",
            "                  ${35}->created_by = \\$userid;",
            "               \\}",
            "               ${35}->updated_by = \\$userid;",
            "           \\}",
            "}",
            "           ${35}->save();",
            "           \\$datas = self::getalliddesc();",
            "           // Capsule::commit();",
            "            return [",
            "                //'ajax' => \\$ajax,",
            "                //'page' => \\$page,",
            "                //'perpage' => \\$perpage,",
            "                //'skip' => \\$skip,",
            "                //'total' => \\$total,",
            "                //'count' => count(\\$datas),",
            "                //'newdata' => \\$newdata ",
            "                'data' => ${35},",
            "                'datas' => \\$datas,",
            "                //'columns' => \\$columns,",
            "                //'info' => \\$info,",
            "                //'infos' => \\$info,",
            "                //'domains' => \\$domains,",
            "                //'method' => \\$method,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",
            "    public static function delete(\\$id)",
            "    {",
            "        try {",
            "            // Capsule::enableQueryLog();",
            "            // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "        ",
            "            ${35:\\$r} = ${30}::find(\\$id);",
            "            if (${35}) {",
            "${38:",
            "                if(\\$jwtuser) { ",
            "                      \\$userid = \\$jwtuser->getKey(); ",
            "                      ${35}->deleteBy = \\$userid;",
            "                \\}",
            "}",
            "                ${35}->delete();",
            "            \\}",
            "            \\$datas = self::getalliddesc();",
            "            // Capsule::commit();",
            "            return [",
            "                //'ajax' => \\$ajax,",
            "                //'page' => \\$page,",
            "                //'perpage' => \\$perpage,",
            "                //'skip' => \\$skip,",
            "                //'total' => \\$total,",
            "                //'count' => count(\\$datas),",
            "                'data' => ${35},",
            "                'datas' => \\$datas,",
            "                //'columns' => \\$columns,",
            "                //'info' => \\$info,",
            "                //'infos' => \\$info,",
            "                //'domains' => \\$domains,",
            "                //'method' => \\$method,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",

            "    public static function deletebyuuid(\\$uuid)",
            "    {",
            "        try {",
            "            // Capsule::enableQueryLog();",
            "            // Capsule::beginTransaction();",
            "            \\$req = new \\Request(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "}",
            "        ",
            "            ${35:\\$r} = ${30}::where('uuid',\\$uuid)->first();",
            "            if (${35}) {",
            "${38:",
            "                if(\\$jwtuser) { ",
            "                      \\$userid = \\$jwtuser->getKey(); ",
            "                      ${35}->deleteBy = \\$userid;",
            "                \\}",
            "}",
            "                ${35}->delete();",
            "            \\}",
            "            // Capsule::commit();",
            "            return [",
            "                'data' => ${35},",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "                //'sql' => Capsule::getQueryLog(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            // Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__,",
            "            ]; ",
            "        \\}",
            "    \\}",
            "",
            "    public static function vuetable() ",
            "    {",
            "        try {",
            "            // Capsule::enableQueryLog(); ",
            "            // Capsule::beginTransaction(); ",
            "            \\$req = new \\Request();  ",
            "            \\$jwtuser = \\$req->user;  ",
            "",
            "            \\$msg = 'สำเร็จ';  ",
            "            \\$type='success'; //success,info,error,warning  ",
            "            \\$title='Successed!';  ",
            "            \\$success = true;  ",
            "              ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) {  ",
            "                throw new \\Exception('401 Unauthorized',401);   ",
            "                \\$success = false;  ",
            "                \\$type ='error';  ",
            "                \\$title = 'Error!';  ",
            "                \\$msg = '401 Unauthorized';      ",
            "            \\}  ",
            "}",
            "            // init data ",
            "            \\$perpage = 10; ",
            "            \\$current_page = 1; ",
            "            \\$from = \\$skip = ( \\$current_page - 1 ) * \\$perpage ; ",
            "            \\$to= (\\$current_page)*\\$perpage; ",
            "            \\$host = \\$req->servers->HTTP_HOST; ",
            "            \\$method = \\$_SERVER['REQUEST_METHOD']; ",
            "            \\$urlnext = ''; ",
            "            \\$urlprev = ''; ",
            "            \\$sort = ''; ",
            "            \\$kw = ''; ",
            "            \\$filter = ''; ",
            "            \\$next_page_url=''; ",
            "            \\$prev_page_url=''; ",
            "            \\$inptus = ''; ",
            "            // \\$fills = []; //ext: ['name','nickname']; ใส่ field ที่ต้องการ ค้นหาด้วย kw ",
            "            \\$cat = new ${30}(); ",
            "            ${120}\\$fills = \\$cat->getFillable(); ",
            "            //\\$fills = [${121}]; ",
            "            // dd(\\$req->gets->kw); ",
            " ",
            "            \\$qry = ${30}::query(); ",
            "            // GET----- ",
            "            if( \\$method == 'GET') { ",
            "                \\$perpage = \\$skip = \\$req->gets->has('per_page') ? (int)\\$req->gets->per_page : 10 ; ",
            "                \\$current_page = \\$req->gets->has('page') ? (int)\\$req->gets->page : 1 ; ",
            "                \\$from = ( \\$current_page - 1 ) * \\$perpage ; ",
            "                \\$to= (\\$current_page)*\\$perpage; ",
            "                \\$host = \\$req->servers->HTTP_HOST; ",
            "                \\$sort = \\$req->gets->has('sort') ? \\$req->gets->sort : '' ;  ",
            "                \\$kw = \\$req->gets->has('kw') ? \\$req->gets->kw : '' ; ",
            "                \\$filter = \\$req->gets->has('filter') ? \\$req->gets->filter : '' ; ",
            "            \\}     ",
            " ",
            "            // POST---- ",
            "            if( \\$method == 'POST') { ",
            "                \\$perpage = \\$skip = \\$req->input->has('per_page') ? (int)\\$req->input->per_page : 10 ; ",
            "                \\$current_page = \\$req->input->has('page') ? (int)\\$req->input->page : 1 ; ",
            "                \\$from = ( \\$current_page - 1 ) * \\$perpage ; ",
            "                \\$to= (\\$current_page)*\\$perpage; ",
            "                \\$host = \\$req->host; ",
            "                \\$sort = \\$req->input->has('sort') ? \\$req->input->sort : '' ; ",
            "                \\$kw = \\$req->input->has('kw') ? \\$req->input->kw : '' ; ",
            "                \\$filter = \\$req->input->has('filter') ? \\$req->input->filter : '' ; ",
            "                // if(in_array(\\$req->input->toArray())) ",
            "                \\$inputs = \\$req->input->toArray(); ",
            "                foreach(\\$inputs as \\$key => \\$val){ ",
            "                    if(!in_array(\\$key,['kw','sort','filter','per_page','page']) ){ ",
            "                        \\$qry->where(\\$key,'like','%'.\\$val.'%'); ",
            "                    \\} ",
            "                \\} ",
            "            \\} ",
            "            // SORT --------------- ",
            "                if(\\$sort){ ",
            "                    \\$sorts = explode(',',\\$sort); ",
            "                    foreach(\\$sorts as \\$sortrow){ ",
            "                        list(\\$s,\\$ds) =  explode('|',\\$sortrow); ",
            "                        \\$qry->orderBy(\\$s,\\$ds); ",
            "                    \\} ",
            "                \\} ",
            "            // KW --------------- ",
            "                if(\\$kw){  // kw ใส่ได้ 1 ค่า ",
            "                    foreach (\\$fills as \\$key) { ",
            "                       \\$qry->orWhere(\\$key,'like','%'.\\$kw.'%'); ",
            "                    \\} ",
            "                \\} ",
            "            // FILTER --------------- ",
            "                if(\\$filter){ // มาจาก header of table  ประกับด้วย field|kw,field|kw ",
            "                    \\$filters = explode(',',\\$filter); ",
            "                    foreach(\\$filters as \\$filterrow){ ",
            "                        list(\\$f,\\$kw) =  explode('|',\\$filterrow); ",
            "                        \\$qry->orWhere(\\$f,'like','%'.\\$kw.'%'); ",
            "                    \\} ",
            "                \\} ",
            "             ",
            " ",
            "            \\$total = \\$qry->count(); ",
            "            \\$lastpage = ceil(\\$total/\\$perpage); ",
            "            \\$datas = \\$qry->orderBy('${125:created_at}','desc')->take(\\$perpage)->skip(\\$from)->get(); ",
            " ",
            "            // GET Only ------------------- ",
            "            if( \\$method == 'GET' && \\$host) { ",
            "                \\$protocal = explode('/',\\$req->servers->SERVER_PROTOCOL)[0]=='HTTP'?'http':'https'; ",
            "                \\$serverpath = \\$protocal.'://'.\\$host.(explode('?',\\$req->servers->REQUEST_URI)[0]); ",
            "                 ",
            "                if(\\$sort){ ",
            "                    \\$urlnext .= '&sort='.\\$req->gets->sort; ",
            "                    \\$urlprev .= '&sort='.\\$req->gets->sort; ",
            "                \\} ",
            "                if(\\$filter){ ",
            "                    \\$urlnext .= '&filter='.\\$req->gets->filter; ",
            "                    \\$urlprev .= '&filter='.\\$req->gets->filter; ",
            "                \\} ",
            "             ",
            "                if(\\$current_page == \\$lastpage || \\$total==0 || \\$lastpage == 0 ){ ",
            "                    \\$next_page_url= null; ",
            "                \\} else { ",
            "                    \\$next_page_url= \\$serverpath.'?page='.(\\$current_page+1).'&per_page='.\\$perpage.\\$urlnext; ",
            "                \\} ",
            "                if(\\$current_page <= 1){ ",
            "                    \\$prev_page_url = null; ",
            "                \\} else { ",
            "                    \\$prev_page_url= \\$serverpath.'?page='.(\\$current_page-1).'&per_page='.\\$perpage.\\$urlprev; ",
            "                \\} ",
            "            \\} ",
            " ",
            "            // Capsule::commit(); ",
            "            return [ ",
            "                'total' => \\$total, ",
            "                'per_page'=> \\$perpage, ",
            "                'current_page'=> \\$current_page, ",
            "                'last_page'=> \\$lastpage, ",
            "                'next_page_url'=> \\$next_page_url, ",
            "                'prev_page_url'=> \\$prev_page_url, ",
            "                'from'=> \\$from+1, ",
            "                'to'=> \\$to, ",
            "                'host' => \\$host, ",
            "                // 'ajax' => \\$ajax, ",
            "                'page' => \\$current_page, ",
            "                'perpage' => \\$perpage, ",
            "                'skip' => \\$skip, ",
            "                'total' => \\$total, ",
            "                'count' => count(\\$datas), ",
            "                // 'columns' => Capsule::getSchemaBuilder()->getColumnListing(\\$qry->getQuery()->from), ",
            "                // 'info' => \\$info, ",
            "                // 'infos' => \\$info, ",
            "                // 'domains' => \\$host, ",
            "                // 'method' => \\$method, ",
            "                // 'sort' => \\$sort, ",
            "                // 'kw' => \\$kw, ",
            "                // 'filter' => \\$filter, ",
            "                // 'fills' => \\$fills, ",
            "                // 'inputs' => \\$inptus, ",
            "                'data' => \\$datas, ",
            "                'status' => '1', ",
            "                'success' => \\$success, ",
            "                'msg' => \\$msg, ",
            "                'type' => \\$type, ",
            "                'title' => \\$title, ",
            "                'jwtuser' => \\$jwtuser, ",
            "                // 'sql' => Capsule::getQueryLog(), ",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__ ",
            "            ]; ",
            "        \\} catch (\\Exception \\$e) { ",
            "            // Capsule::rollback(); ",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[ ",
            "                'status' => '0', ",
            "                'success'=> false, ",
            "                'msg'=> \\$e->getMessage(), ",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__, ",
            "            ];  ",
            "        \\} ",
            "    \\} ",
            "",
            "    private static function getalliddesc(){ ",
            "        try { ",
            "           \\$pkey = (new ${30})->getKeyName(); ",
            "            return ${30}::orderBy(\\$pkey, 'desc')->get(); ",
            "        \\} catch (\\Exception \\$e) { ",
            "            return [];  ",
            "        \\} ",
            "    \\} ",
            "} ",
            "\\} ",
            "",
            ""
        ],
        "description": "Servit Rest ful Service "
    },
    "restctrl": {
        "prefix": ["restctrl"],
        "body": [
            "<?php",
            "",
            "namespace  ${1} ${TM_DIRECTORY/.*(services|controllers|models)\\\\?(.*)/$2/};",
            "",
            "//----------------------------------------------",
            "//FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "//Created by: Tlen<limweb@hotmail.com>",
            "//DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} \n",
            "//----------------------------------------------",
            "use    Illuminate\\Database\\Capsule\\Manager as Capsule;",
            "use    \\Jacwright\\RestServer\\RestException; ",
            "use    Carbon\\Carbon;",
            "$0",
            "",
            "class ${20:${TM_FILENAME_BASE}${22:Controller}}  {",
            "    ",
            "${29:",
            "   /**",
            "     *@noAuth",
            "     *@url GET /${30:route}s",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function alliddesc()",
            "    {",
            "        try {",
            "            return ${40}Service::alliddesc();",
            "        \\} catch (\\Exception \\$e) {",
            "        ${100://throw new RestException(\\$e->getCode(),\\$e->getMessage());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "",
            "   /**",
            "     *@noAuth",
            "     *@url GET /${30:route}s/vuetable",
            "     *@url POST /${30:route}s/vuetable",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function vuetable()",
            "    {",
            "        try {",
            "            return ${40}Service::vuetable();",
            "        \\} catch (\\Exception \\$e) {",
            "            ${100://throw new RestException(\\$e->getCode(),\\$e->getMessage());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "",
            "    /**",
            "     *@noAuth",
            "     *@url GET /${30}/\\$id/byid",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *Created by: Tlen<limweb@hotmail.com>",
            "     *DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function byId(\\$id)",
            "    {",
            "        try {",
            "            return ${40}Service::byId(\\$id);",
            "        \\} catch (\\Exception \\$e) {",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "",
            "    /**",
            "     *@noAuth",
            "     *@url GET /${30}/\\$uuid/byuuid",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *Created by: Tlen<limweb@hotmail.com>",
            "     *DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function byuuId(\\$uuid)",
            "    {",
            "        try {",
            "            return ${40}Service::byuuId(\\$uuid);",
            "        \\} catch (\\Exception \\$e) {",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "",
            "    /**",
            "     *@noAuth",
            "     *@url POST /${30}/update",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *Created by: Tlen<limweb@hotmail.com>",
            "     *DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function update()",
            "    {",
            "        try {",
            "            return ${40}Service::insertOrupdate();",
            "        \\} catch (\\Exception \\$e) {",
            "            ${100://throw new RestException(\\$e->getCode(),\\$e->getMessage());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "    /**",
            "     *@noAuth",
            "     *@url POST /${30}/add",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *Created by: Tlen<limweb@hotmail.com>",
            "     *DATE: ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function add()",
            "    {",
            "        try {",
            "            return ${40}Service::insert();",
            "        \\} catch (\\Exception \\$e) {",
            "            ${100://throw new RestException(\\$e->getCode(),\\$e->getMessage());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "    /**",
            "     *@noAuth",
            "     *@url GET /${30}/del/\\$id",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *Created by: Tlen<limweb@hotmail.com>",
            "     *DATE:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function del(\\$id)",
            "    {",
            "        try {",
            "            return ${40}Service::delete(\\$id);",
            "        \\} catch (\\Exception \\$e) {",
            "            ${100://throw new RestException(\\$e->getCode(),\\$e->getMessage());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "    /**",
            "     *@noAuth",
            "     *@url GET /${30}/delbyuuid/\\$uuid",
            "     *----------------------------------------------",
            "     *FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "     *Created by: Tlen<limweb@hotmail.com>",
            "     *DATE:${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
            "",
            "     *----------------------------------------------",
            "     */",
            "    public function delbyuuid(\\$uuid)",
            "    {",
            "        try {",
            "            return ${40}Service::deletebyuuid(\\$uuid);",
            "        \\} catch (\\Exception \\$e) {",
            "            ${100://throw new RestException(\\$e->getCode(),\\$e->getMessage());}",
            "            return [",
            "                'status' => '0',",
            "                'success' => false,",
            "                'msg' => \\$e->getMessage(),",
            "            ];",
            "        \\}",
            "    \\}",
            "",
            "}",
            "    ${0}",
            "",
            "}",
            ""
        ],
        "description": "Servit rest ful Controller"
    },
    "restcast": {
        "prefix": ["restcast"],
        "body": "'${10:field}' => '${20|integer,real,float,double,string,boolean,object,array,collection,date,datetime,timestamp|}',${0}",
        "description": "Servit rest Ful Model Cast type"
    },
    "restmsdt":{
        "prefix": ["restmsdt"],
        "body": [
            "    public static function msdt_${10:func}(){",
            "        try {",
            "            \\$req = new \\Request(); ",
            "            \\$arrdata = \\$req->${51|input,inputget,inputpost,inputfiles,cookies,sessions,servers,header,verify|}->${52|toArray,toJsonObject,toObject|}(); ",
            "            \\$jwtuser = \\$req->user; ",
            " ",
            "            \\$msg = 'สำเร็จ'; ",
            "            \\$type='success'; //success,info,error,warning ",
            "            \\$title='Successed!'; ",
            "            \\$success = true; ",
            "            $0 ",
            "            if(!\\$jwtuser) { ",
            "                throw new \\Exception('401 Unauthorized',401);  ",
            "                \\$success = false; ",
            "                \\$type ='error'; ",
            "                \\$title = 'Error!'; ",
            "                \\$msg = '401 Unauthorized';     ",
            "            \\} ",
            "        ",
            "            \\$master_fills = [];",
            "            \\$detail_fills = [];",
            "            \\$detailfunc = '${20:detailsfunc}';",
            "            //Capsule::enableQueryLog();",
            "            Capsule::beginTransaction();        ",
            "            //--------- insert Master----------start",
            "                \\$master = new ${30:\\MasterModel}();",
            "                 if(empty(\\$master_fills)){",
            "                     \\$master_fills = \\$master->getFillable();",
            "                 \\}",
            "                foreach (\\$master_fills as \\$key) {",
            "                    if (isset(\\$arrdata[\\$key])) {",
            "                        \\$master->{\\$key\\} = \\$arrdata[\\$key];",
            "                    \\}",
            "                \\}",
            "                \\$master->save();",
            "            //--------- insert Master----------end",
            "            //--------- insert Details----------start",
            "                \\$details = [];",
            "                \\$detaildatas = \\$arrdata['${40:details}'];",
            "                foreach (\\$detaildatas as \\$detail) {",
            "                    \\$d = new ${50:\\DetailModel}();",
            "                     if(empty(\\$detail_fills)){ ",
            "                         \\$detail_fills = \\$d->getFillable();",
            "                     \\}",
            "                    foreach (\\$detail_fills as \\$key) {",
            "                        if (isset(\\$detail[\\$key])) {",
            "                            \\$d->{\\$key\\} = \\$detail[\\$key];",
            "                        \\}",
            "                    \\}",
            "                    \\$d->save();",
            "                    \\$details[] = \\$d;",
            "                \\}",
            "            //--------- insert Details----------end",
            "            \\$master->{\\$detailfunc\\}()->saveMany(\\$details);",
            "            Capsule::commit();",
            "            return [",
            "                'master' => \\$master,",
            "                'details' => \\$details,",
            "                'status' => '1',",
            "                'success' => \\$success,",
            "                'msg' => \\$msg,",
            "                'type' => \\$type,",
            "                'title' => \\$title,",
            "                'jwtuser' => \\$jwtuser,",
            "            ];",
            "        \\} catch (\\Exception \\$e) {",
            "            Capsule::rollback();",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[",
            "                'status' => '0',",
            "                'success'=> false,",
            "                'msg'=> \\$e->getMessage(),",
            "            ]; ",
            "        \\}",
            "    \\}    ",
        ],
        "description": "rest master details funciton"
    },
    "restfuncpage":{
        "prefix": ["restfuncpage","paging","pagination"],
        "body": [
            "",
            "/**",
            "*@${1}noAuth",
            "*@url ${10|GET,POST,PUT,DELETE|} /${20:index}${30:}",
            "*----------------------------------------------",
            "*https://example.com?page=1&per_page=10&sort=aaa|desc&kw=kerwork&filter=aaa|aaa,bbb|bbb *",
            "*FILE NAME:  ${TM_FILENAME} gen for Servit Framework Controller",
            "*Created by: Tlen<limweb@hotmail.com>",
            "*DATE:  ${CURRENT_YEAR}-${CURRENT_MONTH}-${CURRENT_DATE}(${CURRENT_DAY_NAME_SHORT})  ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND} \n",
            "*----------------------------------------------",
            "*/",
            "public function ${20}(${30}){",
            "        try {",
            "            // Capsule::enableQueryLog(); ",
            "            // Capsule::beginTransaction(); ",
            "            \\$req = new \\Request();  ",
            "            \\$jwtuser = \\$req->user;  ",
            "",
            "            \\$msg = 'สำเร็จ';  ",
            "            \\$type='success'; //success,info,error,warning  ",
            "            \\$title='Successed!';  ",
            "            \\$success = true;  ",
            "              ",
            "            $0 ",
            "${104:",
            "            if(!\\$jwtuser) {  ",
            "                throw new \\Exception('401 Unauthorized',401);   ",
            "                \\$success = false;  ",
            "                \\$type ='error';  ",
            "                \\$title = 'Error!';  ",
            "                \\$msg = '401 Unauthorized';      ",
            "            \\}  ",
            "}",
            "            // init data ",
            "            \\$perpage = 10; ",
            "            \\$current_page = 1; ",
            "            \\$from = \\$skip = ( \\$current_page - 1 ) * \\$perpage ; ",
            "            \\$to= (\\$current_page)*\\$perpage; ",
            "            \\$host = \\$req->servers->HTTP_HOST; ",
            "            \\$method = \\$_SERVER['REQUEST_METHOD']; ",
            "            \\$urlnext = ''; ",
            "            \\$urlprev = ''; ",
            "            \\$sort = ''; ",
            "            \\$kw = ''; ",
            "            \\$filter = ''; ",
            "            \\$next_page_url=''; ",
            "            \\$prev_page_url=''; ",
            "            \\$inptus = ''; ",
            "            // \\$fills = []; //ext: ['name','nickname']; ใส่ field ที่ต้องการ ค้นหาด้วย kw ",
            "            \\$cat = new ${40:Model}(); ",
            "            ${120}\\$fills = \\$cat->getFillable(); ",
            "            //\\$fills = [${121}]; ",
            "            // dd(\\$req->gets->kw); ",
            " ",
            "            \\$qry = ${40:Model}::query(); ",
            "            // GET----- ",
            "            if( \\$method == 'GET') { ",
            "                \\$perpage = \\$skip = \\$req->gets->has('per_page') ? (int)\\$req->gets->per_page : 10 ; ",
            "                \\$current_page = \\$req->gets->has('page') ? (int)\\$req->gets->page : 1 ; ",
            "                \\$from = ( \\$current_page - 1 ) * \\$perpage ; ",
            "                \\$to= (\\$current_page)*\\$perpage; ",
            "                \\$host = \\$req->servers->HTTP_HOST; ",
            "                \\$sort = \\$req->gets->has('sort') ? \\$req->gets->sort : '' ;  ",
            "                \\$kw = \\$req->gets->has('kw') ? \\$req->gets->kw : '' ; ",
            "                \\$filter = \\$req->gets->has('filter') ? \\$req->gets->filter : '' ; ",
            "            \\}     ",
            " ",
            "            // POST---- ",
            "            if( \\$method == 'POST') { ",
            "                \\$perpage = \\$skip = \\$req->input->has('per_page') ? (int)\\$req->input->per_page : 10 ; ",
            "                \\$current_page = \\$req->input->has('page') ? (int)\\$req->input->page : 1 ; ",
            "                \\$from = ( \\$current_page - 1 ) * \\$perpage ; ",
            "                \\$to= (\\$current_page)*\\$perpage; ",
            "                \\$host = \\$req->host; ",
            "                \\$sort = \\$req->input->has('sort') ? \\$req->input->sort : '' ; ",
            "                \\$kw = \\$req->input->has('kw') ? \\$req->input->kw : '' ; ",
            "                \\$filter = \\$req->input->has('filter') ? \\$req->input->filter : '' ; ",
            "                // if(in_array(\\$req->input->toArray())) ",
            "                \\$inputs = \\$req->input->toArray(); ",
            "                foreach(\\$inputs as \\$key => \\$val){ ",
            "                    if(!in_array(\\$key,['kw','sort','filter','per_page','page']) ){ ",
            "                        \\$qry->where(\\$key,'like','%'.\\$val.'%'); ",
            "                    \\} ",
            "                \\} ",
            "            \\} ",
            "            // SORT --------------- ",
            "                if(\\$sort){ ",
            "                    \\$sorts = explode(',',\\$sort); ",
            "                    foreach(\\$sorts as \\$sortrow){ ",
            "                        list(\\$s,\\$ds) =  explode('|',\\$sortrow); ",
            "                        \\$qry->orderBy(\\$s,\\$ds); ",
            "                    \\} ",
            "                \\} ",
            "            // KW --------------- ",
            "                if(\\$kw){  // kw ใส่ได้ 1 ค่า ",
            "                    foreach (\\$fills as \\$key) { ",
            "                       \\$qry->orWhere(\\$key,'like','%'.\\$kw.'%'); ",
            "                    \\} ",
            "                \\} ",
            "            // FILTER --------------- ",
            "                if(\\$filter){ // มาจาก header of table  ประกับด้วย field|kw,field|kw ",
            "                    \\$filters = explode(',',\\$filter); ",
            "                    foreach(\\$filters as \\$filterrow){ ",
            "                        list(\\$f,\\$kw) =  explode('|',\\$filterrow); ",
            "                        \\$qry->orWhere(\\$f,'like','%'.\\$kw.'%'); ",
            "                    \\} ",
            "                \\} ",
            "             ",
            " ",
            "            \\$total = \\$qry->count(); ",
            "            \\$lastpage = ceil(\\$total/\\$perpage); ",
            "            \\$datas = \\$qry->orderBy('${125:created_at}','desc')->take(\\$perpage)->skip(\\$from)->get(); ",
            " ",
            "            // GET Only ------------------- ",
            "            if( \\$method == 'GET' && \\$host) { ",
            "                \\$protocal = explode('/',\\$req->servers->SERVER_PROTOCOL)[0]=='HTTP'?'http':'https'; ",
            "                \\$serverpath = \\$protocal.'://'.\\$host.(explode('?',\\$req->servers->REQUEST_URI)[0]); ",
            "                 ",
            "                if(\\$sort){ ",
            "                    \\$urlnext .= '&sort='.\\$req->gets->sort; ",
            "                    \\$urlprev .= '&sort='.\\$req->gets->sort; ",
            "                \\} ",
            "                if(\\$filter){ ",
            "                    \\$urlnext .= '&filter='.\\$req->gets->filter; ",
            "                    \\$urlprev .= '&filter='.\\$req->gets->filter; ",
            "                \\} ",
            "             ",
            "                if(\\$current_page == \\$lastpage || \\$total==0 || \\$lastpage == 0 ){ ",
            "                    \\$next_page_url= null; ",
            "                \\} else { ",
            "                    \\$next_page_url= \\$serverpath.'?page='.(\\$current_page+1).'&per_page='.\\$perpage.\\$urlnext; ",
            "                \\} ",
            "                if(\\$current_page <= 1){ ",
            "                    \\$prev_page_url = null; ",
            "                \\} else { ",
            "                    \\$prev_page_url= \\$serverpath.'?page='.(\\$current_page-1).'&per_page='.\\$perpage.\\$urlprev; ",
            "                \\} ",
            "            \\} ",
            " ",
            "            // Capsule::commit(); ",
            "            return [ ",
            "                'total' => \\$total, ",
            "                'per_page'=> \\$perpage, ",
            "                'current_page'=> \\$current_page, ",
            "                'last_page'=> \\$lastpage, ",
            "                'next_page_url'=> \\$next_page_url, ",
            "                'prev_page_url'=> \\$prev_page_url, ",
            "                'from'=> \\$from+1, ",
            "                'to'=> \\$to, ",
            "                'host' => \\$host, ",
            "                // 'ajax' => \\$ajax, ",
            "                'page' => \\$page, ",
            "                'perpage' => \\$perpage, ",
            "                'skip' => \\$skip, ",
            "                'total' => \\$total, ",
            "                'count' => count(\\$datas), ",
            "                // 'columns' => Capsule::getSchemaBuilder()->getColumnListing(\\$qry->getQuery()->from), ",
            "                // 'info' => \\$info, ",
            "                // 'infos' => \\$info, ",
            "                // 'domains' => \\$host, ",
            "                // 'method' => \\$method, ",
            "                // 'sort' => \\$sort, ",
            "                // 'kw' => \\$kw, ",
            "                // 'filter' => \\$filter, ",
            "                // 'fills' => \\$fills, ",
            "                // 'inputs' => \\$inptus, ",
            "                'data' => \\$datas, ",
            "                'status' => '1', ",
            "                'success' => \\$success, ",
            "                'msg' => \\$msg, ",
            "                'type' => \\$type, ",
            "                'title' => \\$title, ",
            "                'jwtuser' => \\$jwtuser, ",
            "                // 'sql' => Capsule::getQueryLog(), ",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__ ",
            "            ]; ",
            "        \\} catch (\\Exception \\$e) { ",
            "            // Capsule::rollback(); ",
            "            ${100://throw new \\Exception(\\$e->getMessage(),\\$e->getCode());}",
            "            return[ ",
            "                'status' => '0', ",
            "                'success'=> false, ",
            "                'msg'=> \\$e->getMessage(), ",
            "                //'func'=> __CLASS__.'/'.__FUNCTION__, ",
            "            ];  ",
            "        \\} ",
            "    \\} ",
            "",
        ],
        "description": "rest function with pagination"
    }
}